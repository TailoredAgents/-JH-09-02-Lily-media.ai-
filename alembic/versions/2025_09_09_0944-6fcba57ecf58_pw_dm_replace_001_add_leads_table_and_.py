"""PW-DM-REPLACE-001: Add leads table and update quote relationships

Revision ID: 6fcba57ecf58
Revises: 042_quotes_table
Create Date: 2025-09-09 09:44:13.480383

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6fcba57ecf58'
down_revision = '042_quotes_table'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pricing_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('min_job_total', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('base_rates', sa.JSON(), nullable=False),
    sa.Column('bundles', sa.JSON(), nullable=False),
    sa.Column('seasonal_modifiers', sa.JSON(), nullable=False),
    sa.Column('additional_services', sa.JSON(), nullable=True),
    sa.Column('travel_settings', sa.JSON(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('effective_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'name', name='uq_pricing_rule_org_name')
    )
    op.create_index(op.f('ix_pricing_rules_id'), 'pricing_rules', ['id'], unique=False)
    op.create_index('ix_pricing_rules_org_active', 'pricing_rules', ['organization_id', 'is_active'], unique=False)
    op.create_index('ix_pricing_rules_org_effective', 'pricing_rules', ['organization_id', 'effective_date'], unique=False)
    op.create_index(op.f('ix_pricing_rules_organization_id'), 'pricing_rules', ['organization_id'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.String(), nullable=False),
    sa.Column('permission_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('webhook_delivery_tracking',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('webhook_id', sa.String(length=255), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('delivery_status', sa.String(length=50), nullable=False),
    sa.Column('attempt_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('first_attempted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failure_reason', sa.String(length=100), nullable=True),
    sa.Column('last_error_message', sa.Text(), nullable=True),
    sa.Column('consecutive_failures', sa.Integer(), nullable=False),
    sa.Column('total_processing_time_ms', sa.Integer(), nullable=False),
    sa.Column('avg_response_time_ms', sa.Integer(), nullable=True),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_webhook_delivery_next_retry', 'webhook_delivery_tracking', ['next_retry_at'], unique=False)
    op.create_index('idx_webhook_delivery_org', 'webhook_delivery_tracking', ['organization_id'], unique=False)
    op.create_index('idx_webhook_delivery_platform_event', 'webhook_delivery_tracking', ['platform', 'event_type'], unique=False)
    op.create_index('idx_webhook_delivery_status', 'webhook_delivery_tracking', ['delivery_status'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_delivery_status'), 'webhook_delivery_tracking', ['delivery_status'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_event_type'), 'webhook_delivery_tracking', ['event_type'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_id'), 'webhook_delivery_tracking', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_next_retry_at'), 'webhook_delivery_tracking', ['next_retry_at'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_organization_id'), 'webhook_delivery_tracking', ['organization_id'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_platform'), 'webhook_delivery_tracking', ['platform'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_user_id'), 'webhook_delivery_tracking', ['user_id'], unique=False)
    op.create_index(op.f('ix_webhook_delivery_tracking_webhook_id'), 'webhook_delivery_tracking', ['webhook_id'], unique=False)
    op.create_table('webhook_idempotency_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('idempotency_key', sa.String(length=64), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('webhook_id', sa.String(length=255), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('processing_result', sa.String(length=50), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('event_summary', sa.JSON(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_webhook_idempotency_expires', 'webhook_idempotency_records', ['expires_at'], unique=False)
    op.create_index('idx_webhook_idempotency_org', 'webhook_idempotency_records', ['organization_id'], unique=False)
    op.create_index('idx_webhook_idempotency_platform_event', 'webhook_idempotency_records', ['platform', 'event_type'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_event_type'), 'webhook_idempotency_records', ['event_type'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_expires_at'), 'webhook_idempotency_records', ['expires_at'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_id'), 'webhook_idempotency_records', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_idempotency_key'), 'webhook_idempotency_records', ['idempotency_key'], unique=True)
    op.create_index(op.f('ix_webhook_idempotency_records_organization_id'), 'webhook_idempotency_records', ['organization_id'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_platform'), 'webhook_idempotency_records', ['platform'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_user_id'), 'webhook_idempotency_records', ['user_id'], unique=False)
    op.create_index(op.f('ix_webhook_idempotency_records_webhook_id'), 'webhook_idempotency_records', ['webhook_id'], unique=False)
    op.create_table('user_teams',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'team_id')
    )
    op.create_table('leads',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('organization_id', sa.String(), nullable=False),
    sa.Column('interaction_id', sa.String(), nullable=True),
    sa.Column('source_platform', sa.String(), nullable=False),
    sa.Column('contact_name', sa.String(), nullable=True),
    sa.Column('contact_email', sa.String(), nullable=True),
    sa.Column('contact_phone', sa.String(), nullable=True),
    sa.Column('contact_address', sa.Text(), nullable=True),
    sa.Column('requested_services', sa.JSON(), nullable=False),
    sa.Column('pricing_intent', sa.String(), nullable=True),
    sa.Column('extracted_surfaces', sa.JSON(), nullable=True),
    sa.Column('extracted_details', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('priority_score', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('updated_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['interaction_id'], ['social_interactions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_lead_contact_email', 'leads', ['contact_email'], unique=False)
    op.create_index('idx_lead_org_created', 'leads', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_lead_org_status', 'leads', ['organization_id', 'status'], unique=False)
    op.create_index('idx_lead_platform_org', 'leads', ['source_platform', 'organization_id'], unique=False)
    op.create_index('idx_lead_priority', 'leads', ['priority_score'], unique=False)
    op.create_index(op.f('ix_leads_contact_email'), 'leads', ['contact_email'], unique=False)
    op.create_index(op.f('ix_leads_interaction_id'), 'leads', ['interaction_id'], unique=False)
    op.create_index(op.f('ix_leads_organization_id'), 'leads', ['organization_id'], unique=False)
    op.create_index(op.f('ix_leads_source_platform'), 'leads', ['source_platform'], unique=False)
    op.create_index(op.f('ix_leads_status'), 'leads', ['status'], unique=False)
    op.create_table('quotes',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('organization_id', sa.String(), nullable=False),
    sa.Column('lead_id', sa.String(), nullable=True),
    sa.Column('customer_email', sa.String(), nullable=False),
    sa.Column('customer_name', sa.String(), nullable=True),
    sa.Column('customer_phone', sa.String(), nullable=True),
    sa.Column('customer_address', sa.Text(), nullable=True),
    sa.Column('line_items', sa.JSON(), nullable=False),
    sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('discounts', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('declined_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expired_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('quote_number', sa.String(length=50), nullable=True),
    sa.Column('valid_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('customer_notes', sa.Text(), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=True),
    sa.Column('source_metadata', sa.JSON(), nullable=True),
    sa.Column('pricing_rule_id', sa.Integer(), nullable=True),
    sa.Column('pricing_snapshot', sa.JSON(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('updated_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pricing_rule_id'], ['pricing_rules.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_quotes_customer_email'), 'quotes', ['customer_email'], unique=False)
    op.create_index(op.f('ix_quotes_lead_id'), 'quotes', ['lead_id'], unique=False)
    op.create_index('ix_quotes_org_created', 'quotes', ['organization_id', 'created_at'], unique=False)
    op.create_index('ix_quotes_org_customer', 'quotes', ['organization_id', 'customer_email'], unique=False)
    op.create_index('ix_quotes_org_status', 'quotes', ['organization_id', 'status'], unique=False)
    op.create_index(op.f('ix_quotes_organization_id'), 'quotes', ['organization_id'], unique=False)
    op.create_index(op.f('ix_quotes_quote_number'), 'quotes', ['quote_number'], unique=True)
    op.create_index(op.f('ix_quotes_status'), 'quotes', ['status'], unique=False)
    op.create_index('ix_quotes_valid_until', 'quotes', ['valid_until'], unique=False)
    op.drop_index('idx_oauth_tokens_connection_ref', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_expires', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_org_platform', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_valid', table_name='oauth_tokens')
    op.drop_index('ix_oauth_tokens_is_valid', table_name='oauth_tokens')
    op.drop_table('oauth_tokens')
    op.drop_index('idx_inbox_settings_user_id', table_name='inbox_settings')
    op.drop_table('inbox_settings')
    op.drop_index('idx_social_responses_interaction_id', table_name='social_responses')
    op.drop_index('idx_social_responses_status', table_name='social_responses')
    op.drop_index('idx_social_responses_user_id', table_name='social_responses')
    op.drop_table('social_responses')
    op.drop_index('idx_knowledge_base_category', table_name='knowledge_base_entries')
    op.drop_index('idx_knowledge_base_keywords', table_name='knowledge_base_entries', postgresql_using='gin')
    op.drop_index('idx_knowledge_base_user_id', table_name='knowledge_base_entries')
    op.drop_table('knowledge_base_entries')
    op.drop_index('ix_dead_letter_tasks_failure_reason', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_id', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_organization_id', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_queue_name', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_task_id', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_task_name', table_name='dead_letter_tasks')
    op.drop_index('ix_dead_letter_tasks_user_id', table_name='dead_letter_tasks')
    op.drop_table('dead_letter_tasks')
    op.add_column('admin_audit_logs', sa.Column('old_values', sa.JSON(), nullable=True))
    op.add_column('admin_audit_logs', sa.Column('new_values', sa.JSON(), nullable=True))
    op.add_column('admin_audit_logs', sa.Column('request_id', sa.String(), nullable=True))
    op.add_column('admin_audit_logs', sa.Column('success', sa.Boolean(), nullable=True))
    op.add_column('admin_audit_logs', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('admin_audit_logs', sa.Column('execution_time_ms', sa.Integer(), nullable=True))
    op.alter_column('admin_audit_logs', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('admin_audit_logs', 'admin_user_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('admin_audit_logs', 'resource_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('admin_audit_logs', 'details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('admin_audit_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('admin_audit_logs_public_id_key', 'admin_audit_logs', type_='unique')
    op.create_index('idx_audit_admin_action', 'admin_audit_logs', ['admin_user_id', 'action'], unique=False)
    op.create_index('idx_audit_created_at', 'admin_audit_logs', ['created_at'], unique=False)
    op.create_index('idx_audit_resource', 'admin_audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('ix_admin_audit_logs_id'), 'admin_audit_logs', ['id'], unique=False)
    op.drop_column('admin_audit_logs', 'public_id')
    op.add_column('admin_sessions', sa.Column('refresh_token', sa.String(), nullable=False))
    op.add_column('admin_sessions', sa.Column('location', sa.String(), nullable=True))
    op.add_column('admin_sessions', sa.Column('last_activity', sa.DateTime(), nullable=True))
    op.add_column('admin_sessions', sa.Column('logout_at', sa.DateTime(), nullable=True))
    op.alter_column('admin_sessions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('admin_sessions', 'admin_user_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('admin_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('admin_sessions_public_id_key', 'admin_sessions', type_='unique')
    op.drop_constraint('admin_sessions_session_token_key', 'admin_sessions', type_='unique')
    op.drop_index('ix_admin_sessions_expires_at', table_name='admin_sessions')
    op.create_index(op.f('ix_admin_sessions_id'), 'admin_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_admin_sessions_refresh_token'), 'admin_sessions', ['refresh_token'], unique=True)
    op.create_index(op.f('ix_admin_sessions_session_token'), 'admin_sessions', ['session_token'], unique=True)
    op.drop_column('admin_sessions', 'public_id')
    op.add_column('admin_users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('admin_users', sa.Column('is_superuser', sa.Boolean(), nullable=False))
    op.add_column('admin_users', sa.Column('failed_login_attempts', sa.Integer(), nullable=True))
    op.add_column('admin_users', sa.Column('locked_until', sa.DateTime(), nullable=True))
    op.add_column('admin_users', sa.Column('password_changed_at', sa.DateTime(), nullable=True))
    op.add_column('admin_users', sa.Column('two_factor_enabled', sa.Boolean(), nullable=True))
    op.add_column('admin_users', sa.Column('two_factor_secret', sa.String(), nullable=True))
    op.add_column('admin_users', sa.Column('created_by', sa.String(), nullable=True))
    op.add_column('admin_users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('admin_users', sa.Column('updated_by', sa.String(), nullable=True))
    op.alter_column('admin_users', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('admin_users_id_seq'::regclass)"))
    op.alter_column('admin_users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_foreign_key(None, 'admin_users', 'admin_users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'admin_users', 'admin_users', ['updated_by'], ['id'])
    op.add_column('api_key_revocations', sa.Column('api_key', sa.String(), nullable=False))
    op.add_column('api_key_revocations', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('api_key_revocations', sa.Column('revoked_by', sa.String(), nullable=False))
    op.add_column('api_key_revocations', sa.Column('notes', sa.Text(), nullable=True))
    op.alter_column('api_key_revocations', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('api_key_revocations', 'revoked_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('api_key_revocations_public_id_key', 'api_key_revocations', type_='unique')
    op.drop_index('ix_api_key_revocations_api_key_id', table_name='api_key_revocations')
    op.drop_index('ix_api_key_revocations_revoked_at', table_name='api_key_revocations')
    op.create_index(op.f('ix_api_key_revocations_api_key'), 'api_key_revocations', ['api_key'], unique=False)
    op.create_index(op.f('ix_api_key_revocations_id'), 'api_key_revocations', ['id'], unique=False)
    op.drop_constraint('api_key_revocations_revoked_by_id_fkey', 'api_key_revocations', type_='foreignkey')
    op.create_foreign_key(None, 'api_key_revocations', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'api_key_revocations', 'admin_users', ['revoked_by'], ['id'])
    op.drop_column('api_key_revocations', 'metadata')
    op.drop_column('api_key_revocations', 'revoked_by_id')
    op.drop_column('api_key_revocations', 'api_key_id')
    op.drop_column('api_key_revocations', 'public_id')
    op.drop_column('api_key_revocations', 'is_active')
    op.add_column('company_knowledge', sa.Column('source', sa.String(), nullable=True))
    op.add_column('company_knowledge', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.add_column('company_knowledge', sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('company_knowledge', sa.Column('requires_approval', sa.Boolean(), nullable=True))
    op.alter_column('company_knowledge', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index('ix_company_knowledge_is_active', table_name='company_knowledge')
    op.drop_index('ix_company_knowledge_topic', table_name='company_knowledge')
    op.drop_index('ix_company_knowledge_usage_count', table_name='company_knowledge')
    op.drop_index('ix_company_knowledge_user_id', table_name='company_knowledge')
    op.create_index('idx_company_knowledge_active', 'company_knowledge', ['is_active'], unique=False)
    op.create_index('idx_company_knowledge_usage', 'company_knowledge', ['usage_count', 'last_used_at'], unique=False)
    op.create_index('idx_company_knowledge_user_topic', 'company_knowledge', ['user_id', 'topic'], unique=False)
    op.drop_constraint('company_knowledge_user_id_fkey', 'company_knowledge', type_='foreignkey')
    op.create_foreign_key(None, 'company_knowledge', 'users', ['user_id'], ['id'])
    op.drop_index('ix_content_content_type', table_name='content')
    op.drop_index('ix_content_user_created', table_name='content')
    op.drop_column('content', 'content_data')
    op.drop_column('content', 'content_type')
    op.add_column('content_categories', sa.Column('avg_engagement_rate', sa.Float(), nullable=True))
    op.add_column('content_categories', sa.Column('total_content_count', sa.Integer(), nullable=True))
    op.add_column('content_categories', sa.Column('keywords', sa.JSON(), nullable=True))
    op.add_column('content_categories', sa.Column('training_samples', sa.JSON(), nullable=True))
    op.alter_column('content_categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_categories', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('content_categories_public_id_key', 'content_categories', type_='unique')
    op.drop_constraint('content_categories_slug_key', 'content_categories', type_='unique')
    op.drop_index('ix_content_categories_parent_id', table_name='content_categories')
    op.drop_index('ix_content_categories_slug', table_name='content_categories')
    op.create_index(op.f('ix_content_categories_slug'), 'content_categories', ['slug'], unique=True)
    op.create_index(op.f('ix_content_categories_id'), 'content_categories', ['id'], unique=False)
    op.create_unique_constraint(None, 'content_categories', ['name'])
    op.drop_column('content_categories', 'is_active')
    op.drop_column('content_categories', 'sort_order')
    op.drop_column('content_categories', 'public_id')
    op.add_column('content_drafts', sa.Column('connection_id', sa.UUID(), nullable=False))
    op.add_column('content_drafts', sa.Column('content_hash', sa.String(length=64), nullable=False))
    op.add_column('content_drafts', sa.Column('media_urls', sa.JSON(), nullable=True))
    op.add_column('content_drafts', sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('content_drafts', sa.Column('error_message', sa.Text(), nullable=True))
    op.alter_column('content_drafts', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('content_drafts_id_seq'::regclass)"))
    op.alter_column('content_drafts', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('content_drafts', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'draft'::character varying"))
    op.alter_column('content_drafts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('content_drafts_public_id_key', 'content_drafts', type_='unique')
    op.drop_index('ix_content_drafts_org_id', table_name='content_drafts')
    op.drop_index('ix_content_drafts_status', table_name='content_drafts')
    op.drop_index('ix_content_drafts_user_id', table_name='content_drafts')
    op.create_index('idx_content_drafts_hash', 'content_drafts', ['content_hash'], unique=False)
    op.create_index('idx_content_drafts_org_connection', 'content_drafts', ['organization_id', 'connection_id'], unique=False)
    op.drop_constraint('content_drafts_user_id_fkey', 'content_drafts', type_='foreignkey')
    op.drop_constraint('content_drafts_organization_id_fkey', 'content_drafts', type_='foreignkey')
    op.create_foreign_key(None, 'content_drafts', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'content_drafts', 'social_connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.drop_column('content_drafts', 'metadata')
    op.drop_column('content_drafts', 'content_type')
    op.drop_column('content_drafts', 'user_id')
    op.drop_column('content_drafts', 'public_id')
    op.drop_column('content_drafts', 'platform')
    op.drop_column('content_drafts', 'title')
    op.drop_column('content_drafts', 'updated_at')
    op.add_column('content_items', sa.Column('content_hash', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('platform', sa.String(), nullable=False))
    op.add_column('content_items', sa.Column('content_format', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('platform_post_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('platform_url', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('embedding_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('embedding_model', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('likes_count', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('shares_count', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('comments_count', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('reach_count', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('click_count', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('engagement_rate', sa.Float(), nullable=True))
    op.add_column('content_items', sa.Column('performance_tier', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('viral_score', sa.Float(), nullable=True))
    op.add_column('content_items', sa.Column('topic_category', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('sentiment', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('tone', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('reading_level', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('ai_generated', sa.Boolean(), nullable=True))
    op.add_column('content_items', sa.Column('ai_model', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('generation_prompt', sa.Text(), nullable=True))
    op.add_column('content_items', sa.Column('generation_params', sa.JSON(), nullable=True))
    op.add_column('content_items', sa.Column('hashtags', sa.JSON(), nullable=True))
    op.add_column('content_items', sa.Column('mentions', sa.JSON(), nullable=True))
    op.add_column('content_items', sa.Column('links', sa.JSON(), nullable=True))
    op.add_column('content_items', sa.Column('keywords', sa.JSON(), nullable=True))
    op.add_column('content_items', sa.Column('optimal_posting_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('content_items', sa.Column('time_zone', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('day_of_week', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('hour_of_day', sa.Integer(), nullable=True))
    op.add_column('content_items', sa.Column('parent_content_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('template_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('campaign_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('ab_test_group', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('ab_test_id', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('requires_approval', sa.Boolean(), nullable=True))
    op.add_column('content_items', sa.Column('approved_by', sa.String(), nullable=True))
    op.add_column('content_items', sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('content_items', sa.Column('rejection_reason', sa.Text(), nullable=True))
    op.add_column('content_items', sa.Column('content_quality_score', sa.Float(), nullable=True))
    op.add_column('content_items', sa.Column('brand_voice_alignment', sa.Float(), nullable=True))
    op.add_column('content_items', sa.Column('last_performance_update', sa.DateTime(timezone=True), nullable=True))
    op.add_column('content_items', sa.Column('content_metadata', sa.JSON(), nullable=True))
    op.alter_column('content_items', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('content_items', 'content_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'article'::character varying"))
    op.alter_column('content_items', 'published_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('content_items', 'scheduled_for',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('content_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('content_items_public_id_key', 'content_items', type_='unique')
    op.drop_index('ix_content_items_category_id', table_name='content_items')
    op.drop_index('ix_content_items_user_id', table_name='content_items')
    op.create_index('idx_content_ab_test', 'content_items', ['ab_test_id', 'ab_test_group'], unique=False)
    op.create_index('idx_content_created_platform', 'content_items', ['created_at', 'platform'], unique=False)
    op.create_index('idx_content_performance', 'content_items', ['performance_tier', 'engagement_rate'], unique=False)
    op.create_index('idx_content_topic_sentiment', 'content_items', ['topic_category', 'sentiment'], unique=False)
    op.create_index('idx_content_user_platform', 'content_items', ['user_id', 'platform'], unique=False)
    op.create_index(op.f('ix_content_items_ab_test_id'), 'content_items', ['ab_test_id'], unique=False)
    op.create_index(op.f('ix_content_items_content_hash'), 'content_items', ['content_hash'], unique=False)
    op.create_index(op.f('ix_content_items_content_type'), 'content_items', ['content_type'], unique=False)
    op.create_index(op.f('ix_content_items_created_at'), 'content_items', ['created_at'], unique=False)
    op.create_index(op.f('ix_content_items_embedding_id'), 'content_items', ['embedding_id'], unique=False)
    op.create_index(op.f('ix_content_items_performance_tier'), 'content_items', ['performance_tier'], unique=False)
    op.create_index(op.f('ix_content_items_platform'), 'content_items', ['platform'], unique=False)
    op.create_index(op.f('ix_content_items_platform_post_id'), 'content_items', ['platform_post_id'], unique=False)
    op.create_index(op.f('ix_content_items_scheduled_for'), 'content_items', ['scheduled_for'], unique=False)
    op.create_index(op.f('ix_content_items_sentiment'), 'content_items', ['sentiment'], unique=False)
    op.create_index(op.f('ix_content_items_topic_category'), 'content_items', ['topic_category'], unique=False)
    op.drop_constraint('content_items_organization_id_fkey', 'content_items', type_='foreignkey')
    op.drop_constraint('content_items_category_id_fkey', 'content_items', type_='foreignkey')
    op.create_foreign_key(None, 'content_items', 'content_items', ['parent_content_id'], ['id'])
    op.drop_column('content_items', 'metadata')
    op.drop_column('content_items', 'excerpt')
    op.drop_column('content_items', 'slug')
    op.drop_column('content_items', 'view_count')
    op.drop_column('content_items', 'tags')
    op.drop_column('content_items', 'public_id')
    op.drop_column('content_items', 'like_count')
    op.drop_column('content_items', 'organization_id')
    op.drop_column('content_items', 'title')
    op.drop_column('content_items', 'featured_image_url')
    op.drop_column('content_items', 'share_count')
    op.drop_column('content_items', 'format')
    op.drop_column('content_items', 'category_id')
    op.add_column('content_logs', sa.Column('organization_id', sa.UUID(), nullable=False))
    op.alter_column('content_logs', 'public_id',
               existing_type=sa.VARCHAR(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('content_logs', 'engagement_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('content_logs', 'published_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('content_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_logs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_content_logs_created_at', table_name='content_logs')
    op.drop_index('ix_content_logs_platform', table_name='content_logs')
    op.drop_index('ix_content_logs_status', table_name='content_logs')
    op.drop_index('ix_content_logs_user_id', table_name='content_logs')
    op.drop_constraint('uq_content_logs_public_id', 'content_logs', type_='unique')
    op.drop_index('ix_content_logs_public_id', table_name='content_logs')
    op.create_index(op.f('ix_content_logs_public_id'), 'content_logs', ['public_id'], unique=True)
    op.create_index(op.f('ix_content_logs_id'), 'content_logs', ['id'], unique=False)
    op.create_index('ix_content_logs_org_platform', 'content_logs', ['organization_id', 'platform'], unique=False)
    op.create_index('ix_content_logs_org_status', 'content_logs', ['organization_id', 'status'], unique=False)
    op.create_index('ix_content_logs_org_user', 'content_logs', ['organization_id', 'user_id'], unique=False)
    op.create_index(op.f('ix_content_logs_organization_id'), 'content_logs', ['organization_id'], unique=False)
    op.drop_constraint('content_logs_user_id_fkey', 'content_logs', type_='foreignkey')
    op.create_foreign_key(None, 'content_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'content_logs', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.drop_column('content_logs', 'scheduled_time')
    op.drop_column('content_logs', 'metadata')
    op.drop_column('content_logs', 'engagement_score')
    op.add_column('content_performance_snapshots', sa.Column('snapshot_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('likes_count', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('shares_count', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('comments_count', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('reach_count', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('click_count', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('likes_growth', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('shares_growth', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('comments_growth', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('reach_growth', sa.Integer(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('engagement_velocity', sa.Float(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('viral_coefficient', sa.Float(), nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('platform_metrics', sa.JSON(), nullable=True))
    op.alter_column('content_performance_snapshots', 'content_item_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               nullable=False)
    op.drop_constraint('content_performance_snapshots_public_id_key', 'content_performance_snapshots', type_='unique')
    op.drop_index('ix_content_performance_content_id', table_name='content_performance_snapshots')
    op.drop_index('ix_content_performance_platform', table_name='content_performance_snapshots')
    op.drop_index('ix_content_performance_snapshot_date', table_name='content_performance_snapshots')
    op.create_index('idx_snapshot_content_time', 'content_performance_snapshots', ['content_item_id', 'snapshot_time'], unique=False)
    op.create_index(op.f('ix_content_performance_snapshots_id'), 'content_performance_snapshots', ['id'], unique=False)
    op.create_index(op.f('ix_content_performance_snapshots_snapshot_time'), 'content_performance_snapshots', ['snapshot_time'], unique=False)
    op.drop_constraint('content_performance_snapshots_content_id_fkey', 'content_performance_snapshots', type_='foreignkey')
    op.drop_column('content_performance_snapshots', 'clicks')
    op.drop_column('content_performance_snapshots', 'snapshot_date')
    op.drop_column('content_performance_snapshots', 'performance_score')
    op.drop_column('content_performance_snapshots', 'shares')
    op.drop_column('content_performance_snapshots', 'raw_metrics')
    op.drop_column('content_performance_snapshots', 'public_id')
    op.drop_column('content_performance_snapshots', 'content_id')
    op.drop_column('content_performance_snapshots', 'created_at')
    op.drop_column('content_performance_snapshots', 'likes')
    op.drop_column('content_performance_snapshots', 'platform')
    op.drop_column('content_performance_snapshots', 'reach')
    op.drop_column('content_performance_snapshots', 'impressions')
    op.drop_column('content_performance_snapshots', 'views')
    op.drop_column('content_performance_snapshots', 'comments')
    op.add_column('content_schedules', sa.Column('connection_id', sa.UUID(), nullable=False))
    op.add_column('content_schedules', sa.Column('content', sa.Text(), nullable=False))
    op.add_column('content_schedules', sa.Column('content_hash', sa.String(length=64), nullable=False))
    op.add_column('content_schedules', sa.Column('media_urls', sa.JSON(), nullable=True))
    op.add_column('content_schedules', sa.Column('platform_post_id', sa.String(length=255), nullable=True))
    op.add_column('content_schedules', sa.Column('idempotency_key', sa.String(length=255), nullable=True))
    op.alter_column('content_schedules', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('content_schedules', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('content_schedules', 'scheduled_for',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('content_schedules', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'scheduled'::character varying"))
    op.alter_column('content_schedules', 'published_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('content_schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('content_schedules_public_id_key', 'content_schedules', type_='unique')
    op.drop_index('ix_content_schedules_scheduled_for', table_name='content_schedules')
    op.drop_index('ix_content_schedules_status', table_name='content_schedules')
    op.drop_index('ix_content_schedules_user_id', table_name='content_schedules')
    op.create_index('idx_content_schedules_content_hash_connection', 'content_schedules', ['content_hash', 'connection_id'], unique=False)
    op.create_index('idx_content_schedules_idempotency', 'content_schedules', ['idempotency_key'], unique=False)
    op.create_index('idx_content_schedules_org_connection', 'content_schedules', ['organization_id', 'connection_id'], unique=False)
    op.create_index('idx_content_schedules_scheduled', 'content_schedules', ['scheduled_for'], unique=False)
    op.create_index('idx_content_schedules_status', 'content_schedules', ['status'], unique=False)
    op.create_unique_constraint('uq_content_schedule_hash_connection', 'content_schedules', ['content_hash', 'connection_id'])
    op.create_unique_constraint(None, 'content_schedules', ['idempotency_key'])
    op.drop_constraint('content_schedules_content_draft_id_fkey', 'content_schedules', type_='foreignkey')
    op.drop_constraint('content_schedules_organization_id_fkey', 'content_schedules', type_='foreignkey')
    op.drop_constraint('content_schedules_user_id_fkey', 'content_schedules', type_='foreignkey')
    op.create_foreign_key(None, 'content_schedules', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'content_schedules', 'social_connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.drop_column('content_schedules', 'timezone')
    op.drop_column('content_schedules', 'user_id')
    op.drop_column('content_schedules', 'public_id')
    op.drop_column('content_schedules', 'content_draft_id')
    op.drop_column('content_schedules', 'retry_count')
    op.drop_column('content_schedules', 'platform')
    op.add_column('content_templates', sa.Column('prompt_template', sa.Text(), nullable=True))
    op.add_column('content_templates', sa.Column('category_id', sa.Integer(), nullable=True))
    op.add_column('content_templates', sa.Column('content_type', sa.String(), nullable=False))
    op.add_column('content_templates', sa.Column('avg_performance', sa.Float(), nullable=True))
    op.add_column('content_templates', sa.Column('constraints', sa.JSON(), nullable=True))
    op.add_column('content_templates', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('content_templates', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('content_templates', 'platform',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('content_templates', 'variables',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('content_templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('content_templates_public_id_key', 'content_templates', type_='unique')
    op.drop_index('ix_content_templates_user_id', table_name='content_templates')
    op.drop_constraint('content_templates_organization_id_fkey', 'content_templates', type_='foreignkey')
    op.create_foreign_key(None, 'content_templates', 'content_categories', ['category_id'], ['id'])
    op.drop_column('content_templates', 'organization_id')
    op.drop_column('content_templates', 'public_id')
    op.drop_column('content_templates', 'preview_data')
    op.drop_column('content_templates', 'template_type')
    op.add_column('goal_progress', sa.Column('old_value', sa.Float(), nullable=False))
    op.add_column('goal_progress', sa.Column('new_value', sa.Float(), nullable=False))
    op.add_column('goal_progress', sa.Column('change_amount', sa.Float(), nullable=False))
    op.add_column('goal_progress', sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('goal_progress', sa.Column('source', sa.String(), nullable=True))
    op.alter_column('goal_progress', 'goal_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index('ix_goal_progress_created_at', table_name='goal_progress')
    op.drop_index('ix_goal_progress_goal_id', table_name='goal_progress')
    op.create_index(op.f('ix_goal_progress_id'), 'goal_progress', ['id'], unique=False)
    op.drop_column('goal_progress', 'value')
    op.drop_column('goal_progress', 'created_at')
    op.add_column('goals', sa.Column('goal_type', sa.String(), nullable=False))
    op.add_column('goals', sa.Column('platform', sa.String(), nullable=True))
    op.add_column('goals', sa.Column('goal_metadata', sa.JSON(), nullable=True))
    op.alter_column('goals', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('goals', 'target_value',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('goals', 'target_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('goals', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('goals', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('goals', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('goals_public_id_key', 'goals', type_='unique')
    op.drop_index('ix_goals_category', table_name='goals')
    op.drop_index('ix_goals_created_at', table_name='goals')
    op.drop_index('ix_goals_organization_id', table_name='goals')
    op.drop_index('ix_goals_public_id', table_name='goals')
    op.drop_index('ix_goals_status', table_name='goals')
    op.drop_index('ix_goals_user_id', table_name='goals')
    op.drop_constraint('goals_organization_id_fkey', 'goals', type_='foreignkey')
    op.drop_column('goals', 'priority')
    op.drop_column('goals', 'category')
    op.drop_column('goals', 'is_public')
    op.drop_column('goals', 'public_id')
    op.drop_column('goals', 'organization_id')
    op.drop_column('goals', 'unit')
    op.add_column('interaction_responses', sa.Column('retry_count', sa.Integer(), nullable=True))
    op.drop_index('ix_interaction_responses_created_at', table_name='interaction_responses')
    op.drop_index('ix_interaction_responses_interaction_id', table_name='interaction_responses')
    op.drop_index('ix_interaction_responses_status', table_name='interaction_responses')
    op.drop_index('ix_interaction_responses_user_id', table_name='interaction_responses')
    op.create_index('idx_interaction_response_interaction', 'interaction_responses', ['interaction_id'], unique=False)
    op.create_index('idx_interaction_response_status', 'interaction_responses', ['status'], unique=False)
    op.create_index('idx_interaction_response_user_sent', 'interaction_responses', ['user_id', 'sent_at'], unique=False)
    op.drop_constraint('interaction_responses_interaction_id_fkey', 'interaction_responses', type_='foreignkey')
    op.drop_constraint('interaction_responses_user_id_fkey', 'interaction_responses', type_='foreignkey')
    op.create_foreign_key(None, 'interaction_responses', 'social_interactions', ['interaction_id'], ['id'])
    op.create_foreign_key(None, 'interaction_responses', 'users', ['user_id'], ['id'])
    op.drop_column('interaction_responses', 'updated_at')
    op.drop_index('ix_memories_importance_score', table_name='memories')
    op.drop_index('ix_memories_user_created', table_name='memories')
    op.drop_column('memories', 'importance_score')
    op.add_column('memory_content', sa.Column('content', sa.Text(), nullable=False))
    op.add_column('memory_content', sa.Column('content_type', sa.String(), nullable=False))
    op.add_column('memory_content', sa.Column('source', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('platform', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('embedding_id', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('similarity_cluster', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('engagement_score', sa.Float(), nullable=True))
    op.add_column('memory_content', sa.Column('performance_tier', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('tags', sa.JSON(), nullable=True))
    op.add_column('memory_content', sa.Column('sentiment', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('topic_category', sa.String(), nullable=True))
    op.add_column('memory_content', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('memory_content', sa.Column('content_metadata', sa.JSON(), nullable=True))
    op.alter_column('memory_content', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('memory_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_memory_content_content_id', table_name='memory_content')
    op.drop_index('ix_memory_content_memory_id', table_name='memory_content')
    op.drop_index('ix_memory_content_relationship', table_name='memory_content')
    op.drop_constraint('memory_content_public_id_key', 'memory_content', type_='unique')
    op.drop_constraint('memory_content_memory_id_fkey', 'memory_content', type_='foreignkey')
    op.drop_constraint('memory_content_content_id_fkey', 'memory_content', type_='foreignkey')
    op.drop_constraint('memory_content_content_item_id_fkey', 'memory_content', type_='foreignkey')
    op.drop_column('memory_content', 'memory_id')
    op.drop_column('memory_content', 'context')
    op.drop_column('memory_content', 'relationship_type')
    op.drop_column('memory_content', 'public_id')
    op.drop_column('memory_content', 'content_id')
    op.drop_column('memory_content', 'content_item_id')
    op.add_column('metrics', sa.Column('platform', sa.String(), nullable=False))
    op.add_column('metrics', sa.Column('date_recorded', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('metrics', sa.Column('metric_metadata', sa.JSON(), nullable=True))
    op.alter_column('metrics', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('metrics', 'metric_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'counter'::character varying"))
    op.drop_index('ix_metrics_metric_name', table_name='metrics')
    op.drop_index('ix_metrics_timestamp', table_name='metrics')
    op.drop_index('ix_metrics_user_id', table_name='metrics')
    op.drop_constraint('metrics_public_id_key', 'metrics', type_='unique')
    op.create_index(op.f('ix_metrics_id'), 'metrics', ['id'], unique=False)
    op.drop_constraint('metrics_organization_id_fkey', 'metrics', type_='foreignkey')
    op.drop_column('metrics', 'metric_name')
    op.drop_column('metrics', 'source')
    op.drop_column('metrics', 'public_id')
    op.drop_column('metrics', 'created_at')
    op.drop_column('metrics', 'dimensions')
    op.drop_column('metrics', 'period')
    op.drop_column('metrics', 'organization_id')
    op.drop_column('metrics', 'timestamp')
    op.drop_column('metrics', 'unit')
    op.add_column('milestones', sa.Column('target_value', sa.Float(), nullable=False))
    op.add_column('milestones', sa.Column('achieved', sa.Boolean(), nullable=True))
    op.add_column('milestones', sa.Column('achieved_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('milestones', 'goal_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('milestones', 'target_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('milestones', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_milestones_created_at', table_name='milestones')
    op.drop_index('ix_milestones_goal_id', table_name='milestones')
    op.drop_index('ix_milestones_is_completed', table_name='milestones')
    op.create_index(op.f('ix_milestones_id'), 'milestones', ['id'], unique=False)
    op.drop_column('milestones', 'completed_at')
    op.drop_column('milestones', 'is_completed')
    op.alter_column('notifications', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('notifications', 'message',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('notifications', 'notification_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'info'::character varying"))
    op.alter_column('notifications', 'goal_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('notifications', 'content_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('notifications', 'workflow_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('notifications', 'read_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('notifications', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_notifications_type', table_name='notifications')
    op.create_index('idx_notification_created', 'notifications', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_notification_user_read', 'notifications', ['user_id', 'is_read'], unique=False)
    op.create_index('idx_notification_user_type', 'notifications', ['user_id', 'notification_type'], unique=False)
    op.create_index(op.f('ix_notifications_notification_type'), 'notifications', ['notification_type'], unique=False)
    op.drop_constraint('notifications_user_id_fkey', 'notifications', type_='foreignkey')
    op.create_foreign_key(None, 'notifications', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'notifications', 'goals', ['goal_id'], ['id'])
    op.drop_column('notifications', 'type')
    op.add_column('organization_invitations', sa.Column('team_id', sa.String(), nullable=True))
    op.add_column('organization_invitations', sa.Column('role', sa.String(), nullable=False))
    op.add_column('organization_invitations', sa.Column('token', sa.String(), nullable=False))
    op.add_column('organization_invitations', sa.Column('invited_user_id', sa.Integer(), nullable=True))
    op.alter_column('organization_invitations', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('organization_invitations', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('organization_invitations', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('organization_invitations', 'accepted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('organization_invitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organization_invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_org_invitations_email', table_name='organization_invitations')
    op.drop_index('ix_org_invitations_expires_at', table_name='organization_invitations')
    op.drop_index('ix_org_invitations_organization_id', table_name='organization_invitations')
    op.drop_index('ix_org_invitations_status', table_name='organization_invitations')
    op.drop_index('ix_org_invitations_token', table_name='organization_invitations')
    op.drop_constraint('organization_invitations_invitation_token_key', 'organization_invitations', type_='unique')
    op.drop_constraint('organization_invitations_public_id_key', 'organization_invitations', type_='unique')
    op.create_unique_constraint(None, 'organization_invitations', ['token'])
    op.drop_constraint('organization_invitations_role_id_fkey', 'organization_invitations', type_='foreignkey')
    op.drop_constraint('organization_invitations_accepted_by_id_fkey', 'organization_invitations', type_='foreignkey')
    op.create_foreign_key(None, 'organization_invitations', 'users', ['invited_user_id'], ['id'])
    op.create_foreign_key(None, 'organization_invitations', 'teams', ['team_id'], ['id'])
    op.drop_column('organization_invitations', 'role_id')
    op.drop_column('organization_invitations', 'public_id')
    op.drop_column('organization_invitations', 'accepted_by_id')
    op.drop_column('organization_invitations', 'message')
    op.drop_column('organization_invitations', 'invitation_token')
    op.add_column('organizations', sa.Column('plan_type', sa.String(), nullable=True))
    op.add_column('organizations', sa.Column('max_teams', sa.Integer(), nullable=True))
    op.add_column('organizations', sa.Column('settings', sa.JSON(), nullable=True))
    op.add_column('organizations', sa.Column('features_enabled', sa.JSON(), nullable=True))
    op.add_column('organizations', sa.Column('owner_id', sa.Integer(), nullable=False))
    op.alter_column('organizations', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_organizations_created_at', table_name='organizations')
    op.drop_index('ix_organizations_name', table_name='organizations')
    op.drop_index('ix_organizations_public_id', table_name='organizations')
    op.drop_index('ix_organizations_subscription_status', table_name='organizations')
    op.drop_constraint('organizations_public_id_key', 'organizations', type_='unique')
    op.drop_constraint('organizations_slug_key', 'organizations', type_='unique')
    op.drop_index('ix_organizations_slug', table_name='organizations')
    op.create_index(op.f('ix_organizations_slug'), 'organizations', ['slug'], unique=True)
    op.drop_constraint('organizations_created_by_id_fkey', 'organizations', type_='foreignkey')
    op.create_foreign_key(None, 'organizations', 'users', ['owner_id'], ['id'])
    op.drop_column('organizations', 'created_by_id')
    op.drop_column('organizations', 'website')
    op.drop_column('organizations', 'timezone')
    op.drop_column('organizations', 'subscription_plan')
    op.drop_column('organizations', 'public_id')
    op.drop_column('organizations', 'size')
    op.drop_column('organizations', 'subscription_end_date')
    op.drop_column('organizations', 'is_active')
    op.drop_column('organizations', 'industry')
    op.add_column('permissions', sa.Column('display_name', sa.String(), nullable=False))
    op.add_column('permissions', sa.Column('is_system_permission', sa.Boolean(), nullable=True))
    op.alter_column('permissions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_permissions_public_id', table_name='permissions')
    op.drop_constraint('permissions_public_id_key', 'permissions', type_='unique')
    op.create_unique_constraint('uq_resource_action', 'permissions', ['resource', 'action'])
    op.drop_column('permissions', 'public_id')
    op.add_column('platform_configs', sa.Column('platform_name', sa.String(), nullable=False))
    op.add_column('platform_configs', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('platform_configs', sa.Column('requires_oauth', sa.Boolean(), nullable=True))
    op.add_column('platform_configs', sa.Column('requires_app_credentials', sa.Boolean(), nullable=True))
    op.add_column('platform_configs', sa.Column('required_fields', sa.JSON(), nullable=False))
    op.add_column('platform_configs', sa.Column('optional_fields', sa.JSON(), nullable=True))
    op.add_column('platform_configs', sa.Column('oauth_config', sa.JSON(), nullable=True))
    op.add_column('platform_configs', sa.Column('api_base_url', sa.String(), nullable=True))
    op.add_column('platform_configs', sa.Column('setup_instructions', sa.Text(), nullable=True))
    op.add_column('platform_configs', sa.Column('help_url', sa.String(), nullable=True))
    op.alter_column('platform_configs', 'rate_limits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index('ix_platform_configs_is_enabled', table_name='platform_configs')
    op.drop_index('ix_platform_configs_platform', table_name='platform_configs')
    op.drop_constraint('platform_configs_platform_key', 'platform_configs', type_='unique')
    op.drop_constraint('platform_configs_public_id_key', 'platform_configs', type_='unique')
    op.create_index(op.f('ix_platform_configs_id'), 'platform_configs', ['id'], unique=False)
    op.create_index(op.f('ix_platform_configs_platform_name'), 'platform_configs', ['platform_name'], unique=True)
    op.drop_column('platform_configs', 'webhook_config')
    op.drop_column('platform_configs', 'client_id')
    op.drop_column('platform_configs', 'is_enabled')
    op.drop_column('platform_configs', 'auth_type')
    op.drop_column('platform_configs', 'public_id')
    op.drop_column('platform_configs', 'client_secret')
    op.drop_column('platform_configs', 'base_url')
    op.drop_column('platform_configs', 'platform')
    op.drop_column('platform_configs', 'description')
    op.drop_column('platform_configs', 'scopes')
    op.drop_column('platform_configs', 'maintenance_mode')
    op.drop_column('platform_configs', 'features')
    op.add_column('platform_metrics_snapshots', sa.Column('snapshot_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('avg_likes_per_post', sa.Float(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('avg_comments_per_post', sa.Float(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('avg_shares_per_post', sa.Float(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('overall_engagement_rate', sa.Float(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('followers_growth', sa.Integer(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('posts_growth', sa.Integer(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('engagement_growth', sa.Float(), nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('platform_specific_metrics', sa.JSON(), nullable=True))
    op.alter_column('platform_metrics_snapshots', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_platform_metrics_platform', table_name='platform_metrics_snapshots')
    op.drop_index('ix_platform_metrics_snapshot_date', table_name='platform_metrics_snapshots')
    op.drop_index('ix_platform_metrics_user_id', table_name='platform_metrics_snapshots')
    op.drop_constraint('platform_metrics_snapshots_public_id_key', 'platform_metrics_snapshots', type_='unique')
    op.create_index('idx_metrics_snapshot_conn_time', 'platform_metrics_snapshots', ['connection_id', 'snapshot_time'], unique=False)
    op.create_index(op.f('ix_platform_metrics_snapshots_id'), 'platform_metrics_snapshots', ['id'], unique=False)
    op.create_index(op.f('ix_platform_metrics_snapshots_snapshot_time'), 'platform_metrics_snapshots', ['snapshot_time'], unique=False)
    op.drop_constraint('platform_metrics_snapshots_connection_id_fkey', 'platform_metrics_snapshots', type_='foreignkey')
    op.drop_constraint('platform_metrics_snapshots_user_id_fkey', 'platform_metrics_snapshots', type_='foreignkey')
    op.drop_constraint('platform_metrics_snapshots_organization_id_fkey', 'platform_metrics_snapshots', type_='foreignkey')
    op.create_foreign_key(None, 'platform_metrics_snapshots', 'social_platform_connections', ['connection_id'], ['id'])
    op.drop_column('platform_metrics_snapshots', 'snapshot_date')
    op.drop_column('platform_metrics_snapshots', 'website_clicks')
    op.drop_column('platform_metrics_snapshots', 'user_id')
    op.drop_column('platform_metrics_snapshots', 'raw_metrics')
    op.drop_column('platform_metrics_snapshots', 'engagement_rate')
    op.drop_column('platform_metrics_snapshots', 'public_id')
    op.drop_column('platform_metrics_snapshots', 'created_at')
    op.drop_column('platform_metrics_snapshots', 'platform')
    op.drop_column('platform_metrics_snapshots', 'organization_id')
    op.drop_column('platform_metrics_snapshots', 'reach')
    op.drop_column('platform_metrics_snapshots', 'impressions')
    op.drop_column('platform_metrics_snapshots', 'profile_views')
    op.add_column('refresh_token_blacklist', sa.Column('revoked_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('refresh_token_blacklist', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('ix_refresh_token_blacklist_expires_at', table_name='refresh_token_blacklist')
    op.drop_index('ix_refresh_token_blacklist_user_id', table_name='refresh_token_blacklist')
    op.drop_constraint('refresh_token_blacklist_public_id_key', 'refresh_token_blacklist', type_='unique')
    op.drop_constraint('refresh_token_blacklist_token_jti_key', 'refresh_token_blacklist', type_='unique')
    op.drop_index('ix_refresh_token_blacklist_token_jti', table_name='refresh_token_blacklist')
    op.create_index(op.f('ix_refresh_token_blacklist_token_jti'), 'refresh_token_blacklist', ['token_jti'], unique=True)
    op.create_index('idx_blacklist_expires', 'refresh_token_blacklist', ['expires_at'], unique=False)
    op.create_index('idx_blacklist_token_user', 'refresh_token_blacklist', ['token_jti', 'user_id'], unique=False)
    op.create_index(op.f('ix_refresh_token_blacklist_id'), 'refresh_token_blacklist', ['id'], unique=False)
    op.drop_column('refresh_token_blacklist', 'blacklisted_at')
    op.drop_column('refresh_token_blacklist', 'public_id')
    op.drop_column('refresh_token_blacklist', 'reason')
    op.drop_column('refresh_token_blacklist', 'created_at')
    op.add_column('registration_keys', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('registration_keys', 'created_by',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               nullable=False)
    op.drop_constraint('registration_keys_key_key', 'registration_keys', type_='unique')
    op.create_index(op.f('ix_registration_keys_id'), 'registration_keys', ['id'], unique=False)
    op.create_index(op.f('ix_registration_keys_key'), 'registration_keys', ['key'], unique=True)
    op.create_foreign_key(None, 'registration_keys', 'admin_users', ['created_by'], ['id'])
    op.add_column('research_data', sa.Column('content', sa.Text(), nullable=False))
    op.add_column('research_data', sa.Column('source_url', sa.String(), nullable=True))
    op.add_column('research_data', sa.Column('platform_source', sa.String(), nullable=True))
    op.add_column('research_data', sa.Column('relevance_score', sa.Float(), nullable=True))
    op.add_column('research_data', sa.Column('embedding_id', sa.String(), nullable=True))
    op.add_column('research_data', sa.Column('sentiment', sa.String(), nullable=True))
    op.add_column('research_data', sa.Column('topic_category', sa.String(), nullable=True))
    op.add_column('research_data', sa.Column('trending_score', sa.Float(), nullable=True))
    op.alter_column('research_data', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('research_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_research_data_created_at', table_name='research_data')
    op.drop_index('ix_research_data_research_type', table_name='research_data')
    op.drop_index('ix_research_data_user_id', table_name='research_data')
    op.drop_constraint('research_data_public_id_key', 'research_data', type_='unique')
    op.create_index(op.f('ix_research_data_id'), 'research_data', ['id'], unique=False)
    op.drop_constraint('research_data_validated_by_id_fkey', 'research_data', type_='foreignkey')
    op.drop_constraint('research_data_user_id_fkey', 'research_data', type_='foreignkey')
    op.drop_constraint('research_data_organization_id_fkey', 'research_data', type_='foreignkey')
    op.drop_column('research_data', 'metadata')
    op.drop_column('research_data', 'raw_data')
    op.drop_column('research_data', 'data_format')
    op.drop_column('research_data', 'confidence_score')
    op.drop_column('research_data', 'user_id')
    op.drop_column('research_data', 'validated_at')
    op.drop_column('research_data', 'is_validated')
    op.drop_column('research_data', 'public_id')
    op.drop_column('research_data', 'data_source')
    op.drop_column('research_data', 'description')
    op.drop_column('research_data', 'organization_id')
    op.drop_column('research_data', 'research_type')
    op.drop_column('research_data', 'validated_by_id')
    op.drop_column('research_data', 'processed_data')
    op.drop_column('research_data', 'updated_at')
    op.add_column('response_templates', sa.Column('formality_level', sa.Integer(), nullable=True))
    op.add_column('response_templates', sa.Column('platform_adaptations', sa.JSON(), nullable=True))
    op.add_column('response_templates', sa.Column('success_rate', sa.Float(), nullable=True))
    op.add_column('response_templates', sa.Column('avg_response_time', sa.Float(), nullable=True))
    op.drop_index('ix_response_templates_is_active', table_name='response_templates')
    op.drop_index('ix_response_templates_priority', table_name='response_templates')
    op.drop_index('ix_response_templates_trigger_type', table_name='response_templates')
    op.drop_index('ix_response_templates_user_id', table_name='response_templates')
    op.create_index('idx_response_template_trigger', 'response_templates', ['trigger_type'], unique=False)
    op.create_index('idx_response_template_user_active', 'response_templates', ['user_id', 'is_active'], unique=False)
    op.drop_constraint('response_templates_user_id_fkey', 'response_templates', type_='foreignkey')
    op.create_foreign_key(None, 'response_templates', 'users', ['user_id'], ['id'])
    op.drop_column('response_templates', 'avg_satisfaction')
    op.add_column('roles', sa.Column('display_name', sa.String(), nullable=False))
    op.add_column('roles', sa.Column('level', sa.Integer(), nullable=False))
    op.add_column('roles', sa.Column('color', sa.String(), nullable=True))
    op.add_column('roles', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('roles', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_roles_public_id', table_name='roles')
    op.drop_constraint('roles_public_id_key', 'roles', type_='unique')
    op.create_unique_constraint(None, 'roles', ['name'])
    op.drop_column('roles', 'permissions')
    op.drop_column('roles', 'public_id')
    op.add_column('social_audit', sa.Column('audit_metadata', sa.JSON(), nullable=True))
    op.alter_column('social_audit', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('social_audit', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('social_audit', 'connection_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('social_audit', 'action',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('social_audit', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('social_audit', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'success'::character varying"))
    op.alter_column('social_audit', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_social_audit_action', table_name='social_audit')
    op.drop_index('ix_social_audit_created_at', table_name='social_audit')
    op.drop_index('ix_social_audit_organization_id', table_name='social_audit')
    op.drop_index('ix_social_audit_platform', table_name='social_audit')
    op.drop_index('ix_social_audit_resource_type', table_name='social_audit')
    op.drop_index('ix_social_audit_user_id', table_name='social_audit')
    op.create_index('idx_social_audit_connection', 'social_audit', ['connection_id'], unique=False)
    op.create_index('idx_social_audit_created', 'social_audit', ['created_at'], unique=False)
    op.create_index('idx_social_audit_org', 'social_audit', ['organization_id'], unique=False)
    op.drop_constraint('social_audit_organization_id_fkey', 'social_audit', type_='foreignkey')
    op.drop_constraint('social_audit_connection_id_fkey', 'social_audit', type_='foreignkey')
    op.drop_constraint('social_audit_user_id_fkey', 'social_audit', type_='foreignkey')
    op.create_foreign_key(None, 'social_audit', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'social_audit', 'social_connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'social_audit', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.drop_column('social_audit', 'resource_type')
    op.drop_column('social_audit', 'resource_id')
    op.drop_column('social_audit', 'ip_address')
    op.drop_column('social_audit', 'details')
    op.drop_column('social_audit', 'user_agent')
    op.add_column('social_connections', sa.Column('connection_name', sa.String(length=255), nullable=True))
    op.add_column('social_connections', sa.Column('platform_account_id', sa.String(length=255), nullable=True))
    op.add_column('social_connections', sa.Column('page_access_token', sa.Text(), nullable=True))
    op.add_column('social_connections', sa.Column('enc_version', sa.Integer(), nullable=False))
    op.add_column('social_connections', sa.Column('enc_kid', sa.String(length=50), nullable=False))
    op.add_column('social_connections', sa.Column('platform_metadata', sa.JSON(), nullable=True))
    op.add_column('social_connections', sa.Column('webhook_subscribed', sa.Boolean(), nullable=True))
    op.add_column('social_connections', sa.Column('webhook_secret', sa.String(length=255), nullable=True))
    op.add_column('social_connections', sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('social_connections', sa.Column('last_checked_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('social_connections', sa.Column('verified_for_posting', sa.Boolean(), nullable=True))
    op.alter_column('social_connections', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('social_connections_id_seq'::regclass)"))
    op.alter_column('social_connections', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('social_connections', 'access_token',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('social_connections', 'token_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('social_connections', 'scopes',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('social_connections', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_connections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_social_connections_created_at', table_name='social_connections')
    op.drop_index('ix_social_connections_is_active', table_name='social_connections')
    op.drop_index('ix_social_connections_organization_id', table_name='social_connections')
    op.drop_index('ix_social_connections_platform', table_name='social_connections')
    op.drop_index('ix_social_connections_public_id', table_name='social_connections')
    op.drop_index('ix_social_connections_user_id', table_name='social_connections')
    op.drop_constraint('social_connections_public_id_key', 'social_connections', type_='unique')
    op.drop_constraint('uq_social_connections_platform_user', 'social_connections', type_='unique')
    op.create_index('idx_social_connections_active', 'social_connections', ['organization_id', 'platform'], unique=False, postgresql_where='is_active = TRUE AND revoked_at IS NULL')
    op.create_index('idx_social_connections_expires', 'social_connections', ['token_expires_at'], unique=False)
    op.create_index('idx_social_connections_org', 'social_connections', ['organization_id'], unique=False)
    op.drop_constraint('social_connections_organization_id_fkey', 'social_connections', type_='foreignkey')
    op.drop_constraint('social_connections_user_id_fkey', 'social_connections', type_='foreignkey')
    op.create_foreign_key(None, 'social_connections', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.drop_column('social_connections', 'metadata')
    op.drop_column('social_connections', 'follower_count')
    op.drop_column('social_connections', 'user_id')
    op.drop_column('social_connections', 'last_sync_at')
    op.drop_column('social_connections', 'profile_image_url')
    op.drop_column('social_connections', 'public_id')
    op.drop_column('social_connections', 'platform_user_id')
    op.drop_column('social_connections', 'following_count')
    op.drop_column('social_connections', 'platform_name')
    op.drop_index('ix_social_interactions_priority_score', table_name='social_interactions')
    op.drop_index('ix_social_interactions_received_at', table_name='social_interactions')
    op.drop_constraint('social_interactions_platform_external_id_key', 'social_interactions', type_='unique')
    op.create_index('idx_social_interaction_external', 'social_interactions', ['platform', 'external_id'], unique=False)
    op.create_index('idx_social_interaction_platform_type', 'social_interactions', ['platform', 'interaction_type'], unique=False)
    op.create_index('idx_social_interaction_status_priority', 'social_interactions', ['status', 'priority_score'], unique=False)
    op.create_index('idx_social_interaction_user_received', 'social_interactions', ['user_id', 'received_at'], unique=False)
    op.drop_constraint('social_interactions_user_id_fkey', 'social_interactions', type_='foreignkey')
    op.create_foreign_key(None, 'social_interactions', 'users', ['user_id'], ['id'])
    op.add_column('social_platform_connections', sa.Column('organization_id', sa.UUID(), nullable=False))
    op.drop_constraint('social_platform_connections_user_id_platform_key', 'social_platform_connections', type_='unique')
    op.create_index('idx_social_conn_platform_user', 'social_platform_connections', ['platform', 'platform_user_id'], unique=False)
    op.create_index('idx_social_platform_conn_org_id', 'social_platform_connections', ['organization_id'], unique=False)
    op.create_index('idx_social_platform_conn_org_user_platform', 'social_platform_connections', ['organization_id', 'user_id', 'platform'], unique=True)
    op.create_index(op.f('ix_social_platform_connections_id'), 'social_platform_connections', ['id'], unique=False)
    op.create_index(op.f('ix_social_platform_connections_is_active'), 'social_platform_connections', ['is_active'], unique=False)
    op.create_index(op.f('ix_social_platform_connections_organization_id'), 'social_platform_connections', ['organization_id'], unique=False)
    op.drop_constraint('social_platform_connections_user_id_fkey', 'social_platform_connections', type_='foreignkey')
    op.create_foreign_key(None, 'social_platform_connections', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'social_platform_connections', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.add_column('social_post_templates', sa.Column('post_type', sa.String(), nullable=False))
    op.add_column('social_post_templates', sa.Column('template_text', sa.Text(), nullable=False))
    op.add_column('social_post_templates', sa.Column('hashtag_template', sa.String(), nullable=True))
    op.add_column('social_post_templates', sa.Column('max_length', sa.Integer(), nullable=True))
    op.add_column('social_post_templates', sa.Column('thread_split_rules', sa.JSON(), nullable=True))
    op.add_column('social_post_templates', sa.Column('formatting_rules', sa.JSON(), nullable=True))
    op.add_column('social_post_templates', sa.Column('avg_engagement_rate', sa.Float(), nullable=True))
    op.add_column('social_post_templates', sa.Column('required_media', sa.Boolean(), nullable=True))
    op.alter_column('social_post_templates', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('social_post_templates', 'variables',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('social_post_templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_post_templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_social_post_templates_user_id', table_name='social_post_templates')
    op.drop_constraint('social_post_templates_public_id_key', 'social_post_templates', type_='unique')
    op.create_index('idx_social_template_user_platform', 'social_post_templates', ['user_id', 'platform'], unique=False)
    op.drop_constraint('social_post_templates_organization_id_fkey', 'social_post_templates', type_='foreignkey')
    op.drop_column('social_post_templates', 'category')
    op.drop_column('social_post_templates', 'content_template')
    op.drop_column('social_post_templates', 'media_template')
    op.drop_column('social_post_templates', 'hashtags_template')
    op.drop_column('social_post_templates', 'public_id')
    op.drop_column('social_post_templates', 'organization_id')
    op.add_column('social_posts', sa.Column('content_item_id', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('platform_url', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('content_text', sa.Text(), nullable=True))
    op.add_column('social_posts', sa.Column('post_type', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('post_format', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('social_posts', sa.Column('failure_reason', sa.Text(), nullable=True))
    op.add_column('social_posts', sa.Column('likes_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('shares_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('comments_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('reach_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('click_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('engagement_rate', sa.Float(), nullable=True))
    op.add_column('social_posts', sa.Column('last_metrics_update', sa.DateTime(timezone=True), nullable=True))
    op.add_column('social_posts', sa.Column('metrics_update_count', sa.Integer(), nullable=True))
    op.add_column('social_posts', sa.Column('peak_engagement_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('social_posts', sa.Column('platform_metrics', sa.JSON(), nullable=True))
    op.add_column('social_posts', sa.Column('sentiment', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('topics', sa.JSON(), nullable=True))
    op.add_column('social_posts', sa.Column('keywords', sa.JSON(), nullable=True))
    op.add_column('social_posts', sa.Column('campaign_id', sa.String(), nullable=True))
    op.add_column('social_posts', sa.Column('utm_parameters', sa.JSON(), nullable=True))
    op.alter_column('social_posts', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('social_posts', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('social_posts', 'platform_post_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('social_posts', 'media_urls',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('social_posts', 'hashtags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('social_posts', 'mentions',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('social_posts', 'scheduled_for',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('social_posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_social_posts_published_at', table_name='social_posts')
    op.drop_constraint('social_posts_public_id_key', 'social_posts', type_='unique')
    op.create_index('idx_social_post_campaign', 'social_posts', ['campaign_id'], unique=False)
    op.create_index('idx_social_post_connection_status', 'social_posts', ['connection_id', 'status'], unique=False)
    op.create_index('idx_social_post_posted_engagement', 'social_posts', ['posted_at', 'engagement_rate'], unique=False)
    op.create_index('idx_social_post_user_platform', 'social_posts', ['user_id', 'platform'], unique=False)
    op.create_index(op.f('ix_social_posts_campaign_id'), 'social_posts', ['campaign_id'], unique=False)
    op.create_index(op.f('ix_social_posts_created_at'), 'social_posts', ['created_at'], unique=False)
    op.create_index(op.f('ix_social_posts_platform_post_id'), 'social_posts', ['platform_post_id'], unique=False)
    op.create_index(op.f('ix_social_posts_posted_at'), 'social_posts', ['posted_at'], unique=False)
    op.drop_constraint('social_posts_connection_id_fkey', 'social_posts', type_='foreignkey')
    op.drop_constraint('social_posts_organization_id_fkey', 'social_posts', type_='foreignkey')
    op.create_foreign_key(None, 'social_posts', 'content_items', ['content_item_id'], ['id'])
    op.create_foreign_key(None, 'social_posts', 'social_platform_connections', ['connection_id'], ['id'])
    op.drop_column('social_posts', 'published_at')
    op.drop_column('social_posts', 'content')
    op.drop_column('social_posts', 'public_id')
    op.drop_column('social_posts', 'organization_id')
    op.drop_column('social_posts', 'error_message')
    op.drop_column('social_posts', 'engagement_metrics')
    op.add_column('system_settings', sa.Column('key', sa.String(), nullable=False))
    op.add_column('system_settings', sa.Column('value', sa.JSON(), nullable=True))
    op.add_column('system_settings', sa.Column('setting_type', sa.String(), nullable=False))
    op.add_column('system_settings', sa.Column('is_readonly', sa.Boolean(), nullable=True))
    op.add_column('system_settings', sa.Column('validation_rules', sa.JSON(), nullable=True))
    op.add_column('system_settings', sa.Column('created_by', sa.String(), nullable=True))
    op.add_column('system_settings', sa.Column('updated_by', sa.String(), nullable=True))
    op.alter_column('system_settings', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_settings', 'default_value',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('ix_system_settings_category', table_name='system_settings')
    op.drop_index('ix_system_settings_setting_key', table_name='system_settings')
    op.drop_constraint('system_settings_public_id_key', 'system_settings', type_='unique')
    op.drop_constraint('system_settings_setting_key_key', 'system_settings', type_='unique')
    op.create_index(op.f('ix_system_settings_id'), 'system_settings', ['id'], unique=False)
    op.create_index(op.f('ix_system_settings_key'), 'system_settings', ['key'], unique=True)
    op.drop_constraint('system_settings_updated_by_id_fkey', 'system_settings', type_='foreignkey')
    op.create_foreign_key(None, 'system_settings', 'admin_users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'system_settings', 'admin_users', ['updated_by'], ['id'])
    op.drop_column('system_settings', 'validation_rule')
    op.drop_column('system_settings', 'category')
    op.drop_column('system_settings', 'setting_key')
    op.drop_column('system_settings', 'public_id')
    op.drop_column('system_settings', 'setting_value')
    op.drop_column('system_settings', 'updated_by_id')
    op.drop_column('system_settings', 'is_encrypted')
    op.drop_column('system_settings', 'value_type')
    op.add_column('teams', sa.Column('default_role', sa.String(), nullable=True))
    op.add_column('teams', sa.Column('is_default', sa.Boolean(), nullable=True))
    op.add_column('teams', sa.Column('settings', sa.JSON(), nullable=True))
    op.add_column('teams', sa.Column('created_by_id', sa.Integer(), nullable=False))
    op.alter_column('teams', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('teams', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('teams', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('teams', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_teams_organization_id', table_name='teams')
    op.drop_index('ix_teams_public_id', table_name='teams')
    op.drop_constraint('teams_public_id_key', 'teams', type_='unique')
    op.create_unique_constraint('uq_org_team_name', 'teams', ['organization_id', 'name'])
    op.create_foreign_key(None, 'teams', 'users', ['created_by_id'], ['id'])
    op.drop_column('teams', 'is_active')
    op.drop_column('teams', 'public_id')
    op.add_column('user_credentials', sa.Column('encrypted_credentials', sa.Text(), nullable=False))
    op.add_column('user_credentials', sa.Column('last_verified', sa.DateTime(), nullable=True))
    op.add_column('user_credentials', sa.Column('verification_error', sa.Text(), nullable=True))
    op.add_column('user_credentials', sa.Column('expires_at', sa.DateTime(), nullable=True))
    op.add_column('user_credentials', sa.Column('last_used', sa.DateTime(), nullable=True))
    op.alter_column('user_credentials', 'credential_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'oauth'::character varying"))
    op.alter_column('user_credentials', 'scopes',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('user_credentials', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_user_credentials_is_active', table_name='user_credentials')
    op.drop_constraint('user_credentials_public_id_key', 'user_credentials', type_='unique')
    op.drop_constraint('user_credentials_user_id_organization_id_platform_credentia_key', 'user_credentials', type_='unique')
    op.create_index(op.f('ix_user_credentials_id'), 'user_credentials', ['id'], unique=False)
    op.drop_constraint('user_credentials_organization_id_fkey', 'user_credentials', type_='foreignkey')
    op.drop_column('user_credentials', 'access_token')
    op.drop_column('user_credentials', 'public_id')
    op.drop_column('user_credentials', 'refresh_token')
    op.drop_column('user_credentials', 'organization_id')
    op.drop_column('user_credentials', 'encrypted_data')
    op.drop_column('user_credentials', 'token_expires_at')
    op.add_column('user_management', sa.Column('api_key', sa.String(), nullable=True))
    op.add_column('user_management', sa.Column('api_secret', sa.String(), nullable=True))
    op.add_column('user_management', sa.Column('api_key_created_at', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('api_key_last_used', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('api_key_usage_count', sa.Integer(), nullable=True))
    op.add_column('user_management', sa.Column('monthly_request_limit', sa.Integer(), nullable=True))
    op.add_column('user_management', sa.Column('monthly_requests_used', sa.Integer(), nullable=True))
    op.add_column('user_management', sa.Column('daily_request_limit', sa.Integer(), nullable=True))
    op.add_column('user_management', sa.Column('daily_requests_used', sa.Integer(), nullable=True))
    op.add_column('user_management', sa.Column('is_suspended', sa.Boolean(), nullable=True))
    op.add_column('user_management', sa.Column('suspension_reason', sa.Text(), nullable=True))
    op.add_column('user_management', sa.Column('suspended_at', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('suspension_expires', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('user_management', sa.Column('verification_notes', sa.Text(), nullable=True))
    op.add_column('user_management', sa.Column('verified_at', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('subscription_tier', sa.String(), nullable=True))
    op.add_column('user_management', sa.Column('subscription_expires', sa.DateTime(), nullable=True))
    op.add_column('user_management', sa.Column('billing_customer_id', sa.String(), nullable=True))
    op.add_column('user_management', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('user_management', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_management', 'managed_by_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               nullable=True)
    op.drop_index('ix_user_management_action', table_name='user_management')
    op.drop_index('ix_user_management_created_at', table_name='user_management')
    op.drop_index('ix_user_management_managed_by_id', table_name='user_management')
    op.drop_constraint('user_management_public_id_key', 'user_management', type_='unique')
    op.drop_index('ix_user_management_user_id', table_name='user_management')
    op.create_index(op.f('ix_user_management_user_id'), 'user_management', ['user_id'], unique=True)
    op.create_index('idx_user_management_api_key', 'user_management', ['api_key'], unique=False)
    op.create_index('idx_user_management_managed_by', 'user_management', ['managed_by_id'], unique=False)
    op.create_index('idx_user_management_user_id', 'user_management', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_management_api_key'), 'user_management', ['api_key'], unique=True)
    op.create_index(op.f('ix_user_management_id'), 'user_management', ['id'], unique=False)
    op.drop_column('user_management', 'metadata')
    op.drop_column('user_management', 'previous_status')
    op.drop_column('user_management', 'notes')
    op.drop_column('user_management', 'public_id')
    op.drop_column('user_management', 'reason')
    op.drop_column('user_management', 'action')
    op.drop_column('user_management', 'expiry_date')
    op.drop_column('user_management', 'effective_date')
    op.drop_column('user_management', 'new_status')
    op.add_column('user_organization_roles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('user_organization_roles', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('user_organization_roles', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_organization_roles', 'organization_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_organization_roles', 'role_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_organization_roles', 'assigned_by_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_organization_roles', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_user_org_roles_org_id', table_name='user_organization_roles')
    op.drop_index('ix_user_org_roles_user_id', table_name='user_organization_roles')
    op.drop_constraint('user_organization_roles_user_id_organization_id_role_id_key', 'user_organization_roles', type_='unique')
    op.create_unique_constraint('uq_user_organization', 'user_organization_roles', ['user_id', 'organization_id'])
    op.add_column('user_settings', sa.Column('default_image_model', sa.String(), nullable=True))
    op.add_column('user_settings', sa.Column('style_vault', sa.JSON(), nullable=True))
    op.alter_column('users', 'public_id',
               existing_type=sa.VARCHAR(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('users', 'two_factor_backup_codes',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('users', 'email_verification_sent_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'password_reset_sent_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'subscription_end_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_users_email_username', table_name='users')
    op.drop_index('ix_users_tier_status', table_name='users')
    op.drop_constraint('uq_users_public_id', 'users', type_='unique')
    op.drop_index('ix_users_public_id', table_name='users')
    op.create_index(op.f('ix_users_public_id'), 'users', ['public_id'], unique=True)
    op.drop_constraint('users_registration_key_id_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'organizations', ['default_organization_id'], ['id'])
    op.drop_column('users', 'registration_key_id')
    op.add_column('workflow_executions', sa.Column('duration_seconds', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('current_stage', sa.String(), nullable=True))
    op.add_column('workflow_executions', sa.Column('completed_stages', sa.JSON(), nullable=True))
    op.add_column('workflow_executions', sa.Column('failed_stages', sa.JSON(), nullable=True))
    op.add_column('workflow_executions', sa.Column('content_generated', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('posts_scheduled', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('research_items', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('retry_count', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('execution_params', sa.JSON(), nullable=True))
    op.add_column('workflow_executions', sa.Column('results_summary', sa.JSON(), nullable=True))
    op.alter_column('workflow_executions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('workflow_executions', 'workflow_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               existing_server_default=sa.text("'content_generation'::character varying"))
    op.alter_column('workflow_executions', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('workflow_executions', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_workflow_executions_started_at', table_name='workflow_executions')
    op.drop_index('ix_workflow_executions_status', table_name='workflow_executions')
    op.drop_index('ix_workflow_executions_user_id', table_name='workflow_executions')
    op.drop_constraint('workflow_executions_public_id_key', 'workflow_executions', type_='unique')
    op.drop_constraint('workflow_executions_organization_id_fkey', 'workflow_executions', type_='foreignkey')
    op.drop_column('workflow_executions', 'input_data')
    op.drop_column('workflow_executions', 'output_data')
    op.drop_column('workflow_executions', 'public_id')
    op.drop_column('workflow_executions', 'created_at')
    op.drop_column('workflow_executions', 'organization_id')
    op.drop_column('workflow_executions', 'workflow_name')
    op.drop_column('workflow_executions', 'execution_time_ms')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workflow_executions', sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('workflow_executions', sa.Column('workflow_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('workflow_executions', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('workflow_executions', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('workflow_executions', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('workflow_executions', sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('workflow_executions', sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_foreign_key('workflow_executions_organization_id_fkey', 'workflow_executions', 'organizations', ['organization_id'], ['id'])
    op.create_unique_constraint('workflow_executions_public_id_key', 'workflow_executions', ['public_id'])
    op.create_index('ix_workflow_executions_user_id', 'workflow_executions', ['user_id'], unique=False)
    op.create_index('ix_workflow_executions_status', 'workflow_executions', ['status'], unique=False)
    op.create_index('ix_workflow_executions_started_at', 'workflow_executions', ['started_at'], unique=False)
    op.alter_column('workflow_executions', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('workflow_executions', 'workflow_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               existing_server_default=sa.text("'content_generation'::character varying"))
    op.alter_column('workflow_executions', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('workflow_executions', 'results_summary')
    op.drop_column('workflow_executions', 'execution_params')
    op.drop_column('workflow_executions', 'retry_count')
    op.drop_column('workflow_executions', 'research_items')
    op.drop_column('workflow_executions', 'posts_scheduled')
    op.drop_column('workflow_executions', 'content_generated')
    op.drop_column('workflow_executions', 'failed_stages')
    op.drop_column('workflow_executions', 'completed_stages')
    op.drop_column('workflow_executions', 'current_stage')
    op.drop_column('workflow_executions', 'duration_seconds')
    op.add_column('users', sa.Column('registration_key_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_registration_key_id_fkey', 'users', 'registration_keys', ['registration_key_id'], ['id'])
    op.drop_index(op.f('ix_users_public_id'), table_name='users')
    op.create_index('ix_users_public_id', 'users', ['public_id'], unique=False)
    op.create_unique_constraint('uq_users_public_id', 'users', ['public_id'])
    op.create_index('ix_users_tier_status', 'users', ['tier', 'subscription_status'], unique=False)
    op.create_index('ix_users_email_username', 'users', ['email', 'username'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'subscription_end_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'password_reset_sent_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'email_verification_sent_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'two_factor_backup_codes',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'public_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=36),
               existing_nullable=False)
    op.drop_column('user_settings', 'style_vault')
    op.drop_column('user_settings', 'default_image_model')
    op.drop_constraint('uq_user_organization', 'user_organization_roles', type_='unique')
    op.create_unique_constraint('user_organization_roles_user_id_organization_id_role_id_key', 'user_organization_roles', ['user_id', 'organization_id', 'role_id'])
    op.create_index('ix_user_org_roles_user_id', 'user_organization_roles', ['user_id'], unique=False)
    op.create_index('ix_user_org_roles_org_id', 'user_organization_roles', ['organization_id'], unique=False)
    op.alter_column('user_organization_roles', 'assigned_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_organization_roles', 'assigned_by_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_organization_roles', 'role_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_organization_roles', 'organization_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('user_organization_roles', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('user_organization_roles', 'updated_at')
    op.drop_column('user_organization_roles', 'created_at')
    op.add_column('user_management', sa.Column('new_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('effective_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('expiry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('user_management', sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('user_management', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('previous_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_management', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_management_id'), table_name='user_management')
    op.drop_index(op.f('ix_user_management_api_key'), table_name='user_management')
    op.drop_index('idx_user_management_user_id', table_name='user_management')
    op.drop_index('idx_user_management_managed_by', table_name='user_management')
    op.drop_index('idx_user_management_api_key', table_name='user_management')
    op.drop_index(op.f('ix_user_management_user_id'), table_name='user_management')
    op.create_index('ix_user_management_user_id', 'user_management', ['user_id'], unique=False)
    op.create_unique_constraint('user_management_public_id_key', 'user_management', ['public_id'])
    op.create_index('ix_user_management_managed_by_id', 'user_management', ['managed_by_id'], unique=False)
    op.create_index('ix_user_management_created_at', 'user_management', ['created_at'], unique=False)
    op.create_index('ix_user_management_action', 'user_management', ['action'], unique=False)
    op.alter_column('user_management', 'managed_by_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_management', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('user_management', 'updated_at')
    op.drop_column('user_management', 'billing_customer_id')
    op.drop_column('user_management', 'subscription_expires')
    op.drop_column('user_management', 'subscription_tier')
    op.drop_column('user_management', 'verified_at')
    op.drop_column('user_management', 'verification_notes')
    op.drop_column('user_management', 'is_verified')
    op.drop_column('user_management', 'suspension_expires')
    op.drop_column('user_management', 'suspended_at')
    op.drop_column('user_management', 'suspension_reason')
    op.drop_column('user_management', 'is_suspended')
    op.drop_column('user_management', 'daily_requests_used')
    op.drop_column('user_management', 'daily_request_limit')
    op.drop_column('user_management', 'monthly_requests_used')
    op.drop_column('user_management', 'monthly_request_limit')
    op.drop_column('user_management', 'api_key_usage_count')
    op.drop_column('user_management', 'api_key_last_used')
    op.drop_column('user_management', 'api_key_created_at')
    op.drop_column('user_management', 'api_secret')
    op.drop_column('user_management', 'api_key')
    op.add_column('user_credentials', sa.Column('token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('user_credentials', sa.Column('encrypted_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('user_credentials', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_credentials', sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_credentials', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('user_credentials', sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_foreign_key('user_credentials_organization_id_fkey', 'user_credentials', 'organizations', ['organization_id'], ['id'])
    op.drop_index(op.f('ix_user_credentials_id'), table_name='user_credentials')
    op.create_unique_constraint('user_credentials_user_id_organization_id_platform_credentia_key', 'user_credentials', ['user_id', 'organization_id', 'platform', 'credential_type'])
    op.create_unique_constraint('user_credentials_public_id_key', 'user_credentials', ['public_id'])
    op.create_index('ix_user_credentials_is_active', 'user_credentials', ['is_active'], unique=False)
    op.alter_column('user_credentials', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_credentials', 'scopes',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('user_credentials', 'credential_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'oauth'::character varying"))
    op.drop_column('user_credentials', 'last_used')
    op.drop_column('user_credentials', 'expires_at')
    op.drop_column('user_credentials', 'verification_error')
    op.drop_column('user_credentials', 'last_verified')
    op.drop_column('user_credentials', 'encrypted_credentials')
    op.add_column('teams', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('teams', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint('uq_org_team_name', 'teams', type_='unique')
    op.create_unique_constraint('teams_public_id_key', 'teams', ['public_id'])
    op.create_index('ix_teams_public_id', 'teams', ['public_id'], unique=False)
    op.create_index('ix_teams_organization_id', 'teams', ['organization_id'], unique=False)
    op.alter_column('teams', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('teams', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('teams', 'organization_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('teams', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('teams', 'created_by_id')
    op.drop_column('teams', 'settings')
    op.drop_column('teams', 'is_default')
    op.drop_column('teams', 'default_role')
    op.add_column('system_settings', sa.Column('value_type', sa.VARCHAR(length=50), server_default=sa.text("'string'::character varying"), autoincrement=False, nullable=True))
    op.add_column('system_settings', sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('system_settings', sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('system_settings', sa.Column('setting_value', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('system_settings', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('system_settings', sa.Column('setting_key', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('system_settings', sa.Column('category', sa.VARCHAR(length=100), server_default=sa.text("'general'::character varying"), autoincrement=False, nullable=True))
    op.add_column('system_settings', sa.Column('validation_rule', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'system_settings', type_='foreignkey')
    op.drop_constraint(None, 'system_settings', type_='foreignkey')
    op.create_foreign_key('system_settings_updated_by_id_fkey', 'system_settings', 'admin_users', ['updated_by_id'], ['id'])
    op.drop_index(op.f('ix_system_settings_key'), table_name='system_settings')
    op.drop_index(op.f('ix_system_settings_id'), table_name='system_settings')
    op.create_unique_constraint('system_settings_setting_key_key', 'system_settings', ['setting_key'])
    op.create_unique_constraint('system_settings_public_id_key', 'system_settings', ['public_id'])
    op.create_index('ix_system_settings_setting_key', 'system_settings', ['setting_key'], unique=False)
    op.create_index('ix_system_settings_category', 'system_settings', ['category'], unique=False)
    op.alter_column('system_settings', 'default_value',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_settings', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('system_settings', 'updated_by')
    op.drop_column('system_settings', 'created_by')
    op.drop_column('system_settings', 'validation_rules')
    op.drop_column('system_settings', 'is_readonly')
    op.drop_column('system_settings', 'setting_type')
    op.drop_column('system_settings', 'value')
    op.drop_column('system_settings', 'key')
    op.add_column('social_posts', sa.Column('engagement_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('social_posts', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('social_posts', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('social_posts', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('social_posts', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('social_posts', sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'social_posts', type_='foreignkey')
    op.drop_constraint(None, 'social_posts', type_='foreignkey')
    op.create_foreign_key('social_posts_organization_id_fkey', 'social_posts', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('social_posts_connection_id_fkey', 'social_posts', 'social_connections', ['connection_id'], ['id'])
    op.drop_index(op.f('ix_social_posts_posted_at'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_platform_post_id'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_created_at'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_campaign_id'), table_name='social_posts')
    op.drop_index('idx_social_post_user_platform', table_name='social_posts')
    op.drop_index('idx_social_post_posted_engagement', table_name='social_posts')
    op.drop_index('idx_social_post_connection_status', table_name='social_posts')
    op.drop_index('idx_social_post_campaign', table_name='social_posts')
    op.create_unique_constraint('social_posts_public_id_key', 'social_posts', ['public_id'])
    op.create_index('ix_social_posts_published_at', 'social_posts', ['published_at'], unique=False)
    op.alter_column('social_posts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_posts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_posts', 'scheduled_for',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('social_posts', 'mentions',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('social_posts', 'hashtags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('social_posts', 'media_urls',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('social_posts', 'platform_post_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('social_posts', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('social_posts', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('social_posts', 'utm_parameters')
    op.drop_column('social_posts', 'campaign_id')
    op.drop_column('social_posts', 'keywords')
    op.drop_column('social_posts', 'topics')
    op.drop_column('social_posts', 'sentiment')
    op.drop_column('social_posts', 'platform_metrics')
    op.drop_column('social_posts', 'peak_engagement_time')
    op.drop_column('social_posts', 'metrics_update_count')
    op.drop_column('social_posts', 'last_metrics_update')
    op.drop_column('social_posts', 'engagement_rate')
    op.drop_column('social_posts', 'click_count')
    op.drop_column('social_posts', 'reach_count')
    op.drop_column('social_posts', 'comments_count')
    op.drop_column('social_posts', 'shares_count')
    op.drop_column('social_posts', 'likes_count')
    op.drop_column('social_posts', 'failure_reason')
    op.drop_column('social_posts', 'posted_at')
    op.drop_column('social_posts', 'post_format')
    op.drop_column('social_posts', 'post_type')
    op.drop_column('social_posts', 'content_text')
    op.drop_column('social_posts', 'platform_url')
    op.drop_column('social_posts', 'content_item_id')
    op.add_column('social_post_templates', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('social_post_templates', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('social_post_templates', sa.Column('hashtags_template', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('social_post_templates', sa.Column('media_template', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('social_post_templates', sa.Column('content_template', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('social_post_templates', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.create_foreign_key('social_post_templates_organization_id_fkey', 'social_post_templates', 'organizations', ['organization_id'], ['id'])
    op.drop_index('idx_social_template_user_platform', table_name='social_post_templates')
    op.create_unique_constraint('social_post_templates_public_id_key', 'social_post_templates', ['public_id'])
    op.create_index('ix_social_post_templates_user_id', 'social_post_templates', ['user_id'], unique=False)
    op.alter_column('social_post_templates', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_post_templates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_post_templates', 'variables',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('social_post_templates', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('social_post_templates', 'required_media')
    op.drop_column('social_post_templates', 'avg_engagement_rate')
    op.drop_column('social_post_templates', 'formatting_rules')
    op.drop_column('social_post_templates', 'thread_split_rules')
    op.drop_column('social_post_templates', 'max_length')
    op.drop_column('social_post_templates', 'hashtag_template')
    op.drop_column('social_post_templates', 'template_text')
    op.drop_column('social_post_templates', 'post_type')
    op.drop_constraint(None, 'social_platform_connections', type_='foreignkey')
    op.drop_constraint(None, 'social_platform_connections', type_='foreignkey')
    op.create_foreign_key('social_platform_connections_user_id_fkey', 'social_platform_connections', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_social_platform_connections_organization_id'), table_name='social_platform_connections')
    op.drop_index(op.f('ix_social_platform_connections_is_active'), table_name='social_platform_connections')
    op.drop_index(op.f('ix_social_platform_connections_id'), table_name='social_platform_connections')
    op.drop_index('idx_social_platform_conn_org_user_platform', table_name='social_platform_connections')
    op.drop_index('idx_social_platform_conn_org_id', table_name='social_platform_connections')
    op.drop_index('idx_social_conn_platform_user', table_name='social_platform_connections')
    op.create_unique_constraint('social_platform_connections_user_id_platform_key', 'social_platform_connections', ['user_id', 'platform'])
    op.drop_column('social_platform_connections', 'organization_id')
    op.drop_constraint(None, 'social_interactions', type_='foreignkey')
    op.create_foreign_key('social_interactions_user_id_fkey', 'social_interactions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_social_interaction_user_received', table_name='social_interactions')
    op.drop_index('idx_social_interaction_status_priority', table_name='social_interactions')
    op.drop_index('idx_social_interaction_platform_type', table_name='social_interactions')
    op.drop_index('idx_social_interaction_external', table_name='social_interactions')
    op.create_unique_constraint('social_interactions_platform_external_id_key', 'social_interactions', ['platform', 'external_id'])
    op.create_index('ix_social_interactions_received_at', 'social_interactions', ['received_at'], unique=False)
    op.create_index('ix_social_interactions_priority_score', 'social_interactions', ['priority_score'], unique=False)
    op.add_column('social_connections', sa.Column('platform_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('social_connections', sa.Column('following_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('social_connections', sa.Column('platform_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('social_connections', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('social_connections', sa.Column('profile_image_url', sa.VARCHAR(length=512), autoincrement=False, nullable=True))
    op.add_column('social_connections', sa.Column('last_sync_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('social_connections', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('social_connections', sa.Column('follower_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('social_connections', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'social_connections', type_='foreignkey')
    op.create_foreign_key('social_connections_user_id_fkey', 'social_connections', 'users', ['user_id'], ['id'])
    op.create_foreign_key('social_connections_organization_id_fkey', 'social_connections', 'organizations', ['organization_id'], ['id'])
    op.drop_index('idx_social_connections_org', table_name='social_connections')
    op.drop_index('idx_social_connections_expires', table_name='social_connections')
    op.drop_index('idx_social_connections_active', table_name='social_connections', postgresql_where='is_active = TRUE AND revoked_at IS NULL')
    op.create_unique_constraint('uq_social_connections_platform_user', 'social_connections', ['platform', 'platform_user_id'])
    op.create_unique_constraint('social_connections_public_id_key', 'social_connections', ['public_id'])
    op.create_index('ix_social_connections_user_id', 'social_connections', ['user_id'], unique=False)
    op.create_index('ix_social_connections_public_id', 'social_connections', ['public_id'], unique=False)
    op.create_index('ix_social_connections_platform', 'social_connections', ['platform'], unique=False)
    op.create_index('ix_social_connections_organization_id', 'social_connections', ['organization_id'], unique=False)
    op.create_index('ix_social_connections_is_active', 'social_connections', ['is_active'], unique=False)
    op.create_index('ix_social_connections_created_at', 'social_connections', ['created_at'], unique=False)
    op.alter_column('social_connections', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_connections', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_connections', 'scopes',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('social_connections', 'token_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('social_connections', 'access_token',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('social_connections', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('social_connections', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('social_connections_id_seq'::regclass)"))
    op.drop_column('social_connections', 'verified_for_posting')
    op.drop_column('social_connections', 'last_checked_at')
    op.drop_column('social_connections', 'revoked_at')
    op.drop_column('social_connections', 'webhook_secret')
    op.drop_column('social_connections', 'webhook_subscribed')
    op.drop_column('social_connections', 'platform_metadata')
    op.drop_column('social_connections', 'enc_kid')
    op.drop_column('social_connections', 'enc_version')
    op.drop_column('social_connections', 'page_access_token')
    op.drop_column('social_connections', 'platform_account_id')
    op.drop_column('social_connections', 'connection_name')
    op.add_column('social_audit', sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('social_audit', sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('social_audit', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.add_column('social_audit', sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('social_audit', sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'social_audit', type_='foreignkey')
    op.drop_constraint(None, 'social_audit', type_='foreignkey')
    op.drop_constraint(None, 'social_audit', type_='foreignkey')
    op.create_foreign_key('social_audit_user_id_fkey', 'social_audit', 'users', ['user_id'], ['id'])
    op.create_foreign_key('social_audit_connection_id_fkey', 'social_audit', 'social_connections', ['connection_id'], ['id'])
    op.create_foreign_key('social_audit_organization_id_fkey', 'social_audit', 'organizations', ['organization_id'], ['id'])
    op.drop_index('idx_social_audit_org', table_name='social_audit')
    op.drop_index('idx_social_audit_created', table_name='social_audit')
    op.drop_index('idx_social_audit_connection', table_name='social_audit')
    op.create_index('ix_social_audit_user_id', 'social_audit', ['user_id'], unique=False)
    op.create_index('ix_social_audit_resource_type', 'social_audit', ['resource_type'], unique=False)
    op.create_index('ix_social_audit_platform', 'social_audit', ['platform'], unique=False)
    op.create_index('ix_social_audit_organization_id', 'social_audit', ['organization_id'], unique=False)
    op.create_index('ix_social_audit_created_at', 'social_audit', ['created_at'], unique=False)
    op.create_index('ix_social_audit_action', 'social_audit', ['action'], unique=False)
    op.alter_column('social_audit', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('social_audit', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'success'::character varying"))
    op.alter_column('social_audit', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('social_audit', 'action',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('social_audit', 'connection_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('social_audit', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('social_audit', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('social_audit', 'audit_metadata')
    op.add_column('roles', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('roles', sa.Column('permissions', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'roles', type_='unique')
    op.create_unique_constraint('roles_public_id_key', 'roles', ['public_id'])
    op.create_index('ix_roles_public_id', 'roles', ['public_id'], unique=False)
    op.alter_column('roles', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('roles', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'color')
    op.drop_column('roles', 'level')
    op.drop_column('roles', 'display_name')
    op.add_column('response_templates', sa.Column('avg_satisfaction', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'response_templates', type_='foreignkey')
    op.create_foreign_key('response_templates_user_id_fkey', 'response_templates', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_response_template_user_active', table_name='response_templates')
    op.drop_index('idx_response_template_trigger', table_name='response_templates')
    op.create_index('ix_response_templates_user_id', 'response_templates', ['user_id'], unique=False)
    op.create_index('ix_response_templates_trigger_type', 'response_templates', ['trigger_type'], unique=False)
    op.create_index('ix_response_templates_priority', 'response_templates', ['priority'], unique=False)
    op.create_index('ix_response_templates_is_active', 'response_templates', ['is_active'], unique=False)
    op.drop_column('response_templates', 'avg_response_time')
    op.drop_column('response_templates', 'success_rate')
    op.drop_column('response_templates', 'platform_adaptations')
    op.drop_column('response_templates', 'formality_level')
    op.add_column('research_data', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('validated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('research_type', sa.VARCHAR(length=50), server_default=sa.text("'general'::character varying"), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('data_source', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('research_data', sa.Column('is_validated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('validated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('research_data', sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('data_format', sa.VARCHAR(length=50), server_default=sa.text("'json'::character varying"), autoincrement=False, nullable=True))
    op.add_column('research_data', sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('research_data', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_foreign_key('research_data_organization_id_fkey', 'research_data', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('research_data_user_id_fkey', 'research_data', 'users', ['user_id'], ['id'])
    op.create_foreign_key('research_data_validated_by_id_fkey', 'research_data', 'users', ['validated_by_id'], ['id'])
    op.drop_index(op.f('ix_research_data_id'), table_name='research_data')
    op.create_unique_constraint('research_data_public_id_key', 'research_data', ['public_id'])
    op.create_index('ix_research_data_user_id', 'research_data', ['user_id'], unique=False)
    op.create_index('ix_research_data_research_type', 'research_data', ['research_type'], unique=False)
    op.create_index('ix_research_data_created_at', 'research_data', ['created_at'], unique=False)
    op.alter_column('research_data', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('research_data', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.drop_column('research_data', 'trending_score')
    op.drop_column('research_data', 'topic_category')
    op.drop_column('research_data', 'sentiment')
    op.drop_column('research_data', 'embedding_id')
    op.drop_column('research_data', 'relevance_score')
    op.drop_column('research_data', 'platform_source')
    op.drop_column('research_data', 'source_url')
    op.drop_column('research_data', 'content')
    op.drop_constraint(None, 'registration_keys', type_='foreignkey')
    op.drop_index(op.f('ix_registration_keys_key'), table_name='registration_keys')
    op.drop_index(op.f('ix_registration_keys_id'), table_name='registration_keys')
    op.create_unique_constraint('registration_keys_key_key', 'registration_keys', ['key'])
    op.alter_column('registration_keys', 'created_by',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('registration_keys', 'updated_at')
    op.add_column('refresh_token_blacklist', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('refresh_token_blacklist', sa.Column('reason', sa.VARCHAR(length=255), server_default=sa.text("'logout'::character varying"), autoincrement=False, nullable=True))
    op.add_column('refresh_token_blacklist', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('refresh_token_blacklist', sa.Column('blacklisted_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_refresh_token_blacklist_id'), table_name='refresh_token_blacklist')
    op.drop_index('idx_blacklist_token_user', table_name='refresh_token_blacklist')
    op.drop_index('idx_blacklist_expires', table_name='refresh_token_blacklist')
    op.drop_index(op.f('ix_refresh_token_blacklist_token_jti'), table_name='refresh_token_blacklist')
    op.create_index('ix_refresh_token_blacklist_token_jti', 'refresh_token_blacklist', ['token_jti'], unique=False)
    op.create_unique_constraint('refresh_token_blacklist_token_jti_key', 'refresh_token_blacklist', ['token_jti'])
    op.create_unique_constraint('refresh_token_blacklist_public_id_key', 'refresh_token_blacklist', ['public_id'])
    op.create_index('ix_refresh_token_blacklist_user_id', 'refresh_token_blacklist', ['user_id'], unique=False)
    op.create_index('ix_refresh_token_blacklist_expires_at', 'refresh_token_blacklist', ['expires_at'], unique=False)
    op.alter_column('refresh_token_blacklist', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('refresh_token_blacklist', 'revoked_at')
    op.add_column('platform_metrics_snapshots', sa.Column('profile_views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('impressions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('reach', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('platform_metrics_snapshots', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('platform_metrics_snapshots', sa.Column('engagement_rate', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('raw_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('platform_metrics_snapshots', sa.Column('website_clicks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('platform_metrics_snapshots', sa.Column('snapshot_date', sa.DATE(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'platform_metrics_snapshots', type_='foreignkey')
    op.create_foreign_key('platform_metrics_snapshots_organization_id_fkey', 'platform_metrics_snapshots', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('platform_metrics_snapshots_user_id_fkey', 'platform_metrics_snapshots', 'users', ['user_id'], ['id'])
    op.create_foreign_key('platform_metrics_snapshots_connection_id_fkey', 'platform_metrics_snapshots', 'social_connections', ['connection_id'], ['id'])
    op.drop_index(op.f('ix_platform_metrics_snapshots_snapshot_time'), table_name='platform_metrics_snapshots')
    op.drop_index(op.f('ix_platform_metrics_snapshots_id'), table_name='platform_metrics_snapshots')
    op.drop_index('idx_metrics_snapshot_conn_time', table_name='platform_metrics_snapshots')
    op.create_unique_constraint('platform_metrics_snapshots_public_id_key', 'platform_metrics_snapshots', ['public_id'])
    op.create_index('ix_platform_metrics_user_id', 'platform_metrics_snapshots', ['user_id'], unique=False)
    op.create_index('ix_platform_metrics_snapshot_date', 'platform_metrics_snapshots', ['snapshot_date'], unique=False)
    op.create_index('ix_platform_metrics_platform', 'platform_metrics_snapshots', ['platform'], unique=False)
    op.alter_column('platform_metrics_snapshots', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('platform_metrics_snapshots', 'platform_specific_metrics')
    op.drop_column('platform_metrics_snapshots', 'engagement_growth')
    op.drop_column('platform_metrics_snapshots', 'posts_growth')
    op.drop_column('platform_metrics_snapshots', 'followers_growth')
    op.drop_column('platform_metrics_snapshots', 'overall_engagement_rate')
    op.drop_column('platform_metrics_snapshots', 'avg_shares_per_post')
    op.drop_column('platform_metrics_snapshots', 'avg_comments_per_post')
    op.drop_column('platform_metrics_snapshots', 'avg_likes_per_post')
    op.drop_column('platform_metrics_snapshots', 'snapshot_time')
    op.add_column('platform_configs', sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('maintenance_mode', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('scopes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('platform_configs', sa.Column('base_url', sa.VARCHAR(length=512), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('client_secret', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('platform_configs', sa.Column('auth_type', sa.VARCHAR(length=50), server_default=sa.text("'oauth2'::character varying"), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('client_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('platform_configs', sa.Column('webhook_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_platform_configs_platform_name'), table_name='platform_configs')
    op.drop_index(op.f('ix_platform_configs_id'), table_name='platform_configs')
    op.create_unique_constraint('platform_configs_public_id_key', 'platform_configs', ['public_id'])
    op.create_unique_constraint('platform_configs_platform_key', 'platform_configs', ['platform'])
    op.create_index('ix_platform_configs_platform', 'platform_configs', ['platform'], unique=False)
    op.create_index('ix_platform_configs_is_enabled', 'platform_configs', ['is_enabled'], unique=False)
    op.alter_column('platform_configs', 'rate_limits',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_column('platform_configs', 'help_url')
    op.drop_column('platform_configs', 'setup_instructions')
    op.drop_column('platform_configs', 'api_base_url')
    op.drop_column('platform_configs', 'oauth_config')
    op.drop_column('platform_configs', 'optional_fields')
    op.drop_column('platform_configs', 'required_fields')
    op.drop_column('platform_configs', 'requires_app_credentials')
    op.drop_column('platform_configs', 'requires_oauth')
    op.drop_column('platform_configs', 'is_active')
    op.drop_column('platform_configs', 'platform_name')
    op.add_column('permissions', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.drop_constraint('uq_resource_action', 'permissions', type_='unique')
    op.create_unique_constraint('permissions_public_id_key', 'permissions', ['public_id'])
    op.create_index('ix_permissions_public_id', 'permissions', ['public_id'], unique=False)
    op.alter_column('permissions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('permissions', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('permissions', 'is_system_permission')
    op.drop_column('permissions', 'display_name')
    op.add_column('organizations', sa.Column('industry', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('subscription_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('size', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('organizations', sa.Column('subscription_plan', sa.VARCHAR(length=50), server_default=sa.text("'free'::character varying"), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('timezone', sa.VARCHAR(length=100), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('website', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('organizations', sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'organizations', type_='foreignkey')
    op.create_foreign_key('organizations_created_by_id_fkey', 'organizations', 'users', ['created_by_id'], ['id'])
    op.drop_index(op.f('ix_organizations_slug'), table_name='organizations')
    op.create_index('ix_organizations_slug', 'organizations', ['slug'], unique=False)
    op.create_unique_constraint('organizations_slug_key', 'organizations', ['slug'])
    op.create_unique_constraint('organizations_public_id_key', 'organizations', ['public_id'])
    op.create_index('ix_organizations_subscription_status', 'organizations', ['subscription_status'], unique=False)
    op.create_index('ix_organizations_public_id', 'organizations', ['public_id'], unique=False)
    op.create_index('ix_organizations_name', 'organizations', ['name'], unique=False)
    op.create_index('ix_organizations_created_at', 'organizations', ['created_at'], unique=False)
    op.alter_column('organizations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organizations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organizations', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('organizations', 'owner_id')
    op.drop_column('organizations', 'features_enabled')
    op.drop_column('organizations', 'settings')
    op.drop_column('organizations', 'max_teams')
    op.drop_column('organizations', 'plan_type')
    op.add_column('organization_invitations', sa.Column('invitation_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('organization_invitations', sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('organization_invitations', sa.Column('accepted_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('organization_invitations', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('organization_invitations', sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'organization_invitations', type_='foreignkey')
    op.drop_constraint(None, 'organization_invitations', type_='foreignkey')
    op.create_foreign_key('organization_invitations_accepted_by_id_fkey', 'organization_invitations', 'users', ['accepted_by_id'], ['id'])
    op.create_foreign_key('organization_invitations_role_id_fkey', 'organization_invitations', 'roles', ['role_id'], ['id'])
    op.drop_constraint(None, 'organization_invitations', type_='unique')
    op.create_unique_constraint('organization_invitations_public_id_key', 'organization_invitations', ['public_id'])
    op.create_unique_constraint('organization_invitations_invitation_token_key', 'organization_invitations', ['invitation_token'])
    op.create_index('ix_org_invitations_token', 'organization_invitations', ['invitation_token'], unique=False)
    op.create_index('ix_org_invitations_status', 'organization_invitations', ['status'], unique=False)
    op.create_index('ix_org_invitations_organization_id', 'organization_invitations', ['organization_id'], unique=False)
    op.create_index('ix_org_invitations_expires_at', 'organization_invitations', ['expires_at'], unique=False)
    op.create_index('ix_org_invitations_email', 'organization_invitations', ['email'], unique=False)
    op.alter_column('organization_invitations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organization_invitations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('organization_invitations', 'accepted_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('organization_invitations', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('organization_invitations', 'organization_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('organization_invitations', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('organization_invitations', 'invited_user_id')
    op.drop_column('organization_invitations', 'token')
    op.drop_column('organization_invitations', 'role')
    op.drop_column('organization_invitations', 'team_id')
    op.add_column('notifications', sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.create_foreign_key('notifications_user_id_fkey', 'notifications', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_notifications_notification_type'), table_name='notifications')
    op.drop_index('idx_notification_user_type', table_name='notifications')
    op.drop_index('idx_notification_user_read', table_name='notifications')
    op.drop_index('idx_notification_created', table_name='notifications')
    op.create_index('ix_notifications_type', 'notifications', ['type'], unique=False)
    op.alter_column('notifications', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('notifications', 'read_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('notifications', 'workflow_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('notifications', 'content_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('notifications', 'goal_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('notifications', 'notification_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'info'::character varying"))
    op.alter_column('notifications', 'message',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('notifications', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('milestones', sa.Column('is_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('milestones', sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_milestones_id'), table_name='milestones')
    op.create_index('ix_milestones_is_completed', 'milestones', ['is_completed'], unique=False)
    op.create_index('ix_milestones_goal_id', 'milestones', ['goal_id'], unique=False)
    op.create_index('ix_milestones_created_at', 'milestones', ['created_at'], unique=False)
    op.alter_column('milestones', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('milestones', 'target_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('milestones', 'goal_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('milestones', 'achieved_at')
    op.drop_column('milestones', 'achieved')
    op.drop_column('milestones', 'target_value')
    op.add_column('metrics', sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('period', sa.VARCHAR(length=50), server_default=sa.text("'instant'::character varying"), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('metrics', sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('metrics', sa.Column('metric_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.create_foreign_key('metrics_organization_id_fkey', 'metrics', 'organizations', ['organization_id'], ['id'])
    op.drop_index(op.f('ix_metrics_id'), table_name='metrics')
    op.create_unique_constraint('metrics_public_id_key', 'metrics', ['public_id'])
    op.create_index('ix_metrics_user_id', 'metrics', ['user_id'], unique=False)
    op.create_index('ix_metrics_timestamp', 'metrics', ['timestamp'], unique=False)
    op.create_index('ix_metrics_metric_name', 'metrics', ['metric_name'], unique=False)
    op.alter_column('metrics', 'metric_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'counter'::character varying"))
    op.alter_column('metrics', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('metrics', 'metric_metadata')
    op.drop_column('metrics', 'date_recorded')
    op.drop_column('metrics', 'platform')
    op.add_column('memory_content', sa.Column('content_item_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('memory_content', sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('memory_content', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('memory_content', sa.Column('relationship_type', sa.VARCHAR(length=50), server_default=sa.text("'referenced'::character varying"), autoincrement=False, nullable=True))
    op.add_column('memory_content', sa.Column('context', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('memory_content', sa.Column('memory_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('memory_content_content_item_id_fkey', 'memory_content', 'content_items', ['content_item_id'], ['id'])
    op.create_foreign_key('memory_content_content_id_fkey', 'memory_content', 'content', ['content_id'], ['id'])
    op.create_foreign_key('memory_content_memory_id_fkey', 'memory_content', 'memories', ['memory_id'], ['id'])
    op.create_unique_constraint('memory_content_public_id_key', 'memory_content', ['public_id'])
    op.create_index('ix_memory_content_relationship', 'memory_content', ['relationship_type'], unique=False)
    op.create_index('ix_memory_content_memory_id', 'memory_content', ['memory_id'], unique=False)
    op.create_index('ix_memory_content_content_id', 'memory_content', ['content_id'], unique=False)
    op.alter_column('memory_content', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('memory_content', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('memory_content', 'content_metadata')
    op.drop_column('memory_content', 'updated_at')
    op.drop_column('memory_content', 'topic_category')
    op.drop_column('memory_content', 'sentiment')
    op.drop_column('memory_content', 'tags')
    op.drop_column('memory_content', 'performance_tier')
    op.drop_column('memory_content', 'engagement_score')
    op.drop_column('memory_content', 'similarity_cluster')
    op.drop_column('memory_content', 'embedding_id')
    op.drop_column('memory_content', 'platform')
    op.drop_column('memory_content', 'source')
    op.drop_column('memory_content', 'content_type')
    op.drop_column('memory_content', 'content')
    op.add_column('memories', sa.Column('importance_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True))
    op.create_index('ix_memories_user_created', 'memories', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_memories_importance_score', 'memories', ['importance_score'], unique=False)
    op.add_column('interaction_responses', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'interaction_responses', type_='foreignkey')
    op.drop_constraint(None, 'interaction_responses', type_='foreignkey')
    op.create_foreign_key('interaction_responses_user_id_fkey', 'interaction_responses', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('interaction_responses_interaction_id_fkey', 'interaction_responses', 'social_interactions', ['interaction_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_interaction_response_user_sent', table_name='interaction_responses')
    op.drop_index('idx_interaction_response_status', table_name='interaction_responses')
    op.drop_index('idx_interaction_response_interaction', table_name='interaction_responses')
    op.create_index('ix_interaction_responses_user_id', 'interaction_responses', ['user_id'], unique=False)
    op.create_index('ix_interaction_responses_status', 'interaction_responses', ['status'], unique=False)
    op.create_index('ix_interaction_responses_interaction_id', 'interaction_responses', ['interaction_id'], unique=False)
    op.create_index('ix_interaction_responses_created_at', 'interaction_responses', ['created_at'], unique=False)
    op.drop_column('interaction_responses', 'retry_count')
    op.add_column('goals', sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('goals', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('goals', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('goals', sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('goals', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('goals', sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True))
    op.create_foreign_key('goals_organization_id_fkey', 'goals', 'organizations', ['organization_id'], ['id'])
    op.create_index('ix_goals_user_id', 'goals', ['user_id'], unique=False)
    op.create_index('ix_goals_status', 'goals', ['status'], unique=False)
    op.create_index('ix_goals_public_id', 'goals', ['public_id'], unique=False)
    op.create_index('ix_goals_organization_id', 'goals', ['organization_id'], unique=False)
    op.create_index('ix_goals_created_at', 'goals', ['created_at'], unique=False)
    op.create_index('ix_goals_category', 'goals', ['category'], unique=False)
    op.create_unique_constraint('goals_public_id_key', 'goals', ['public_id'])
    op.alter_column('goals', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('goals', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('goals', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('goals', 'target_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('goals', 'target_value',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('goals', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('goals', 'goal_metadata')
    op.drop_column('goals', 'platform')
    op.drop_column('goals', 'goal_type')
    op.add_column('goal_progress', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('goal_progress', sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_goal_progress_id'), table_name='goal_progress')
    op.create_index('ix_goal_progress_goal_id', 'goal_progress', ['goal_id'], unique=False)
    op.create_index('ix_goal_progress_created_at', 'goal_progress', ['created_at'], unique=False)
    op.alter_column('goal_progress', 'goal_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('goal_progress', 'source')
    op.drop_column('goal_progress', 'recorded_at')
    op.drop_column('goal_progress', 'change_amount')
    op.drop_column('goal_progress', 'new_value')
    op.drop_column('goal_progress', 'old_value')
    op.add_column('content_templates', sa.Column('template_type', sa.VARCHAR(length=50), server_default=sa.text("'post'::character varying"), autoincrement=False, nullable=True))
    op.add_column('content_templates', sa.Column('preview_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('content_templates', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_templates', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_templates', type_='foreignkey')
    op.create_foreign_key('content_templates_organization_id_fkey', 'content_templates', 'organizations', ['organization_id'], ['id'])
    op.create_index('ix_content_templates_user_id', 'content_templates', ['user_id'], unique=False)
    op.create_unique_constraint('content_templates_public_id_key', 'content_templates', ['public_id'])
    op.alter_column('content_templates', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_templates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_templates', 'variables',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('content_templates', 'platform',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('content_templates', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('content_templates', 'is_active')
    op.drop_column('content_templates', 'constraints')
    op.drop_column('content_templates', 'avg_performance')
    op.drop_column('content_templates', 'content_type')
    op.drop_column('content_templates', 'category_id')
    op.drop_column('content_templates', 'prompt_template')
    op.add_column('content_schedules', sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('content_schedules', sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_schedules', sa.Column('content_draft_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('content_schedules', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_schedules', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('content_schedules', sa.Column('timezone', sa.VARCHAR(length=100), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_schedules', type_='foreignkey')
    op.drop_constraint(None, 'content_schedules', type_='foreignkey')
    op.create_foreign_key('content_schedules_user_id_fkey', 'content_schedules', 'users', ['user_id'], ['id'])
    op.create_foreign_key('content_schedules_organization_id_fkey', 'content_schedules', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('content_schedules_content_draft_id_fkey', 'content_schedules', 'content_drafts', ['content_draft_id'], ['id'])
    op.drop_constraint(None, 'content_schedules', type_='unique')
    op.drop_constraint('uq_content_schedule_hash_connection', 'content_schedules', type_='unique')
    op.drop_index('idx_content_schedules_status', table_name='content_schedules')
    op.drop_index('idx_content_schedules_scheduled', table_name='content_schedules')
    op.drop_index('idx_content_schedules_org_connection', table_name='content_schedules')
    op.drop_index('idx_content_schedules_idempotency', table_name='content_schedules')
    op.drop_index('idx_content_schedules_content_hash_connection', table_name='content_schedules')
    op.create_index('ix_content_schedules_user_id', 'content_schedules', ['user_id'], unique=False)
    op.create_index('ix_content_schedules_status', 'content_schedules', ['status'], unique=False)
    op.create_index('ix_content_schedules_scheduled_for', 'content_schedules', ['scheduled_for'], unique=False)
    op.create_unique_constraint('content_schedules_public_id_key', 'content_schedules', ['public_id'])
    op.alter_column('content_schedules', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_schedules', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_schedules', 'published_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('content_schedules', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'scheduled'::character varying"))
    op.alter_column('content_schedules', 'scheduled_for',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('content_schedules', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('content_schedules', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('content_schedules', 'idempotency_key')
    op.drop_column('content_schedules', 'platform_post_id')
    op.drop_column('content_schedules', 'media_urls')
    op.drop_column('content_schedules', 'content_hash')
    op.drop_column('content_schedules', 'content')
    op.drop_column('content_schedules', 'connection_id')
    op.add_column('content_performance_snapshots', sa.Column('comments', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('impressions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('reach', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('content_performance_snapshots', sa.Column('likes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_performance_snapshots', sa.Column('raw_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('shares', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('performance_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))
    op.add_column('content_performance_snapshots', sa.Column('snapshot_date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('content_performance_snapshots', sa.Column('clicks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.create_foreign_key('content_performance_snapshots_content_id_fkey', 'content_performance_snapshots', 'content', ['content_id'], ['id'])
    op.drop_index(op.f('ix_content_performance_snapshots_snapshot_time'), table_name='content_performance_snapshots')
    op.drop_index(op.f('ix_content_performance_snapshots_id'), table_name='content_performance_snapshots')
    op.drop_index('idx_snapshot_content_time', table_name='content_performance_snapshots')
    op.create_index('ix_content_performance_snapshot_date', 'content_performance_snapshots', ['snapshot_date'], unique=False)
    op.create_index('ix_content_performance_platform', 'content_performance_snapshots', ['platform'], unique=False)
    op.create_index('ix_content_performance_content_id', 'content_performance_snapshots', ['content_id'], unique=False)
    op.create_unique_constraint('content_performance_snapshots_public_id_key', 'content_performance_snapshots', ['public_id'])
    op.alter_column('content_performance_snapshots', 'content_item_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('content_performance_snapshots', 'platform_metrics')
    op.drop_column('content_performance_snapshots', 'viral_coefficient')
    op.drop_column('content_performance_snapshots', 'engagement_velocity')
    op.drop_column('content_performance_snapshots', 'reach_growth')
    op.drop_column('content_performance_snapshots', 'comments_growth')
    op.drop_column('content_performance_snapshots', 'shares_growth')
    op.drop_column('content_performance_snapshots', 'likes_growth')
    op.drop_column('content_performance_snapshots', 'click_count')
    op.drop_column('content_performance_snapshots', 'reach_count')
    op.drop_column('content_performance_snapshots', 'comments_count')
    op.drop_column('content_performance_snapshots', 'shares_count')
    op.drop_column('content_performance_snapshots', 'likes_count')
    op.drop_column('content_performance_snapshots', 'snapshot_time')
    op.add_column('content_logs', sa.Column('engagement_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))
    op.add_column('content_logs', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('content_logs', sa.Column('scheduled_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_logs', type_='foreignkey')
    op.drop_constraint(None, 'content_logs', type_='foreignkey')
    op.create_foreign_key('content_logs_user_id_fkey', 'content_logs', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_content_logs_organization_id'), table_name='content_logs')
    op.drop_index('ix_content_logs_org_user', table_name='content_logs')
    op.drop_index('ix_content_logs_org_status', table_name='content_logs')
    op.drop_index('ix_content_logs_org_platform', table_name='content_logs')
    op.drop_index(op.f('ix_content_logs_id'), table_name='content_logs')
    op.drop_index(op.f('ix_content_logs_public_id'), table_name='content_logs')
    op.create_index('ix_content_logs_public_id', 'content_logs', ['public_id'], unique=False)
    op.create_unique_constraint('uq_content_logs_public_id', 'content_logs', ['public_id'])
    op.create_index('ix_content_logs_user_id', 'content_logs', ['user_id'], unique=False)
    op.create_index('ix_content_logs_status', 'content_logs', ['status'], unique=False)
    op.create_index('ix_content_logs_platform', 'content_logs', ['platform'], unique=False)
    op.create_index('ix_content_logs_created_at', 'content_logs', ['created_at'], unique=False)
    op.alter_column('content_logs', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('content_logs', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_logs', 'published_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('content_logs', 'engagement_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('content_logs', 'public_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=36),
               existing_nullable=False)
    op.drop_column('content_logs', 'organization_id')
    op.add_column('content_items', sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('format', sa.VARCHAR(length=50), server_default=sa.text("'markdown'::character varying"), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('share_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('featured_image_url', sa.VARCHAR(length=512), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('content_items', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('like_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_items', sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('excerpt', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('content_items', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_items', type_='foreignkey')
    op.create_foreign_key('content_items_category_id_fkey', 'content_items', 'content_categories', ['category_id'], ['id'])
    op.create_foreign_key('content_items_organization_id_fkey', 'content_items', 'organizations', ['organization_id'], ['id'])
    op.drop_index(op.f('ix_content_items_topic_category'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_sentiment'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_scheduled_for'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_platform_post_id'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_platform'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_performance_tier'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_embedding_id'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_created_at'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_content_type'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_content_hash'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_ab_test_id'), table_name='content_items')
    op.drop_index('idx_content_user_platform', table_name='content_items')
    op.drop_index('idx_content_topic_sentiment', table_name='content_items')
    op.drop_index('idx_content_performance', table_name='content_items')
    op.drop_index('idx_content_created_platform', table_name='content_items')
    op.drop_index('idx_content_ab_test', table_name='content_items')
    op.create_index('ix_content_items_user_id', 'content_items', ['user_id'], unique=False)
    op.create_index('ix_content_items_category_id', 'content_items', ['category_id'], unique=False)
    op.create_unique_constraint('content_items_public_id_key', 'content_items', ['public_id'])
    op.alter_column('content_items', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_items', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_items', 'scheduled_for',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('content_items', 'published_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('content_items', 'content_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'article'::character varying"))
    op.alter_column('content_items', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('content_items', 'content_metadata')
    op.drop_column('content_items', 'last_performance_update')
    op.drop_column('content_items', 'brand_voice_alignment')
    op.drop_column('content_items', 'content_quality_score')
    op.drop_column('content_items', 'rejection_reason')
    op.drop_column('content_items', 'approved_at')
    op.drop_column('content_items', 'approved_by')
    op.drop_column('content_items', 'requires_approval')
    op.drop_column('content_items', 'ab_test_id')
    op.drop_column('content_items', 'ab_test_group')
    op.drop_column('content_items', 'campaign_id')
    op.drop_column('content_items', 'template_id')
    op.drop_column('content_items', 'parent_content_id')
    op.drop_column('content_items', 'hour_of_day')
    op.drop_column('content_items', 'day_of_week')
    op.drop_column('content_items', 'time_zone')
    op.drop_column('content_items', 'optimal_posting_time')
    op.drop_column('content_items', 'keywords')
    op.drop_column('content_items', 'links')
    op.drop_column('content_items', 'mentions')
    op.drop_column('content_items', 'hashtags')
    op.drop_column('content_items', 'generation_params')
    op.drop_column('content_items', 'generation_prompt')
    op.drop_column('content_items', 'ai_model')
    op.drop_column('content_items', 'ai_generated')
    op.drop_column('content_items', 'reading_level')
    op.drop_column('content_items', 'tone')
    op.drop_column('content_items', 'sentiment')
    op.drop_column('content_items', 'topic_category')
    op.drop_column('content_items', 'viral_score')
    op.drop_column('content_items', 'performance_tier')
    op.drop_column('content_items', 'engagement_rate')
    op.drop_column('content_items', 'click_count')
    op.drop_column('content_items', 'reach_count')
    op.drop_column('content_items', 'comments_count')
    op.drop_column('content_items', 'shares_count')
    op.drop_column('content_items', 'likes_count')
    op.drop_column('content_items', 'embedding_model')
    op.drop_column('content_items', 'embedding_id')
    op.drop_column('content_items', 'platform_url')
    op.drop_column('content_items', 'platform_post_id')
    op.drop_column('content_items', 'content_format')
    op.drop_column('content_items', 'platform')
    op.drop_column('content_items', 'content_hash')
    op.add_column('content_drafts', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('content_drafts', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('content_drafts', sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('content_drafts', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_drafts', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('content_drafts', sa.Column('content_type', sa.VARCHAR(length=50), server_default=sa.text("'post'::character varying"), autoincrement=False, nullable=True))
    op.add_column('content_drafts', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_drafts', type_='foreignkey')
    op.drop_constraint(None, 'content_drafts', type_='foreignkey')
    op.create_foreign_key('content_drafts_organization_id_fkey', 'content_drafts', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('content_drafts_user_id_fkey', 'content_drafts', 'users', ['user_id'], ['id'])
    op.drop_index('idx_content_drafts_org_connection', table_name='content_drafts')
    op.drop_index('idx_content_drafts_hash', table_name='content_drafts')
    op.create_index('ix_content_drafts_user_id', 'content_drafts', ['user_id'], unique=False)
    op.create_index('ix_content_drafts_status', 'content_drafts', ['status'], unique=False)
    op.create_index('ix_content_drafts_org_id', 'content_drafts', ['organization_id'], unique=False)
    op.create_unique_constraint('content_drafts_public_id_key', 'content_drafts', ['public_id'])
    op.alter_column('content_drafts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_drafts', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'draft'::character varying"))
    op.alter_column('content_drafts', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('content_drafts', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('content_drafts_id_seq'::regclass)"))
    op.drop_column('content_drafts', 'error_message')
    op.drop_column('content_drafts', 'verified_at')
    op.drop_column('content_drafts', 'media_urls')
    op.drop_column('content_drafts', 'content_hash')
    op.drop_column('content_drafts', 'connection_id')
    op.add_column('content_categories', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('content_categories', sa.Column('sort_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('content_categories', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'content_categories', type_='unique')
    op.drop_index(op.f('ix_content_categories_id'), table_name='content_categories')
    op.drop_index(op.f('ix_content_categories_slug'), table_name='content_categories')
    op.create_index('ix_content_categories_slug', 'content_categories', ['slug'], unique=False)
    op.create_index('ix_content_categories_parent_id', 'content_categories', ['parent_id'], unique=False)
    op.create_unique_constraint('content_categories_slug_key', 'content_categories', ['slug'])
    op.create_unique_constraint('content_categories_public_id_key', 'content_categories', ['public_id'])
    op.alter_column('content_categories', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('content_categories', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('content_categories', 'training_samples')
    op.drop_column('content_categories', 'keywords')
    op.drop_column('content_categories', 'total_content_count')
    op.drop_column('content_categories', 'avg_engagement_rate')
    op.add_column('content', sa.Column('content_type', sa.VARCHAR(length=50), server_default=sa.text("'post'::character varying"), autoincrement=False, nullable=True))
    op.add_column('content', sa.Column('content_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index('ix_content_user_created', 'content', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_content_content_type', 'content', ['content_type'], unique=False)
    op.drop_constraint(None, 'company_knowledge', type_='foreignkey')
    op.create_foreign_key('company_knowledge_user_id_fkey', 'company_knowledge', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_company_knowledge_user_topic', table_name='company_knowledge')
    op.drop_index('idx_company_knowledge_usage', table_name='company_knowledge')
    op.drop_index('idx_company_knowledge_active', table_name='company_knowledge')
    op.create_index('ix_company_knowledge_user_id', 'company_knowledge', ['user_id'], unique=False)
    op.create_index('ix_company_knowledge_usage_count', 'company_knowledge', ['usage_count'], unique=False)
    op.create_index('ix_company_knowledge_topic', 'company_knowledge', ['topic'], unique=False)
    op.create_index('ix_company_knowledge_is_active', 'company_knowledge', ['is_active'], unique=False)
    op.alter_column('company_knowledge', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('company_knowledge', 'requires_approval')
    op.drop_column('company_knowledge', 'last_used_at')
    op.drop_column('company_knowledge', 'confidence_score')
    op.drop_column('company_knowledge', 'source')
    op.add_column('api_key_revocations', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('api_key_revocations', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('api_key_revocations', sa.Column('api_key_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('api_key_revocations', sa.Column('revoked_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('api_key_revocations', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'api_key_revocations', type_='foreignkey')
    op.drop_constraint(None, 'api_key_revocations', type_='foreignkey')
    op.create_foreign_key('api_key_revocations_revoked_by_id_fkey', 'api_key_revocations', 'admin_users', ['revoked_by_id'], ['id'])
    op.drop_index(op.f('ix_api_key_revocations_id'), table_name='api_key_revocations')
    op.drop_index(op.f('ix_api_key_revocations_api_key'), table_name='api_key_revocations')
    op.create_index('ix_api_key_revocations_revoked_at', 'api_key_revocations', ['revoked_at'], unique=False)
    op.create_index('ix_api_key_revocations_api_key_id', 'api_key_revocations', ['api_key_id'], unique=False)
    op.create_unique_constraint('api_key_revocations_public_id_key', 'api_key_revocations', ['public_id'])
    op.alter_column('api_key_revocations', 'revoked_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('api_key_revocations', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('api_key_revocations', 'notes')
    op.drop_column('api_key_revocations', 'revoked_by')
    op.drop_column('api_key_revocations', 'user_id')
    op.drop_column('api_key_revocations', 'api_key')
    op.drop_constraint(None, 'admin_users', type_='foreignkey')
    op.drop_constraint(None, 'admin_users', type_='foreignkey')
    op.alter_column('admin_users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('admin_users', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('admin_users_id_seq'::regclass)"))
    op.drop_column('admin_users', 'updated_by')
    op.drop_column('admin_users', 'updated_at')
    op.drop_column('admin_users', 'created_by')
    op.drop_column('admin_users', 'two_factor_secret')
    op.drop_column('admin_users', 'two_factor_enabled')
    op.drop_column('admin_users', 'password_changed_at')
    op.drop_column('admin_users', 'locked_until')
    op.drop_column('admin_users', 'failed_login_attempts')
    op.drop_column('admin_users', 'is_superuser')
    op.drop_column('admin_users', 'full_name')
    op.add_column('admin_sessions', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_admin_sessions_session_token'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_refresh_token'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_id'), table_name='admin_sessions')
    op.create_index('ix_admin_sessions_expires_at', 'admin_sessions', ['expires_at'], unique=False)
    op.create_unique_constraint('admin_sessions_session_token_key', 'admin_sessions', ['session_token'])
    op.create_unique_constraint('admin_sessions_public_id_key', 'admin_sessions', ['public_id'])
    op.alter_column('admin_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('admin_sessions', 'admin_user_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('admin_sessions', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('admin_sessions', 'logout_at')
    op.drop_column('admin_sessions', 'last_activity')
    op.drop_column('admin_sessions', 'location')
    op.drop_column('admin_sessions', 'refresh_token')
    op.add_column('admin_audit_logs', sa.Column('public_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_admin_audit_logs_id'), table_name='admin_audit_logs')
    op.drop_index('idx_audit_resource', table_name='admin_audit_logs')
    op.drop_index('idx_audit_created_at', table_name='admin_audit_logs')
    op.drop_index('idx_audit_admin_action', table_name='admin_audit_logs')
    op.create_unique_constraint('admin_audit_logs_public_id_key', 'admin_audit_logs', ['public_id'])
    op.alter_column('admin_audit_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('admin_audit_logs', 'details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('admin_audit_logs', 'resource_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('admin_audit_logs', 'admin_user_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('admin_audit_logs', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('admin_audit_logs', 'execution_time_ms')
    op.drop_column('admin_audit_logs', 'error_message')
    op.drop_column('admin_audit_logs', 'success')
    op.drop_column('admin_audit_logs', 'request_id')
    op.drop_column('admin_audit_logs', 'new_values')
    op.drop_column('admin_audit_logs', 'old_values')
    op.create_table('dead_letter_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('task_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('queue_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_args', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('original_kwargs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_traceback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_eta', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('first_failure_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_retry_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('moved_to_dlq_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_requeued', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requeued_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('requires_manual_review', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('task_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dead_letter_tasks_pkey')
    )
    op.create_index('ix_dead_letter_tasks_user_id', 'dead_letter_tasks', ['user_id'], unique=False)
    op.create_index('ix_dead_letter_tasks_task_name', 'dead_letter_tasks', ['task_name'], unique=False)
    op.create_index('ix_dead_letter_tasks_task_id', 'dead_letter_tasks', ['task_id'], unique=True)
    op.create_index('ix_dead_letter_tasks_queue_name', 'dead_letter_tasks', ['queue_name'], unique=False)
    op.create_index('ix_dead_letter_tasks_organization_id', 'dead_letter_tasks', ['organization_id'], unique=False)
    op.create_index('ix_dead_letter_tasks_id', 'dead_letter_tasks', ['id'], unique=False)
    op.create_index('ix_dead_letter_tasks_failure_reason', 'dead_letter_tasks', ['failure_reason'], unique=False)
    op.create_table('knowledge_base_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='knowledge_base_entries_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='knowledge_base_entries_pkey')
    )
    op.create_index('idx_knowledge_base_user_id', 'knowledge_base_entries', ['user_id'], unique=False)
    op.create_index('idx_knowledge_base_keywords', 'knowledge_base_entries', ['keywords'], unique=False, postgresql_using='gin')
    op.create_index('idx_knowledge_base_category', 'knowledge_base_entries', ['category'], unique=False)
    op.create_table('social_responses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('interaction_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('response_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ai_generated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('ai_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('platform_response_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('platform_response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='social_responses_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='social_responses_pkey')
    )
    op.create_index('idx_social_responses_user_id', 'social_responses', ['user_id'], unique=False)
    op.create_index('idx_social_responses_status', 'social_responses', ['status'], unique=False)
    op.create_index('idx_social_responses_interaction_id', 'social_responses', ['interaction_id'], unique=False)
    op.create_table('inbox_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auto_respond_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('auto_respond_delay_minutes', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('sentiment_filter', postgresql.ARRAY(sa.VARCHAR(length=50)), autoincrement=False, nullable=True),
    sa.Column('priority_threshold', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('response_tone', sa.VARCHAR(length=50), server_default=sa.text("'professional'::character varying"), autoincrement=False, nullable=True),
    sa.Column('include_ai_disclosure', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('max_auto_responses_per_hour', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=True),
    sa.Column('business_hours_only', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('business_hours_start', postgresql.TIME(), server_default=sa.text("'09:00:00'::time without time zone"), autoincrement=False, nullable=True),
    sa.Column('business_hours_end', postgresql.TIME(), server_default=sa.text("'17:00:00'::time without time zone"), autoincrement=False, nullable=True),
    sa.Column('business_days', postgresql.ARRAY(sa.INTEGER()), server_default=sa.text('ARRAY[1, 2, 3, 4, 5]'), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='inbox_settings_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='inbox_settings_pkey'),
    sa.UniqueConstraint('user_id', name='inbox_settings_user_id_key')
    )
    op.create_index('idx_inbox_settings_user_id', 'inbox_settings', ['user_id'], unique=False)
    op.create_table('oauth_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('token_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('platform_account_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('connection_reference', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('encrypted_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('encryption_version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('encryption_key_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('issued_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_validated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('scopes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('token_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('last_rotation_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('rotation_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='oauth_tokens_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='oauth_tokens_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='oauth_tokens_pkey'),
    sa.UniqueConstraint('organization_id', 'platform', 'platform_account_id', 'token_type', name='uq_oauth_tokens_unique_per_account_type')
    )
    op.create_index('ix_oauth_tokens_is_valid', 'oauth_tokens', ['is_valid'], unique=False)
    op.create_index('idx_oauth_tokens_valid', 'oauth_tokens', ['is_valid'], unique=False)
    op.create_index('idx_oauth_tokens_org_platform', 'oauth_tokens', ['organization_id', 'platform'], unique=False)
    op.create_index('idx_oauth_tokens_expires', 'oauth_tokens', ['expires_at'], unique=False)
    op.create_index('idx_oauth_tokens_connection_ref', 'oauth_tokens', ['connection_reference'], unique=False)
    op.drop_index('ix_quotes_valid_until', table_name='quotes')
    op.drop_index(op.f('ix_quotes_status'), table_name='quotes')
    op.drop_index(op.f('ix_quotes_quote_number'), table_name='quotes')
    op.drop_index(op.f('ix_quotes_organization_id'), table_name='quotes')
    op.drop_index('ix_quotes_org_status', table_name='quotes')
    op.drop_index('ix_quotes_org_customer', table_name='quotes')
    op.drop_index('ix_quotes_org_created', table_name='quotes')
    op.drop_index(op.f('ix_quotes_lead_id'), table_name='quotes')
    op.drop_index(op.f('ix_quotes_customer_email'), table_name='quotes')
    op.drop_table('quotes')
    op.drop_index(op.f('ix_leads_status'), table_name='leads')
    op.drop_index(op.f('ix_leads_source_platform'), table_name='leads')
    op.drop_index(op.f('ix_leads_organization_id'), table_name='leads')
    op.drop_index(op.f('ix_leads_interaction_id'), table_name='leads')
    op.drop_index(op.f('ix_leads_contact_email'), table_name='leads')
    op.drop_index('idx_lead_priority', table_name='leads')
    op.drop_index('idx_lead_platform_org', table_name='leads')
    op.drop_index('idx_lead_org_status', table_name='leads')
    op.drop_index('idx_lead_org_created', table_name='leads')
    op.drop_index('idx_lead_contact_email', table_name='leads')
    op.drop_table('leads')
    op.drop_table('user_teams')
    op.drop_index(op.f('ix_webhook_idempotency_records_webhook_id'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_user_id'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_platform'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_organization_id'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_idempotency_key'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_id'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_expires_at'), table_name='webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_idempotency_records_event_type'), table_name='webhook_idempotency_records')
    op.drop_index('idx_webhook_idempotency_platform_event', table_name='webhook_idempotency_records')
    op.drop_index('idx_webhook_idempotency_org', table_name='webhook_idempotency_records')
    op.drop_index('idx_webhook_idempotency_expires', table_name='webhook_idempotency_records')
    op.drop_table('webhook_idempotency_records')
    op.drop_index(op.f('ix_webhook_delivery_tracking_webhook_id'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_user_id'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_platform'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_organization_id'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_next_retry_at'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_id'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_event_type'), table_name='webhook_delivery_tracking')
    op.drop_index(op.f('ix_webhook_delivery_tracking_delivery_status'), table_name='webhook_delivery_tracking')
    op.drop_index('idx_webhook_delivery_status', table_name='webhook_delivery_tracking')
    op.drop_index('idx_webhook_delivery_platform_event', table_name='webhook_delivery_tracking')
    op.drop_index('idx_webhook_delivery_org', table_name='webhook_delivery_tracking')
    op.drop_index('idx_webhook_delivery_next_retry', table_name='webhook_delivery_tracking')
    op.drop_table('webhook_delivery_tracking')
    op.drop_table('role_permissions')
    op.drop_index(op.f('ix_pricing_rules_organization_id'), table_name='pricing_rules')
    op.drop_index('ix_pricing_rules_org_effective', table_name='pricing_rules')
    op.drop_index('ix_pricing_rules_org_active', table_name='pricing_rules')
    op.drop_index(op.f('ix_pricing_rules_id'), table_name='pricing_rules')
    op.drop_table('pricing_rules')
    # ### end Alembic commands ###