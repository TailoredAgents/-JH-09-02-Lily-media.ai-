{
  "timestamp": "2025-09-08T12:12:04.504789",
  "audit_scope": [
    "backend/api",
    "backend/services",
    "backend/tasks",
    "backend/core",
    "backend/middleware"
  ],
  "summary": {
    "total_files_audited": 217,
    "total_queries_found": 3116,
    "secure_queries": 441,
    "risky_queries": 2675,
    "high_risk_count": 2675,
    "medium_risk_count": 357,
    "security_score": 14.2
  },
  "high_risk_queries": [
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 100,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "class UpdateUserSettingsRequest(BaseModel):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=UserSettingsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 197,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "async def update_user_settings(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 198,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "settings_update: UpdateUserSettingsRequest,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 202,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"\"\"Update current user's settings\"\"\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 244,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/defaults\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/two_factor.py",
      "line_number": 22,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\", response_model=TwoFactorStatusResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 72,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "registration_key = db.query(RegistrationKey).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 74,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 95,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_user = db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 97,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 179,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 308,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if payload.get(\"type\") != \"refresh\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 315,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "jti = payload.get(\"jti\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 317,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "blacklisted = db.query(RefreshTokenBlacklist).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 319,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 434,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "jti = payload.get(\"jti\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 441,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 462,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/verify\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 88,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/interactions\", response_model=InteractionListResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 101,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 109,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(SocialInteraction.status == status)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 112,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(SocialInteraction.intent == intent)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 121,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 124,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "unread_count = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 158,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 199,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 232,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 328,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/templates\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 334,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "templates = db.query(ResponseTemplate).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/knowledge-base\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 384,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(CompanyKnowledge).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 394,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 398,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/knowledge-base/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 404,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_entries = db.query(CompanyKnowledge).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 467,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Hub-Signature-256', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 501,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Hub-Signature-256', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 526,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 591,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = db.query(InteractionResponse).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 593,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 606,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = db.query(InteractionResponse).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 608,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 636,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ws/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 88,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 128,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memory = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 130,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 152,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/high-performing\", response_model=List[VectorMemoryResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 170,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memory = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 172,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 193,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/repurposing-candidates\", response_model=List[VectorMemoryResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 211,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memory = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 213,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 238,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/patterns\", response_model=ContentPatternAnalysis)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 322,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/by-type/{memory_type}\", response_model=List[VectorMemoryResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 340,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memory = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 342,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"permalink\": result.get(\"permalink\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 110,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/instagram/insights/{post_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 172,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/facebook/insights/{post_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 234,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/research/results\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 244,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = db.query(ResearchData).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "prompt_used=generated_content.get(\"prompt\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"hashtags\": generated_content.get(\"hashtags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 312,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_prediction\": generated_content.get(\"engagement_score\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 349,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/workflow/status/{workflow_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 362,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics/collection\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/history\", response_model=ContentHistoryResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 132,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.content_type.in_(type_list))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 136,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.performance_tier.in_(tier_list))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 140,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.topic_category.in_(category_list))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 144,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.sentiment.in_(sentiment_list))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 147,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.created_at >= date_from)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 150,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.created_at <= date_to)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 153,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.engagement_rate >= min_engagement)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 156,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.engagement_rate <= max_engagement)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 160,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.content.ilike(search_pattern))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 187,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "items = query.offset(offset).limit(page_size).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 236,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{content_id}/analytics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 246,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(ContentItem.id == content_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 264,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"content\": result.get('content', '')[:100] + '...',",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_rate\": result.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 269,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = db.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 271,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(desc(ContentPerformanceSnapshot.snapshot_time)).limit(10).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/summary\", response_model=ContentAnalytics)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 326,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_query = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 334,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = content_query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 364,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platforms_summary[item.platform] = platforms_summary.get(item.platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 368,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "performance_distribution[tier] = performance_distribution.get(tier, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 372,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "category_distribution[category] = category_distribution.get(category, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sentiment_distribution[sentiment] = sentiment_distribution.get(sentiment, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 492,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 494,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 532,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/export\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 559,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.platform.in_(platform_list))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 561,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = query.order_by(desc(ContentItem.created_at)).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 676,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 687,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 714,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/statistics/performance\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 729,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/categories\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 735,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "categories = db.query(ContentCategory).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/legal_documents.py",
      "line_number": 23,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/privacy-policy\", response_class=HTMLResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/legal_documents.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/terms-of-service\", response_class=HTMLResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/legal_documents.py",
      "line_number": 407,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/data-deletion-instructions\", response_class=HTMLResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/legal_documents.py",
      "line_number": 550,
      "query_type": "DELETE.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "<p>To delete data from social media platforms, you must:</p>",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/legal_documents.py",
      "line_number": 618,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 173,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/subscription\", response_model=SubscriptionInfoResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/plans\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sig_header = request.headers.get(\"stripe-signature\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 464,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not subscription_info.get(\"has_active_subscription\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 488,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cancellation_date=cancellation_result.get(\"cancelled_at\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 489,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "effective_date=cancellation_result.get(\"effective_date\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 579,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/compliance-disclosures\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/billing.py",
      "line_number": 628,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 55,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Connection deletion requested: {connection_id} by user {current_user.get('user_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 58,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if unsubscribe_result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "warning_msg = f\"Webhook unsubscription warning: {unsubscribe_result.get('error', 'unknown')}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 253,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 292,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_audit_logs = db.query(SocialAudit).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 350,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/retention-policy\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 418,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not current_user.get('is_admin'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 426,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expired_logs_query = db.query(SocialAudit).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 443,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expired_logs = expired_logs_query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 468,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 89,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 170,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 250,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "original_content = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 264,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid platforms: {', '.join(invalid_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_rate\": high_performing[0].engagement_metrics.get(\"engagement_rate\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 375,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_rate\": c.engagement_metrics.get(\"engagement_rate\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 395,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/trending\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 413,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 422,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 424,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.content_type == content_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 430,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 510,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "distribution[content_type] = distribution.get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 519,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "distribution[platform] = distribution.get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 535,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "c.engagement_metrics.get(\"engagement_rate\", 0) * c.similarity_score",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 587,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "suggestions.append(f\"Consider using popular hashtags: {', '.join(top_hashtags)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 598,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "suggestions.extend(platform_suggestions.get(platform, []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 17,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 87,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/content/{content_type}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/high-performing\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 125,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/repurpose\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 187,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type = meta.get('metadata', {}).get('type', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_types[content_type] = content_types.get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_aware_images.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/capabilities\", response_model=ImageCapabilitiesResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_aware_images.py",
      "line_number": 158,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/usage\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_aware_images.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/models\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 44,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if any(model in issue.details.get(\"model\", \"\") for model in request.models)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/models/{model_name}/validate\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 260,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/coverage/report\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"template_class\": model_info.get(\"template_class\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 277,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"capabilities\": model_info.get(\"capabilities\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_tested\": model_info.get(\"last_tested\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if model in issue.details.get(\"model\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 355,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if fix_result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 358,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"fix\": fix_result.get(\"description\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 364,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if fix_result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/template_validation.py",
      "line_number": 367,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"fix\": fix_result.get(\"description\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search_production.py",
      "line_number": 254,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 77,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 134,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": engagement_data.get(\"title\", request.title),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"tags\": engagement_data.get(\"tags\", request.tags),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"generated_by_ai\": request.dict().get('generated_by_ai', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"industry_context\": request.dict().get('industry_context', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_url\": request.dict().get('image_url', None),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_prompt\": request.dict().get('image_prompt', None),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/scheduled/upcoming\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 185,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_chars = platform_limits.get(request.platform, 250)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 221,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if insights.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 227,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "company_insights = request.company_research_data.get('insights', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 231,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "category_data = company_insights.get(category, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 237,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "context_parts.append(f\"Company research: {'. '.join(research_insights[:3])}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 239,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_context = '. '.join(context_parts)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if image_result and image_result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 378,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_url\": image_result.get(\"image_data_url\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 379,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_data_url\": image_result.get(\"image_data_url\"),  # For backward compatibility",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 380,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"prompt\": image_result.get(\"prompt\", {}).get(\"enhanced\", image_prompt),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 387,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": image_result.get(\"error\", \"Image generation failed\") if image_result else \"Image service unavailable\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 456,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "image_history = engagement_data.get(\"image_history\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 499,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ai-insights\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 509,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/social-connections\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 529,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"connected_count\": sum(1 for conn in connections.values() if conn.get(\"connected\", False)),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 533,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{content_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 551,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 558,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 561,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"generated_by_ai\": engagement_data.get('generated_by_ai', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 562,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"industry_context\": engagement_data.get('industry_context', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 563,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_url\": engagement_data.get('image_url', None),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 564,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"image_prompt\": engagement_data.get('image_prompt', None),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 566,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"views\": engagement_data.get('views', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 567,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"likes\": engagement_data.get('likes', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 568,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"shares\": engagement_data.get('shares', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 569,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"comments\": engagement_data.get('comments', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 570,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_rate\": engagement_data.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 622,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 629,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 672,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 686,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_query = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 694,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "published_count = content_query.filter(ContentLog.status == \"published\").count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 695,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scheduled_count = content_query.filter(ContentLog.status == \"scheduled\").count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 696,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "draft_count = content_query.filter(ContentLog.status == \"draft\").count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 699,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_stats = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 702,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 713,
      "query_type": "\\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "published_content = content_query.filter(ContentLog.status == \"published\").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 725,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "views = engagement_data.get('views', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 726,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "likes = engagement_data.get('likes', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 727,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "shares = engagement_data.get('shares', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 728,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comments = engagement_data.get('comments', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_suggestions.py",
      "line_number": 20,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/proactive\", response_model=List[Dict[str, Any]])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_suggestions.py",
      "line_number": 53,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/usage-summary\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_suggestions.py",
      "line_number": 123,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/quota-warning/{quota_type}\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_suggestions.py",
      "line_number": 182,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/all-plans\", response_model=List[Dict[str, Any]])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_suggestions.py",
      "line_number": 192,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"pricing\": UpgradeSuggestionEngine.PLAN_PRICING.get(plan_tier, {\"monthly\": 0, \"annual\": 0}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{platform}/start\", response_model=OAuthStartResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 220,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "internal_platform = platform_mapping.get(platform, platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 241,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 242,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 243,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 263,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"scope\": \" \".join(platform_config[\"scopes\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 308,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{platform}/callback\", response_model=OAuthCallbackResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 392,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "code_verifier = state_data.get(\"code_verifier\") if platform_config[\"requires_pkce\"] else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 522,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"token_type\": tokens.get(\"token_type\", \"bearer\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 523,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"expires_in\": tokens.get(\"expires_in\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 560,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"token_type\": tokens.get(\"token_type\", \"bearer\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 561,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"expires_in\": tokens.get(\"expires_in\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 562,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"refresh_token\": tokens.get(\"refresh_token\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 563,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"scope\": tokens.get(\"scope\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 597,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 608,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ig_id = connection.platform_metadata.get(\"ig_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 665,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/meta/assets\", response_model=MetaAssetsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 708,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "instagram_business_account=page_data.get(\"instagram_business_account\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 768,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 769,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 832,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if cached_tokens[\"tokens\"].get(\"expires_in\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 847,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scopes=cached_tokens.get(\"scopes\", PLATFORM_CONFIGS[\"meta\"][\"scopes\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1023,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1024,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1061,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if tokens.get(\"refresh_token\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1066,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if tokens.get(\"expires_in\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1107,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verified\": metadata.get(\"verified\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1185,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/connections\", response_model=ConnectionListResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1296,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "encrypted_page_token = connection.access_tokens.get(\"page_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/partner_oauth.py",
      "line_number": 1309,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "instagram_id = connection.connection_metadata.get(\"instagram_account_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 38,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 252,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/categories\", response_model=Dict[str, List[str]])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/compliance/report\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 342,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/export/taxonomy\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/validation/completeness\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/error_taxonomy.py",
      "line_number": 423,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/troubleshooting/{error_code}\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals.py",
      "line_number": 42,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{goal_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals.py",
      "line_number": 159,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/types/list\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 78,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Unsupported platform. Must be one of: {', '.join(supported_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 102,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 104,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 198,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": profile_data.get(\"username\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"display_name\": profile_data.get(\"display_name\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 200,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"profile_image\": profile_data.get(\"profile_image\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 201,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"follower_count\": profile_data.get(\"follower_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 202,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verified\": profile_data.get(\"verified\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/callback/{platform}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 261,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/connected\", response_model=List[ConnectedAccountResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 270,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_settings = db.query(UserSetting).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if account_data.get(\"expires_at\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "username=account_data.get(\"username\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 289,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "display_name=account_data.get(\"display_name\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 290,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "profile_image=account_data.get(\"profile_image\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 291,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "follower_count=account_data.get(\"follower_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 292,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "verified=account_data.get(\"verified\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 293,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connected_at=account_data.get(\"connected_at\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 303,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status/{platform}\", response_model=PlatformStatusResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 313,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_settings = db.query(UserSetting).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 323,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "account_data = user_settings.connected_accounts.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 330,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if account_data.get(\"expires_at\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 337,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": account_data.get(\"username\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 338,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"display_name\": account_data.get(\"display_name\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 339,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"follower_count\": account_data.get(\"follower_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 340,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verified\": account_data.get(\"verified\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "last_activity = account_data.get(\"last_refreshed\") or account_data.get(\"connected_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 428,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/test/{platform}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 459,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": profile_data.get(\"username\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 460,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"display_name\": profile_data.get(\"display_name\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 461,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"follower_count\": profile_data.get(\"follower_count\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 472,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/platforms\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 40,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ai-features\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 83,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if insights.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 86,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ai_insights_test = {\"status\": \"failed\", \"error\": insights.get(\"error\", \"Unknown error\")}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/industry-research\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if insights.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 174,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"has_real_time_data\": insights.get(\"metadata\", {}).get(\"has_real_time_data\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "full_test = {\"status\": \"failed\", \"error\": insights.get(\"error\", \"Unknown error\")}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"response_time_ms\": db_health_result.get(\"query_response_time\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 83,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"connection_pool\": db_health_result.get(\"connection_pool_status\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 84,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": db_health_result.get(\"error\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 136,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message\": f\"Critical quota usage on platforms: {', '.join(quota_stats.critical_platforms)}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 303,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health/detailed\", summary=\"Detailed Health Information\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 352,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics/history\", summary=\"Historical Metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 441,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\", summary=\"Service Status Dashboard\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 558,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/frontend-logs\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 55,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/platforms\", response_model=List[PlatformConfigResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 58,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platforms = db.query(SocialMediaPlatformConfig).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 60,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 65,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[CredentialResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 71,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credentials = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 87,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_config = db.query(SocialMediaPlatformConfig).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 90,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 108,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Missing required fields: {', '.join(missing_fields)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 112,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{platform}\", response_model=CredentialResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 148,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credential = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 170,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credential = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 184,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_config = db.query(SocialMediaPlatformConfig).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 187,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 199,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Missing required fields: {', '.join(missing_fields)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 224,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credential = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 248,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credential = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 291,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{platform}/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 298,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credential = db.query(UserCredentials).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 78,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/current\", response_model=PlanInfo)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/usage\", response_model=UsageSummary)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 137,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/features/{feature}\", response_model=PlanFeatureCheck)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 180,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/quotas/{quota_type}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 220,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/available\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_management.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/admin/usage-stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/websockets.py",
      "line_number": 210,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_type = message.get(\"type\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/websockets.py",
      "line_number": 228,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "automation_id = message.get(\"automation_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/websockets.py",
      "line_number": 253,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ws/connections\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_id = result['metadata'].get('content_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 173,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(MemoryContent).filter(MemoryContent.id.in_(content_ids))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 177,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.content_type.in_(request.content_types))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 180,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.platform.in_(request.platforms))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 182,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 194,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "similarity_score = faiss_scores.get(item.id, 0.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 219,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "match_reason = \", \".join(match_reasons)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 235,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(MemoryContent)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 239,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.content_type.in_(request.content_types))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 242,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.platform.in_(request.platforms))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 244,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.relevance_score >= request.min_relevance)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 247,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = query.filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 249,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(MemoryContent.created_at.desc()).limit(request.limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[MemoryContentResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 288,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(MemoryContent)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 291,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.content_type == content_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 293,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 295,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(MemoryContent.performance_tier == performance_tier)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 297,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = query.order_by(MemoryContent.created_at.desc()).offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{content_id}\", response_model=MemoryContentResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 309,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 325,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 331,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "update_data = request.dict(exclude_unset=True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 350,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 360,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 368,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "all_content = db.query(MemoryContent).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 380,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_by_type[content_type] = content_by_type.get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 385,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_by_platform[platform] = content_by_platform.get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 389,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_by_performance[performance] = content_by_performance.get(performance, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 392,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "high_performing = db.query(MemoryContent).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 394,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(MemoryContent.engagement_score.desc()).limit(5).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 397,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_content = db.query(MemoryContent).order_by(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 399,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(5).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 427,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/tags/popular\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 436,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_with_tags = db.query(MemoryContent).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 438,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 444,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tag_counts[tag] = tag_counts.get(tag, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 465,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "source_content = db.query(MemoryContent).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 467,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 486,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result_content_id = result['metadata'].get('content_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 493,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(MemoryContent).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 495,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 614,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/vector-stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/memory_v2.py",
      "line_number": 625,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"status\": \"healthy\" if stats.get(\"total_vectors\", 0) > 0 else \"empty\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/database_health.py",
      "line_number": 16,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/database_health.py",
      "line_number": 65,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/schema/verify\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 97,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_content = db.query(Content).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 139,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "- Preferred platforms: {', '.join(user_context['preferred_platforms'])}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 393,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return fallbacks.get(suggestion_type, fallbacks[\"content\"])[:4]  # Limit to 4 suggestions",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 465,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/suggestion-types\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 85,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\", response_model=HealthStatus)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 95,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await db.execute(text(\"SELECT 1\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\", response_model=MetricsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 156,
      "query_type": "\\.execute\\(, SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await db.execute(text(\"SELECT count(*) FROM pg_stat_activity\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 161,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await db.execute(text(\"\"\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 256,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/prometheus\", response_class=PlainTextResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/traces/recent\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/config\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 363,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/alerting/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 392,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/alerting/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/observability.py",
      "line_number": 420,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/alerting/rules\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/feature_flags.py",
      "line_number": 6,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_stub.py",
      "line_number": 11,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_stub.py",
      "line_number": 21,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 119,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scheduled_at=result.get(\"scheduled_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "errors=result.get(\"errors\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 174,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/schedule\", response_model=KeyScheduleResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 202,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/keys/{key_type}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 272,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/report\", response_model=KeyRotationReportResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 303,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/procedures/documentation\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 332,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 351,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if details.get(\"status\") == \"no_keys\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 353,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif details.get(\"is_overdue\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 385,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/key-types\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 500,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/scheduler/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_monitoring.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_ratio = stats.get('compression_ratio', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_monitoring.py",
      "line_number": 93,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return dict(self.endpoint_stats.get(endpoint, {}))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_monitoring.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "accept_encoding = request.headers.get('accept-encoding', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_monitoring.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_encoding = response.headers.get('content-encoding')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_monitoring.py",
      "line_number": 318,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "compressed_responses = [m for m in recent_metrics if m.get('compressed_size')]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 24,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 32,
      "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status IN ('published', 'scheduled')\")).scalar() or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 33,
      "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "published_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status = 'published'\")).scalar() or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 34,
      "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scheduled_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status = 'scheduled'\")).scalar() or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 37,
      "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connected_platforms = db.execute(text(\"SELECT COUNT(*) FROM social_platform_connections\")).scalar() or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 79,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics/charts\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 99,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_engagement = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 108,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").join(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 128,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_posts = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 130,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentLog.published_at.desc()).limit(10).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 137,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "likes = engagement_data_dict.get('likes', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 138,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "shares = engagement_data_dict.get('shares', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comments = engagement_data_dict.get('comments', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/activity/recent\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 223,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_content = db.query(ContentLog).order_by(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 225,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 230,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = engagement_data.get('title', 'Untitled Post')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 127,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"updated_at\": user.user_settings.updated_at.isoformat() if user.user_settings.updated_at else None,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 146,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metrics = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 222,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = self.db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 224,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 310,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "executions = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 516,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/download/{export_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 648,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return \"\\\\n\".join(xml_lines)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 673,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status/{export_id}\", response_model=DataExportStatus)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 89,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 105,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"use_templates\": len(results.get('templates', [])) > 0,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"leverage_insights\": len(results.get('research_insights', [])) > 0,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 107,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"study_high_performers\": len(results.get('high_performing_examples', [])) > 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 135,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid memory type. Must be one of: {', '.join(valid_types)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 200,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if sync_results.get('remaining', 0) > 0:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/similar/{memory_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 251,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memory = db.query(Memory).filter(Memory.id == memory_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/vector_search.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "similar = [m for m in similar if m.get('id') != memory_id][:limit]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 77,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[WorkflowExecutionResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 94,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "executions = query.order_by(WorkflowExecution.started_at.desc()).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 98,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{execution_id}\", response_model=WorkflowExecutionResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 106,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "execution = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 124,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "execution = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 157,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "executions = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 174,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "status_counts[status] = status_counts.get(status, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "type_counts[workflow_type] = type_counts.get(workflow_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 186,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "running_executions = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 297,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "execution = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 299,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 374,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return stage_mapping.get(workflow_type, [\"processing\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 52,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/auth\", response_model=LinkedInAuthResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/callback\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 203,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"linkedin_id\": profile.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"expires_in\": token_data.get(\"expires_in\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"id\": profile.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"first_name\": profile.get(\"localizedFirstName\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 214,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_name\": profile.get(\"localizedLastName\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"profile_picture\": profile.get(\"profilePicture\", {}).get(\"displayImage\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 218,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"expires_in\": token_data.get(\"expires_in\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"scope\": token_data.get(\"scope\", \"\").split()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/profile\", response_model=LinkedInProfileResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 260,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "id=profile.get(\"id\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 261,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "first_name=profile.get(\"localizedFirstName\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 262,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "last_name=profile.get(\"localizedLastName\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "email=profile.get(\"elements\", [{}])[0].get(\"handle~\", {}).get(\"emailAddress\") if \"elements\" in profile else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 325,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 335,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"post_id\": result.get(\"post_id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 336,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"post_url\": result.get(\"post_url\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 341,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": result.get(\"error\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 342,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"guidance\": result.get(\"guidance\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 219,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 336,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[ContentResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 359,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentLog.content_type == content_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 361,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.order_by(ContentLog.created_at.desc()).offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/items\", response_model=List[dict])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 392,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentItem.content_type == content_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 394,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = query.order_by(ContentItem.created_at.desc()).offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 417,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{content_id}\", response_model=ContentResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 425,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 444,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 456,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "update_data = request.dict(exclude_unset=True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 482,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 521,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 548,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 564,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/scheduled/upcoming\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 581,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db_session.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 608,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/summary\", response_model=ContentAnalytics)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 624,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return db_session.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 648,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "posts_by_platform[platform] = posts_by_platform.get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 652,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "posts_by_status[status] = posts_by_status.get(status, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 661,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "likes = engagement_data.get('likes', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 662,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comments = engagement_data.get('comments', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 663,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "shares = engagement_data.get('shares', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 679,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "score = (engagement_data.get('likes', 0) +",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 680,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_data.get('comments', 0) * 2 +",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 681,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_data.get('shares', 0) * 3)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 723,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 724,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "generated_content = result.get(\"content\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 738,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": result.get(\"title\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 739,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"hashtags\": result.get(\"hashtags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 766,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": result.get(\"error\", \"Content generation failed\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 843,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "suggestions = suggestions.get(\"ideas\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 900,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "suggestions = platform_fallbacks.get(platform, platform_fallbacks[\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 952,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 955,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"image_base64\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1023,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_log = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1057,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_context=user_settings_dict.get('industry_type', '') if user_settings_dict else '',",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1064,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "image_history = engagement_data.get(\"image_history\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1207,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/upload-stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/session-info\", response_model=UserSessionInfo)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/middleware-stats\", response_model=MiddlewareStatsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 283,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"Redis connection required for distributed caching\" if not middleware_stats.get(\"redis_connected\", False) else \"\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 295,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/config\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous_stub.py",
      "line_number": 11,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/research/latest\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous_stub.py",
      "line_number": 20,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications_stub.py",
      "line_number": 11,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications_stub.py",
      "line_number": 20,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/unread\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 20,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dlq/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 77,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dlq/failures\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 175,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "task = db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dlq/analytics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 236,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "all_failures = db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 335,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "deleted_count = db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 363,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_failures = health_stats.get(\"total_failed_tasks\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_failures = health_stats.get(\"recent_failures_24h\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_monitoring.py",
      "line_number": 378,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "manual_review_required = health_stats.get(\"manual_review_required\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 96,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 151,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/research/latest\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_result = await redis_cache_service.get(\"autonomous\", \"research_latest\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if insights.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 172,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "insights_data = insights.get(\"insights\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 176,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"research_date\": insights.get(\"generated_at\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"trends\": insights_data.get(\"trending_topics\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/autonomous.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/industries\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 73,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.error(f\"Failed to send organization invitation email to {invitation.email}: {result.get('message')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 151,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[OrganizationResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 165,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "organization = db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 167,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 213,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_org = db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 215,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 237,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_owner_role = db.query(Role).filter(Role.name == 'org_owner').first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{organization_id}\", response_model=OrganizationResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 364,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Update organization settings",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 428,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{organization_id}/teams\", response_model=List[TeamResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 444,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "teams = db.query(Team).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 451,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "member_count = db.query(user_teams).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 496,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_team = db.query(Team).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 563,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_user = db.query(User).filter(User.email == invite_data.email).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 565,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_role = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 580,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_invitation = db.query(OrganizationInvitation).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 595,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "role = db.query(Role).filter(Role.name == invite_data.role).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 605,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "team = db.query(Team).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 665,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{organization_id}/invitations\", response_model=List[InvitationResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 681,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "invitations = db.query(OrganizationInvitation).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/organizations.py",
      "line_number": 689,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "team = db.query(Team).filter(Team.id == invitation.team_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/image_streaming.py",
      "line_number": 80,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stream-status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plans.py",
      "line_number": 53,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/available\", response_model=List[Dict[str, Any]])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plans.py",
      "line_number": 69,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/my-plan\", response_model=PlanFeatureResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plans.py",
      "line_number": 185,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/capabilities/{capability_name}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plans.py",
      "line_number": 234,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/limits\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[GoalResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 153,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(Goal.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 155,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goals = query.order_by(Goal.created_at.desc()).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 163,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{goal_id}\", response_model=GoalResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 171,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 193,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 205,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "update_data = request.dict(exclude_unset=True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 231,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 314,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 340,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 366,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 375,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(GoalProgress).filter(GoalProgress.goal_id == goal_id).delete()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 383,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{goal_id}/progress\", response_model=List[GoalProgressResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 393,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 401,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "progress_logs = db.query(GoalProgress).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 403,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(GoalProgress.recorded_at.desc()).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 407,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 494,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 514,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/progress-trends\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 528,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "progress_data = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 535,
      "query_type": "\\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").join(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 593,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/performance\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 681,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 712,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{goal_id}/milestones\", response_model=List[MilestoneResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 721,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 729,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "milestones = db.query(Milestone).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 731,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(Milestone.target_value).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 747,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 756,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "milestone = db.query(Milestone).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 759,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 794,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 803,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "milestone = db.query(Milestone).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 806,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 872,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goal = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 881,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "milestone = db.query(Milestone).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 884,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 897,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/widgets/upcoming-deadlines\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 910,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "upcoming_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 918,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "upcoming_milestones = db.query(Milestone).join(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 925,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(Milestone.target_date).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 955,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/widgets/recent-achievements\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 968,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "completed_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 975,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "achieved_milestones = db.query(Milestone).join(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1008,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/widgets/progress-alerts\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1018,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "at_risk_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1025,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "stagnant_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1032,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "overdue_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 25,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 56,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/idempotency/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 78,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "idempotency_stats = all_stats.get('idempotency_statistics', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"timestamp\": all_stats.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 104,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/delivery/stats\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 126,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "delivery_stats = all_stats.get('delivery_statistics', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"timestamp\": all_stats.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 230,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhook_reliability.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "health_info[\"last_stats_check\"] = stats.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 89,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if message.get(\"type\") == \"ping\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif message.get(\"type\") == \"mark_read\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 96,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notification_id = message.get(\"notification_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 128,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ws/stats\", response_model=WebSocketStats)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[NotificationResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 236,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(Notification.notification_type == notification_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 239,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(Notification.priority == priority)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 245,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notifications = query.offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 254,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/summary\", response_model=NotificationSummary)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 263,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 276,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "high_priority_count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 285,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_notifications = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 309,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notification = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 343,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notification = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 377,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "updated_count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 405,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notification = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 442,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 481,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/types\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_billing.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/plans\", response_model=AvailablePlansResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_billing.py",
      "line_number": 253,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/info\", response_model=BillingInfoResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_billing.py",
      "line_number": 299,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sig_header = request.headers.get(\"stripe-signature\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/plan_billing.py",
      "line_number": 366,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/assistant_chat.py",
      "line_number": 52,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "thread_id = thread_storage.get(chat_message.session_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/assistant_chat.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/chat/assistant/thread/{session_id}\", response_model=ThreadInfo)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/assistant_chat.py",
      "line_number": 134,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "thread_id = thread_storage.get(session_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/assistant_chat.py",
      "line_number": 157,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/chat/assistant/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 124,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_user = db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 126,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 152,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_count = db.query(User).count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 157,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%free%')).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 159,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%starter%')).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 161,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%basic%')).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 273,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 275,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 312,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 359,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 404,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 406,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 441,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 531,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "refresh_token = request.cookies.get(\"refresh_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 535,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 598,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if payload.get(\"type\") != \"refresh\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 654,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/me\", response_model=TokenResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 663,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow.py",
      "line_number": 7,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow.py",
      "line_number": 37,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow.py",
      "line_number": 53,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stages\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/workflow.py",
      "line_number": 67,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/errors\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 69,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/meta\", response_class=PlainTextResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 173,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get(\"X-Hub-Signature-256\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 198,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"object\": payload.get(\"object\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_count\": len(payload.get(\"entry\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/facebook\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Hub-Signature-256')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 291,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/instagram\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 321,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Hub-Signature-256')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 352,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/twitter/crc\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 381,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 443,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 494,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 559,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recent_deliveries_24h\": reliability_stats.get('delivery_statistics', {}).get('recent_deliveries_24h', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 560,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"success_rate_24h_percent\": reliability_stats.get('delivery_statistics', {}).get('success_rate_24h_percent', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 561,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"pending_retries\": reliability_stats.get('delivery_statistics', {}).get('pending_retries', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 562,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"duplicates_prevented_24h\": reliability_stats.get('idempotency_statistics', {}).get('duplicates_prevented_24h', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 564,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reliability_status[\"last_updated\"] = reliability_stats.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/simple_workflow.py",
      "line_number": 51,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/simple_workflow.py",
      "line_number": 62,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/simple_workflow.py",
      "line_number": 76,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/stages\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 77,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\", response_model=PerformanceMetricsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 104,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analysis\", response_model=PerformanceAnalysisResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/slow-queries\", response_model=PaginatedResponse[SlowQueryResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/cache/stats\", response_model=CacheStatsResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/endpoints\", response_model=PaginatedResponse[EndpointPerformanceResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance.py",
      "line_number": 315,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/multi_tenant.py",
      "line_number": 113,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/\", response_model=List[OrganizationResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/multi_tenant.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{organization_id}/members\", response_model=List[OrganizationMemberResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/multi_tenant.py",
      "line_number": 232,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/{organization_id}/permissions/{permission}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/multi_tenant.py",
      "line_number": 283,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = db.execute(query).fetchall()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/multi_tenant.py",
      "line_number": 325,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = db.execute(query).fetchall()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 63,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/policies\", response_model=Dict[str, RetentionPolicyResponse])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/policies/{category}\", response_model=RetentionPolicyResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/expired-data\", response_model=Dict[str, Dict[str, int]])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 247,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_deleted = cleanup_results.get(\"total_deleted\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 254,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "deleted_counts=cleanup_results.get(\"deleted_counts\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 256,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "errors=cleanup_results.get(\"errors\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expired_counts=cleanup_results.get(\"expired_counts\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 272,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/report\", response_model=RetentionReportResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 304,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/categories\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/data_retention.py",
      "line_number": 424,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 45,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'apm': apm_summary.get('health_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 46,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'database': 100 if db_health.get('database_connected') else 0,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 47,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'cache': 100 if cache_stats.get('redis_connected') else 80,  # 80 if fallback works",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 48,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'errors': max(0, 100 - error_analysis.get('total_errors', 0))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 68,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'active_alerts': apm_summary.get('active_alerts', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 69,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'critical_alerts': apm_summary.get('critical_alerts', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 70,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_errors': error_analysis.get('total_errors', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 71,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'cache_hit_ratio': cache_stats.get('hit_ratio', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 72,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'database_response_time': db_health.get('query_response_time', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 73,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'active_connections': db_health.get('connection_pool_status', {}).get('checked_out', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "severity = alert.get('severity', 'info')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'status': 'healthy' if db_health.get('database_connected') else 'unhealthy',",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'response_time': db_health.get('query_response_time', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'status': cache_health.get('status', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'redis_connected': cache_health.get('redis_connected', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 171,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'hit_ratio': cache_health.get('hit_ratio', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 175,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'status': 'healthy' if pool_health.get('total_pools', 0) > 0 else 'unhealthy',",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 176,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_pools': pool_health.get('total_pools', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 180,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'status': error_health.get('status', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 181,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'health_score': error_health.get('health_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db_response_time = db_health.get('query_response_time', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cache_connected = cache_health.get('redis_connected', False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'health_score': performance_summary.get('health_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'cache_hit_ratio': current_metrics.get('application', {}).get('cache_hit_ratio', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'critical_count': len([a for a in active_alerts if a.get('severity') == 'critical'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/overview\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 312,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 325,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/alerts\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 336,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/infrastructure\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 347,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/platforms\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 358,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/realtime\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 390,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/performance_dashboard.py",
      "line_number": 429,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@dashboard_router.get(\"/config\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/connect/{platform}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 128,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"limits\": enforcement_result.get(\"limits\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 175,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/callback/{platform}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 255,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 300,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform_username\": user_info.get(\"username\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 310,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "username = user_info.get(\"username\", user_info.get(\"display_name\", \"\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 342,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/connections\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 363,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "base_query = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 399,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/connections/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 408,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 440,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 487,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 536,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection.last_error = validation_result.get(\"error\", \"Validation failed\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 585,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 717,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/posts\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 738,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(SocialPost).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 747,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 753,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics/{platform}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 770,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 787,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "followers_count=platform_metadata.get(\"followers_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 788,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "following_count=platform_metadata.get(\"following_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 789,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "posts_count=platform_metadata.get(\"media_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 794,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/overview\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 810,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 827,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"followers\": metadata.get(\"followers_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics_simple.py",
      "line_number": 8,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/ai-features\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/diagnostics_simple.py",
      "line_number": 41,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/industry-research\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/metrics_stub.py",
      "line_number": 15,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/metrics_stub.py",
      "line_number": 25,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "twitter_connected = bool(twitter_status.get(\"connected\", False))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/metrics_stub.py",
      "line_number": 26,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "twitter_username = str(twitter_status.get(\"username\", \"Not connected\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring_metrics.py",
      "line_number": 38,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\", response_model=MonitoringHealthResponse)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring_metrics.py",
      "line_number": 60,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/monitoring_metrics.py",
      "line_number": 153,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status/{industry}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if status.get(\"status\") == \"not_configured\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 179,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/status\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"status\") == \"error\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 220,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise HTTPException(status_code=400, detail=result.get(\"message\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/execute/{industry}/result/{task_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 332,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if r.get(\"metadata\", {}).get(\"industry\") == query_request.industry_filter",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 382,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/knowledge-base/recent/{industry}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 431,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/content-opportunities/{industry}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 460,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if opp.get(\"urgency\", \"\").lower() == urgency.lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 473,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"high\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"high\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 474,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"medium\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"medium\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 475,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"low\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"low\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 489,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/analytics/{industry}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 504,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if status.get(\"status\") == \"not_configured\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 513,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"research_runs\": status.get(\"total_research_runs\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 514,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"average_findings_per_run\": status.get(\"average_findings_per_run\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 515,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_performance\": status.get(\"last_performance_metrics\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 533,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if status.get(\"last_performance_metrics\", {}).get(\"confidence_score\", 1) < 0.7:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 555,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/access-summary\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 578,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 590,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "health_data = health_result.get(timeout=10)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 649,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/topics/{industry}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 662,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if status.get(\"status\") == \"not_configured\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 678,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"topics\": config.get(\"research_topics\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 679,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_topics\": len(config.get(\"research_topics\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/deep_research.py",
      "line_number": 680,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_updated\": config.get(\"created_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 52,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard/overview\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 97,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/slos\", response_model=List[ServiceLevelObjective])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 111,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/error-budget/{slo_name}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 132,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/incidents\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 236,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/runbooks\", response_model=Dict[str, Any])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 316,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/runbooks/executions/{execution_id}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 354,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/prometheus/metrics\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 369,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/capacity-planning\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 388,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/performance-trends\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 424,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mean_time_to_recovery=alert_metrics.get(\"mean_time_to_resolve\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 425,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mean_time_to_detection=alert_metrics.get(\"mean_time_to_acknowledge\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 477,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "severity_breakdown[severity] = severity_breakdown.get(severity, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 480,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_incidents=alert_metrics.get(\"alerts_last_24h\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 482,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "incidents_this_month=alert_metrics.get(\"alerts_last_24h\", 0) * 30,  # Rough estimate",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/sre_dashboard.py",
      "line_number": 483,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avg_resolution_time_hours=(alert_metrics.get(\"mean_time_to_resolve\", 0) / 60),  # Convert from minutes",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_fastapi_users.py",
      "line_number": 68,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/me\", response_model=UserRead)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/auth_fastapi_users.py",
      "line_number": 78,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/check\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 62,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if v and info.data.get('start_date') and v < info.data['start_date']:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 77,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise ValidationError(f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 84,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise ValidationError(f\"Invalid content type. Must be one of: {', '.join(valid_types)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 91,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise ValidationError(f\"Invalid goal type. Must be one of: {', '.join(valid_types)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 98,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise ValidationError(f\"Invalid workflow type. Must be one of: {', '.join(valid_types)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 107,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sanitized = ' '.join(text.split())",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 136,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = ' '.join(text.split())",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_length = request.headers.get('content-length')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 438,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'user_agent': request.headers.get('user-agent'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 439,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'referer': request.headers.get('referer'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'forwarded_for': request.headers.get('x-forwarded-for'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 441,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'real_ip': request.headers.get('x-real-ip')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/api/validation.py",
      "line_number": 470,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise ValidationError(f\"File type '{detected_type}' not allowed. Allowed types: {', '.join(allowed_types)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 167,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "price_id = self.STRIPE_PRICE_IDS.get(tier)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 255,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 261,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = subscription.get(\"metadata\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 262,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tier = metadata.get(\"tier\", SubscriptionTier.BASIC.value)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 271,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_period_end = subscription.get(\"current_period_end\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 305,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 314,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_period_end = subscription.get(\"current_period_end\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 341,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 363,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "subscription_id = invoice.get(\"subscription\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 368,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if invoice.get(\"period_end\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 392,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 575,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users_to_remind = self.db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 581,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 632,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users_to_notify = self.db.query(User).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/stripe_service.py",
      "line_number": 638,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/avoid_list_processor.py",
      "line_number": 313,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "pattern = self.compiled_patterns.get(rule.pattern)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/avoid_list_processor.py",
      "line_number": 353,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "guidance = f\"ensure {rule.replacement_text} instead of {', '.join(matches)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/avoid_list_processor.py",
      "line_number": 441,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "score_penalty += violation_weights.get(violation[\"severity\"], -5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 203,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.retention_policies.get(category)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 281,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "models = model_mappings.get(category, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 285,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "count = db.query(model_class).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 340,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cleanup_function = cleanup_functions.get(category)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 366,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_logs = db.query(ContentLog).filter(ContentLog.created_at < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 372,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "drafts = db.query(ContentDraft).filter(ContentDraft.created_at < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 378,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedules = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 389,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(ContentItem.created_at < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 401,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metrics = db.query(Metric).filter(Metric.date_recorded < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 407,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "perf_snapshots = db.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 415,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_snapshots = db.query(PlatformMetricsSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 429,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "memories = db.query(Memory).filter(Memory.created_at < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 435,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ai_content = db.query(Content).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 452,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_posts = db.query(SocialPost).filter(SocialPost.created_at < cutoff_date)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 458,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_interactions = db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 466,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "inactive_connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 482,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflow_executions = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 495,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notifications = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 508,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "research_data = db.query(ResearchData).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/data_retention_service.py",
      "line_number": 522,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "blacklisted_tokens = db.query(RefreshTokenBlacklist).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 175,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return tier_mapping.get(tier_lower, SubscriptionTier.BASIC)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 198,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org = self.db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 200,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 228,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org = self.db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 230,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 259,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return feature in TIER_FEATURES.get(tier, set())",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 290,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tier_limits = TIER_LIMITS.get(tier, TIER_LIMITS[SubscriptionTier.BASIC])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 291,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "limit = tier_limits.get(limit_type, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return TIER_LIMITS.get(tier, TIER_LIMITS[SubscriptionTier.BASIC])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return TIER_FEATURES.get(tier, TIER_FEATURES[SubscriptionTier.BASIC])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 372,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org = self.db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 375,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 157,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"available_models\": self.plan_model_access.get(plan_name, [\"grok2_basic\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 181,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if features_result.get(\"modified_options\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enable_post_processing = features_result.get(\"enable_post_processing\", enable_post_processing)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 184,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "generate_alt_text = features_result.get(\"generate_alt_text\", generate_alt_text)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 202,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if generation_result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 240,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"available_models\": self.plan_model_access.get(plan_name, [\"grok2_basic\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 241,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"max_quality\": self.plan_quality_mapping.get(plan_name, \"draft\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 260,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan_max_quality = self.plan_quality_mapping.get(plan_name, \"draft\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "requested_level = quality_levels.get(requested_quality, 1)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_level = quality_levels.get(plan_max_quality, 1)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "available_models = self.plan_model_access.get(plan_name, [\"grok2_basic\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_image_service.py",
      "line_number": 370,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return upgrade_map.get(current_plan, [\"starter\", \"pro\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 95,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "entries = payload.get(\"entry\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 102,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_id\": entry.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_time\": entry.get(\"time\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "success = result.get(\"success\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_id\": entry.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_time\": entry.get(\"time\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for change in entry.get(\"changes\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"field\": change.get(\"field\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 287,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"change_time\": change.get(\"time\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"value\": change.get(\"value\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 293,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for message in entry.get(\"messaging\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 295,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"sender\": message.get(\"sender\", {}).get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 296,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recipient\": message.get(\"recipient\", {}).get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"timestamp\": message.get(\"timestamp\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message\": message.get(\"message\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 299,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"postback\": message.get(\"postback\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 300,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"delivery\": message.get(\"delivery\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_webhook_service.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"read\": message.get(\"read\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "char_limit = config.character_limits.get('text', config.character_limits.get('post', 280))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 203,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_score = config.content_type_preferences.get(content_type, 1.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 225,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 229,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_hashtags = config.hashtag_limits.get('max_hashtags', 10)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 230,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_hashtags = config.hashtag_limits.get('optimal_hashtags', 5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if user_performance.get('best_performing_hours'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 401,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(ContentItem, ContentPerformanceSnapshot)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 402,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".join(ContentPerformanceSnapshot)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 461,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return frequency_map.get(platform, {'min': 1, 'max': 3, 'optimal': 1})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 504,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_strategy = hashtag_strategies.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 505,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 518,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "trending = platform_strategy.get('trending_hashtags', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 523,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "niche_hashtags = platform_strategy.get('niche_hashtags', {}).get(niche, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 530,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_hashtags = config.hashtag_limits.get('max_hashtags', 10)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 531,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_hashtags = config.hashtag_limits.get('optimal_hashtags', 5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 582,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_benchmarks = benchmarks.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 587,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 390,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_news=insights.get('recent_news', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 391,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "company_culture=insights.get('company_culture', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 392,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "market_position=insights.get('market_position', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 393,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "competitive_advantages=insights.get('competitive_advantages', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 394,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "customer_pain_points=insights.get('customer_pain_points', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 395,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_themes=insights.get('content_themes', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 396,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "social_presence=insights.get('social_presence', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 578,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "{chr(10).join([f\"- {news.title}: {news.snippet}\" for news in web_data.recent_news[:3]])}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 624,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_news=insights.get('recent_news', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 625,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "company_culture=insights.get('company_culture', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 626,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "market_position=insights.get('market_position', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 627,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "competitive_advantages=insights.get('competitive_advantages', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 628,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "customer_pain_points=insights.get('customer_pain_points', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 629,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_themes=insights.get('content_themes', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 630,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "social_presence=insights.get('social_presence', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 716,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return audience_mapping.get(industry, 'Business professionals and industry stakeholders')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 728,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text_content = web_data.description + \" \" + \" \".join([news.snippet for news in web_data.recent_news])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/deep_company_research_service.py",
      "line_number": 755,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return theme_mapping.get(industry, ['industry innovation', 'business growth', 'customer success', 'market insights'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 45,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "active_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 165,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(ContentPerformanceSnapshot).join(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 176,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 192,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 199,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 224,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "social_accounts = user.preferences.get('social_accounts', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 225,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_auth = social_accounts.get(goal.platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 232,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token=platform_auth.get('access_token'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token_secret=platform_auth.get('access_token_secret')  # For Twitter",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 238,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return float(metrics.get('followers_count', 0))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "field = metric_source.get('field')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "aggregation = metric_source.get('aggregation', 'sum')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 271,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(ContentPerformanceSnapshot).join(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 279,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = query.with_entities(func.sum(getattr(ContentPerformanceSnapshot, field))).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 281,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = query.with_entities(func.avg(getattr(ContentPerformanceSnapshot, field))).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 283,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = query.with_entities(func.max(getattr(ContentPerformanceSnapshot, field))).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "progress_range = goal.target_value - (goal.metadata.get('initial_value', 0) if goal.metadata else 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 315,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actual_progress = goal.current_value - (goal.metadata.get('initial_value', 0) if goal.metadata else 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 325,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/advanced_quality_scorer.py",
      "line_number": 156,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "weights = self.platform_weights.get(platform, self.platform_weights['default'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/advanced_quality_scorer.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "prefs = platform_preferences.get(platform, platform_preferences['instagram'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/advanced_quality_scorer.py",
      "line_number": 499,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tip = platform_tips.get(platform, \"Optimize aspect ratio and resolution for target platform\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 65,
      "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_roles = self.db.execute(text(\"SELECT COUNT(*) FROM roles\")).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 75,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(3, 'admin', 'admin', 'Administrative access within organization', ARRAY['users.create', 'users.read', 'users.update', 'teams.read', 'teams.update', 'content.*', 'social_accounts.*', 'analytics.read', 'settings.*'], true, NOW()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 77,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(5, 'member', 'member', 'Standard user access', ARRAY['users.read', 'teams.read', 'content.create', 'content.read', 'content.update', 'social_accounts.connect', 'social_accounts.read', 'analytics.read', 'settings.read'], true, NOW()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 80,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.db.execute(roles_sql)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 85,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO permissions (id, public_id, name, description, resource, action, created_at) VALUES",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 92,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(7, 'organizations_update', 'organizations.update', 'Update organization settings', 'organizations', 'update', NOW()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 96,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(11, 'teams_update', 'teams.update', 'Update team settings', 'teams', 'update', NOW()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 108,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(23, 'settings_update', 'settings.update', 'Update organization/team settings', 'settings', 'update', NOW())",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 110,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.db.execute(permissions_sql)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 151,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 152,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text(\"SELECT id FROM organizations WHERE slug = :slug\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 154,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 161,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO organizations (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 173,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(org_sql, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 182,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 191,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO teams (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 201,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "team_result = self.db.execute(team_sql, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 205,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 209,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO user_organization_roles (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 214,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(SELECT id FROM roles WHERE name = 'org_owner'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 219,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.db.execute(user_role_sql, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 328,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 333,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 405,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "role_query = text(\"SELECT id FROM roles WHERE name = :role_name\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 406,
      "query_type": "\\.execute\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "role_result = self.db.execute(role_query, {\"role_name\": role_name}).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 416,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO user_organization_roles (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 424,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "DO UPDATE SET",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 432,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.db.execute(upsert_sql, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 461,
      "query_type": "DELETE.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "DELETE FROM organization_invitations",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 466,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(cleanup_sql, {\"days\": older_than_days})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 67,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url = result.get('link', result.get('url', ''))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'title': item.get('title', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 100,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'snippet': item.get('snippet', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 101,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'link': item.get('url', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'date': item.get('date', date_filter),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 183,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "news_context = \"\\n\\n\".join([",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 186,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"SOURCE: {item.get('source', 'Unknown')}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/ai_insights_service.py",
      "line_number": 247,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"data_sources\": [item.get('source', 'Unknown') for item in news_results[:5]]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 242,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(WebhookIdempotencyRecord).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 244,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 341,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tracker = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 343,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 467,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ready_for_retry = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 471,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 558,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expired_idempotency = db.query(WebhookIdempotencyRecord).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 563,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_delivered = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 569,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_abandoned = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 616,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "status_stats = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 619,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").group_by(WebhookDeliveryTracker.delivery_status).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 622,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_deliveries = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 626,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_failures = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 635,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_idempotency_records = db.query(WebhookIdempotencyRecord).count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 637,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "duplicate_prevention_24h = db.query(WebhookIdempotencyRecord).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 643,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avg_processing_time = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 645,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar() or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 648,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "pending_retries = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_reliability_service.py",
      "line_number": 653,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_abandoned = db.query(WebhookDeliveryTracker).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 55,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query_map.get(category, \"trending topics today\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 76,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for i, result in enumerate(data.get('organic', [])[:count]):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 78,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'topic': result.get('title', '').replace(' - ', ' ').split(' | ')[0],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 79,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'description': result.get('snippet', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 80,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 81,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': result.get('link', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "top_queries = related_queries[keyword].get('top')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 203,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "organic_count = len(data.get('organic', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "news_count = len(data.get('news', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 259,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'news_mentions': len(data.get('news', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 260,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_results': len(data.get('organic', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 264,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in data.get('organic', [])[:3]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = result.get('title', '').lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 266,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = result.get('snippet', '').lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 398,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in data.get('organic', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 399,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = result.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 405,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_trends_service.py",
      "line_number": 407,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': result.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 116,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "available_platforms = self.plan_platform_access.get(plan_name, [\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"available\": self.plan_platform_access.get(plan_name, [\"twitter\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 166,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"features\": self.plan_features.get(plan_name, self.plan_features[\"free\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 267,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 285,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 316,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 348,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return upgrade_map.get(current_plan, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 365,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return benefits.get(current_plan, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service_production.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metrics = result['metadata'].get('performance_metrics', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service_production.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_rate = metrics.get('engagement_rate', 3.0)  # Default to 3% if no data",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service_production.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get('content_id') == content_id:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/industry_classification_service.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_data = INDUSTRY_RESEARCH_MAPPING.get(industry_code, INDUSTRY_RESEARCH_MAPPING[\"general\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/industry_classification_service.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_data = INDUSTRY_RESEARCH_MAPPING.get(industry_code, INDUSTRY_RESEARCH_MAPPING[\"general\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 105,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "secret = self.platform_secrets.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 173,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "handlers = self.event_handlers.get(event.event_type, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 255,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if value.get('verb') == 'add':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif value.get('verb') == 'remove':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 293,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mapped_event_type = event_type_map.get(linkedin_event_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 318,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mapped_event_type = event_type_map.get(tiktok_event_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 401,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 404,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 479,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 482,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 491,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content.like_count = metrics.get('like_count', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 492,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content.share_count = metrics.get('retweet_count', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 493,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content.comment_count = metrics.get('reply_count', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 494,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content.view_count = metrics.get('impression_count', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 508,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 511,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 517,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "like_count=event.data.get('like_count', content.like_count),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 518,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "share_count=event.data.get('share_count', content.share_count),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 519,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comment_count=event.data.get('comment_count', content.comment_count),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 520,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "view_count=event.data.get('view_count', content.view_count),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 521,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_rate=event.data.get('engagement_rate', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 568,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('x-twitter-webhooks-signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 570,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('x-hub-signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 572,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature = request.headers.get('x-li-signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 182,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "unread_count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 326,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "notification = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 354,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "updated_count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 394,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(Notification.notification_type.in_(type_values))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 398,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").offset(offset).limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 409,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_notifications = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 423,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "count = db.query(Notification).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 582,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return content_templates.get(milestone_type, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 173,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result_metadata = result.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 174,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if content_type and result_metadata.get('type') != content_type:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 176,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if platform and result_metadata.get('platform') != platform:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 218,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_id = basic_result.get('content_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = basic_result.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tags = metadata.get('tags', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 231,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_log = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 232,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ContentLog.content.contains(basic_result.get('content', '')[:100])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 233,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_rate = engagement_metrics.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_id, basic_result.get('content', ''), db",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at_str = basic_result.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content=basic_result.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 270,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "similarity_score=basic_result.get('similarity_score', 0.0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 271,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type=metadata.get('type', 'content'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 272,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform=metadata.get('platform'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 306,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "similarity_score = result.get('similarity_score', 0.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 310,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_rate = engagement_metrics.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at_str = result.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 336,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type = metadata.get('type', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tags = metadata.get('tags', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 388,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "related_id = item.get('content_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 489,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': item.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 490,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': item.get('content'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 492,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': item.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 493,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': item.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 595,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if similarity_results and similarity_results[0].content_id == item.get('content_id'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 598,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': item.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 599,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': item.get('content'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 601,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': item.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 602,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': item.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 754,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return timing_data.get(platform, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 772,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_config = self.platform_adaptations.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 773,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtag_limit = platform_config.get(\"hashtag_limit\", 5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/similarity_service.py",
      "line_number": 794,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "base_hashtags.extend(platform_hashtags.get(platform, []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publish_runner.py",
      "line_number": 88,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "retry_after = cb_state.get('remaining_cooldown_s', 120)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publish_runner.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"duration:{metrics.get('duration_s', 0):.2f}s\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "handlers = self.recovery_handlers.get(error_info.error_type, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "fallback = self.fallback_handlers.get(operation)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 407,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.execute(\"SELECT 1\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 437,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reset_time = context.get('rate_limit_reset', 60)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 470,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "async with session.get('https://httpbin.org/status/200', timeout=10) as response:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_recovery_service.py",
      "line_number": 569,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for error_type, data in analysis.get('error_types', {}).items():",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/file_upload_service.py",
      "line_number": 106,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "detail=f\"File type not allowed. Allowed types: {', '.join(self.allowed_extensions)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/file_upload_service.py",
      "line_number": 110,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expected_mime = allowed_mime_types.get(file_ext)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/file_upload_service.py",
      "line_number": 174,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "safe_name = ''.join(c for c in original_filename if c.isalnum() or c in '._-')[:50]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/file_upload_service.py",
      "line_number": 338,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "topic_category=ai_result.get(\"topic_category\", \"general\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "confidence=float(ai_result.get(\"confidence\", 0.5)),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 214,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sentiment=ai_result.get(\"sentiment\", \"neutral\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tone=ai_result.get(\"tone\", \"conversational\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reading_level=ai_result.get(\"reading_level\", \"intermediate\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 217,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keywords=ai_result.get(\"keywords\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 289,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "word_freq[word] = word_freq.get(word, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 319,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_rules = self.platform_rules.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 322,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_length = platform_rules.get(\"max_length\", 10000)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtag_limit = platform_rules.get(\"hashtag_limit\", 10)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 443,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "category_score = category_scores.get(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 445,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").get(platform, base_score)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 453,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sentiment_boost = sentiment_multiplier.get(category_result.sentiment, 1.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 463,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tone_boost = tone_multiplier.get(category_result.tone, 1.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 468,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_rules = self.platform_rules.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_hashtags = platform_rules.get(\"hashtag_limit\", 5) // 2",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 479,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "historical_avg = historical_data.get(category_result.topic_category, base_score)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 575,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "category_counts[category] = category_counts.get(category, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 581,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sentiment_counts[sentiment] = sentiment_counts.get(sentiment, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_categorization.py",
      "line_number": 591,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tone_counts[tone] = tone_counts.get(tone, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 133,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"next_run\": schedule_result.get(\"next_run\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 153,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hour=schedule_config.get(\"hour\", 2),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 154,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "minute=schedule_config.get(\"minute\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 155,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "day_of_week=schedule_config.get(\"day_of_week\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "days_ahead = schedule_config.get(\"day_of_week\", 0) - now.weekday()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hour=schedule_config.get(\"hour\", 2),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 190,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "minute=schedule_config.get(\"minute\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 321,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_avg = config.get(\"average_findings_per_run\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 394,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if opp.get(\"urgency\") == \"high\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 400,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if trend.get(\"impact_level\") == \"high\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 452,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"status\": config.get(\"status\", \"unknown\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 453,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_research_runs\": config.get(\"total_research_runs\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 454,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_research\": config.get(\"last_research\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 455,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"average_findings_per_run\": config.get(\"average_findings_per_run\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 456,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"schedule\": config.get(\"schedule\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 458,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"last_performance_metrics\": config.get(\"last_performance_metrics\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_scheduler.py",
      "line_number": 491,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"next_run\": schedule_result.get(\"next_run\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 35,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": item.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 36,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"url\": item.get(\"url\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 37,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"snippet\": item.get(\"snippet\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 38,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"date\": item.get(\"date\", datetime.now().strftime('%Y-%m-%d'))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 86,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=d.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 87,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url=d.get(\"url\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 88,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet=d.get(\"snippet\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_search_utils.py",
      "line_number": 89,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "date=d.get(\"date\", datetime.now().strftime('%Y-%m-%d')),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "client = self.platform_clients.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 445,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = await session.get(ContentItem, metrics.content_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 499,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = session.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 505,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentPerformanceSnapshot.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 507,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = await query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 561,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = session.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 567,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentPerformanceSnapshot.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 569,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = await query.order_by(ContentPerformanceSnapshot.viral_score.desc()).limit(50).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection_service.py",
      "line_number": 573,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = await session.get(ContentItem, snapshot.content_item_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 48,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 52,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "pages_data = data.get(\"data\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 64,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"has_instagram\": bool(page_data.get(\"instagram_business_account\")),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 65,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"token_available\": bool(page_data.get(\"access_token\")),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 70,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "ig_account = page_data.get(\"instagram_business_account\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 75,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_data.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 122,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 126,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return data.get(\"username\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 159,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 163,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_token = data.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_name = data.get(\"name\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 220,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return data.get(\"username\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 245,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"page_id\": data.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 252,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"page_name\": data.get(\"name\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/meta_page_token_service.py",
      "line_number": 253,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"permissions\": data.get(\"permissions\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alerting_service.py",
      "line_number": 71,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for group_config in config.get('groups', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alerting_service.py",
      "line_number": 73,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for rule_config in group_config.get('rules', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alerting_service.py",
      "line_number": 77,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "duration=rule_config.get('for', '0s'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alerting_service.py",
      "line_number": 131,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "team_counts[rule.team] = team_counts.get(rule.team, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alerting_service.py",
      "line_number": 290,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return policies.get(escalation_level, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 634,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.taxonomy_map.get(error_code)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "threshold = ModerationCategories.OPENAI_CATEGORIES.get(category, {}).get('threshold', 0.5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 258,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'message': f'Content flagged by OpenAI moderation: {\", \".join(flagged_categories.keys())}'",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 346,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "threshold = thresholds.get(category, 0.5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 356,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'message': f'Content flagged by pattern matching: {\", \".join(flagged_patterns.keys())}'",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 469,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "final_message = '; '.join(all_messages)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_moderation_service.py",
      "line_number": 507,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'processing_time_ms': result.get('processing_time_ms', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_decorators.py",
      "line_number": 93,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_result = await redis_cache.get(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_decorators.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "operations = common_operations.get(platform, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 385,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 394,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for article in news_data.get(\"articles\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 398,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_id=article.get(\"url\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 399,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=article.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 400,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content=article.get(\"description\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 401,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author=article.get(\"author\", \"Unknown\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 403,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "article.get(\"publishedAt\", \"\").replace(\"Z\", \"+00:00\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 405,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url=article.get(\"url\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 409,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_urls=[article.get(\"urlToImage\")] if article.get(\"urlToImage\") else []",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation.py",
      "line_number": 609,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "all_content = \" \".join([r.title + \" \" + r.content for r in results])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 238,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET statement_timeout = '30s'\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 239,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET lock_timeout = '10s'\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 240,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET idle_in_transaction_session_timeout = '60s'\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 243,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET work_mem = '16MB'\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 244,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET maintenance_work_mem = '64MB'\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 247,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET tcp_keepalives_idle = 600\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 248,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET tcp_keepalives_interval = 30\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 249,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET tcp_keepalives_count = 3\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 259,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET SESSION max_execution_time = 30000\")  # 30 seconds",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 260,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET SESSION innodb_lock_wait_timeout = 10\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 263,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET SESSION sort_buffer_size = 2097152\")  # 2MB",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 264,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET SESSION join_buffer_size = 262144\")   # 256KB",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 267,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 278,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA journal_mode=WAL\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 279,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA synchronous=NORMAL\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 280,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA cache_size=10000\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 281,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA temp_store=MEMORY\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 282,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA mmap_size=268435456\")  # 256MB",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 285,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA optimize\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 288,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cursor.execute(\"PRAGMA foreign_keys=ON\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 364,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = conn.execute(text(\"SELECT 1\")).fetchone()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 494,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"health\": health[\"pools\"].get(pool_name, {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_pool_manager.py",
      "line_number": 496,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": recommendations.get(pool_name, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 34,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token = tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 50,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params, headers=headers)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 54,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_data = data.get(\"data\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 70,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verified\": user_data.get(\"verified\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 71,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"created_at\": user_data.get(\"created_at\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 72,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"public_metrics\": user_data.get(\"public_metrics\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_detail = error_data.get(\"detail\", f\"X API error: {e.response.status_code}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 123,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"expires_at\": tokens.get(\"expires_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scope_string = tokens.get(\"scope\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verified\": user_data.get(\"verified\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"created_at\": user_data.get(\"created_at\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"followers_count\": user_data.get(\"public_metrics\", {}).get(\"followers_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 171,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"following_count\": user_data.get(\"public_metrics\", {}).get(\"following_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 172,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"tweet_count\": user_data.get(\"public_metrics\", {}).get(\"tweet_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 41,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.db.execute(text(\"CREATE EXTENSION IF NOT EXISTS vector;\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 81,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO content_embeddings (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 90,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 126,
      "query_type": "INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "INSERT INTO memory_embeddings (",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 135,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 181,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 243,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query, params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 268,
      "query_type": "DELETE.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "DELETE FROM content_embeddings",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 294,
      "query_type": "DELETE.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "DELETE FROM memory_embeddings",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 320,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "SELECT COUNT(*) as count FROM content_embeddings",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 318,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_prompt += f\". Quality requirements: {', '.join(quality_boosters[:3])}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 323,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_prompt += f\". Platform optimization: {', '.join(platform_boosters)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 333,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_prompt += f\". Technical specs: {', '.join(technical_specs[:2])}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 400,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_type = user_settings.get(\"industry_type\", \"general\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 406,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "visual_style = user_settings.get(\"visual_style\", \"modern\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 419,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "primary_color = user_settings.get(\"primary_color\", \"#3b82f6\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 420,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "secondary_color = user_settings.get(\"secondary_color\", \"#10b981\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 428,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "brand_keywords = user_settings.get(\"brand_keywords\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 430,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keywords_str = \", \".join(brand_keywords[:3])  # Limit to 3 most important",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 434,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "image_mood = user_settings.get(\"image_mood\", [\"professional\", \"clean\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 436,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mood_str = \", \".join(image_mood)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avoid_list = user_settings.get(\"avoid_list\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 442,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avoid_str = \", \".join(avoid_list[:5])  # Limit to prevent prompt bloat",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 446,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "preferred_style = user_settings.get(\"preferred_image_style\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 448,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "lighting = preferred_style.get(\"lighting\", \"natural\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 449,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "composition = preferred_style.get(\"composition\", \"rule_of_thirds\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 450,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "color_temp = preferred_style.get(\"color_temperature\", \"neutral\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 454,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quality = user_settings.get(\"image_quality\", \"high\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 461,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_prompt += f\" Quality: {quality_specs.get(quality, 'high resolution, professional quality')}.\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 611,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": brand_safety_result.get('recommendations', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 615,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "preset_config = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 620,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"size\": preset_config.get(\"size\", \"1024x1024\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 621,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"quality\": preset_config.get(\"quality\", \"standard\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 651,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "img_response = await client.get(image_data.url)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 694,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "legacy_quality_score = quality_metrics.get(\"overall_score\", 50)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 697,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"issues\": quality_metrics.get(\"recommendations\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 698,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": quality_metrics.get(\"recommendations\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 704,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"error\" in quality_metrics or quality_metrics.get(\"models_used\", {}).get(\"clip_available\", True) == False:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 705,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "fallback_reason = \"model_unavailable\" if quality_metrics.get(\"models_used\", {}).get(\"clip_available\", True) == False else \"assessment_error\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 734,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "model_config = self.model_configs.get(model, self.model_configs[\"auto\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 765,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "legacy_quality_score = retry_quality_assessment.get(\"overall_score\", 50)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 768,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"issues\": retry_quality_assessment.get(\"recommendations\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 769,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": retry_quality_assessment.get(\"recommendations\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 803,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Alt-text generated: {alt_text_data.get('status')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 808,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "status=alt_text_data.get('status', 'success')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 865,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "advanced_assessment = legacy_quality_metrics.get(\"advanced_assessment\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 878,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quality_level = advanced_assessment.get(\"quality_level\", \"unknown\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 886,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "brand_score = dimension_scores.get(\"brand\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 891,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_type = self._current_user_settings.get(\"industry_type\", \"general\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 939,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"alt_text\": alt_text_data.get(\"alt_text\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 941,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"alt_text\": alt_text_data.get(\"alt_text\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 942,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"alt_text_status\": alt_text_data.get(\"status\", \"not_generated\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 943,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"alt_text_length\": alt_text_data.get(\"length\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 944,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform_optimized\": alt_text_data.get(\"platform\") == platform",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 947,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"score\": legacy_quality_metrics.get(\"quality_score\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 948,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"issues\": legacy_quality_metrics.get(\"issues\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 949,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": legacy_quality_metrics.get(\"recommendations\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 953,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"advanced_assessment\": legacy_quality_metrics.get(\"advanced_assessment\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 959,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"original_size\": processing_metadata.get(\"original_size\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 960,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"final_size\": processing_metadata.get(\"processed_size\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 961,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"compression_ratio\": processing_metadata.get(\"compression_ratio\", 1.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 970,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"requested_size\": tool_options.get(\"size\", \"1024x1024\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1041,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tool_options = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tool_options = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Generated image {i + 1}/{image_count} for {platform} (quality: {result.get('quality', {}).get('score', 'N/A')})\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1277,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "successful_images = [img for img in platform_images if img.get(\"status\") == \"success\"]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avg_quality = sum(img.get(\"quality\", {}).get(\"score\", 0) for img in successful_images) / max(len(successful_images), 1)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return presets.get(platform, [\"standard\", \"premium\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1413,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return tips.get(platform, [",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1453,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return guidelines.get(platform, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actual_model = self.model_mapping.get(model, \"grok-2-image\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1505,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "model_config = self.model_configs.get(model)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1885,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "guidance = platform_guidance.get(platform, \"Create engaging social media content\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 1953,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = '. '.join(sentences[:mid_point]) + '.\\n\\n' + '. '.join(sentences[mid_point:])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2068,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"industry_type\": industry_context or user_settings.get(\"industry_type\", \"general\") if user_settings else \"general\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry_requirements = brand_context.get(\"industry_requirements\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "brand_guidelines = brand_context.get(\"brand_guidelines\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2205,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "restrictions = requirements.get(\"restrictions\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2240,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keywords = guidelines.get(\"keywords\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_generation_service.py",
      "line_number": 2246,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "issues.append(f\"WARNING: Content doesn't emphasize brand keywords: {', '.join(keywords[:3])}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/embedding_service.py",
      "line_number": 122,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "chunks.append(' '.join(current_chunk))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/embedding_service.py",
      "line_number": 130,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "chunks.append(' '.join(current_chunk))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/embedding_service.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hash_input = f\"{content}_{metadata.get('platform', '')}_{metadata.get('created_at', '')}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/embedding_service.py",
      "line_number": 576,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(key) != value:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pkce_state_store.py",
      "line_number": 152,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "pipe.get(redis_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pkce_state_store.py",
      "line_number": 154,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = pipe.execute()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pkce_state_store.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Consumed PKCE state for org {state_data.get('organization_id')}, platform {state_data.get('platform')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pkce_state_store.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_json = self.redis.get(cache_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/pkce_state_store.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"memory_used\": self.redis.info().get(\"used_memory_human\", \"unknown\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 56,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(ContentItem)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 64,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for content in content_query.all():",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 88,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "operations = essential_ops.get(platform, [\"profile\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 224,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(ContentItem)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 225,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(ContentItem.published_at >= datetime.now(timezone.utc) - timedelta(days=7))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 226,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(ContentItem.engagement_count > 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 229,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 275,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User.id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 276,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".join(ContentItem)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 277,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(ContentItem.created_at >= datetime.now(timezone.utc) - timedelta(days=30))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 280,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 295,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "successful = sum(1 for r in results if isinstance(r, dict) and r.get(\"status\") == \"completed\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 331,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return base_ttls.get(operation, 3600)  # Default 1 hour",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 205,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "rotation_interval = self.rotation_schedules.get(key_type, 90)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"rotation_due_in_days\": self.rotation_schedules.get(key_type, 90) - (oldest_key_age or 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"duration_seconds\": migration_results.get(\"duration_seconds\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 310,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"duration_seconds\": migration_results.get(\"duration_seconds\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"errors\": migration_results.get(\"errors\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 352,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_key = self.key_store.get(old_key_id, {}).get(\"key\") if old_key_id else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 353,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "new_key = self.key_store.get(new_key_id, {}).get(\"key\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 364,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "credentials = db.query(UserCredentials).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 396,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(RefreshTokenBlacklist).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 415,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if (key_data.get(\"key_type\") == key_type and",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 416,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "key_data.get(\"status\") == \"active\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 421,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"usage_count\": key_data.get(\"usage_count\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 438,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "rotation_interval = self.rotation_schedules.get(key_type, 90)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 476,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if key_data.get(\"status\") == \"deprecated\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 477,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "key_type = key_data.get(\"key_type\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 478,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = key_data.get(\"created_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 481,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "grace_period = self.grace_periods.get(key_type, 30)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 484,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if age_days > (self.rotation_schedules.get(key_type, 90) + grace_period):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 513,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return getattr(self, 'rotation_events', {}).get(event_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 543,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"rotation_schedule_days\": self.rotation_schedules.get(key_type, 90),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 544,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"grace_period_days\": self.grace_periods.get(key_type, 30),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 567,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if details.get(\"is_overdue\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 595,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"rotation_interval_days\": self.rotation_schedules.get(key_type, 90),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 596,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"grace_period_days\": self.grace_periods.get(key_type, 30),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 606,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"status\": current_config[\"key_types\"].get(key_type.value, {}).get(\"status\", \"unknown\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 607,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"oldest_key_age_days\": current_config[\"key_types\"].get(key_type.value, {}).get(\"oldest_key_age_days\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 608,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"is_overdue\": current_config[\"key_types\"].get(key_type.value, {}).get(\"is_overdue\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/key_rotation_service.py",
      "line_number": 659,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if details.get(\"is_overdue\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "entry_list = webhook_data.get('entry', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 118,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_id = entry.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 119,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "changes = entry.get('changes', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 122,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "field = change.get('field')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 123,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "value = change.get('value', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "entry_list = webhook_data.get('entry', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "instagram_id = entry.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 166,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "changes = entry.get('changes', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "field = change.get('field')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "value = change.get('value', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 232,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comment_id = comment_data.get('comment_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "post_id = comment_data.get('post_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 234,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message = comment_data.get('message', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 235,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_time = comment_data.get('created_time')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 236,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender = comment_data.get('from', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_platform_id=sender.get('id', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 250,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_username=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mention_id = mention_data.get('mention_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message = mention_data.get('message', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 277,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_time = mention_data.get('created_time')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender = mention_data.get('from', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 290,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_username=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 291,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 315,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_id = message_data.get('message_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 316,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = message_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 317,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_time = message_data.get('created_time')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 318,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender = message_data.get('from', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 330,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_username=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 331,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 356,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comment_id = comment_data.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 357,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = comment_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 358,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "timestamp = comment_data.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_id = comment_data.get('media', {}).get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 362,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "from_user = comment_data.get('from', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 374,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_platform_id=from_user.get('id', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 375,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_username=from_user.get('username', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_display_name=from_user.get('username', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 400,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comment_id = mention_data.get('comment_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 401,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_id = mention_data.get('media_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 402,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = mention_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 403,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "timestamp = mention_data.get('timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 437,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tweet_id = tweet_data.get('id_str')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 438,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = tweet_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 439,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = tweet_data.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = tweet_data.get('user', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 441,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "in_reply_to = tweet_data.get('in_reply_to_status_id_str')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 444,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "entities = tweet_data.get('entities', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 445,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mentions = entities.get('user_mentions', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 450,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = self._find_connection_by_username('twitter', mention.get('screen_name', ''))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 465,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_platform_id=user.get('id_str', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 466,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_username=user.get('screen_name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 467,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_display_name=user.get('name', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 468,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_profile_url=f\"https://twitter.com/{user.get('screen_name', '')}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_profile_image=user.get('profile_image_url_https', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 470,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_verified=user.get('verified', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 490,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_create = dm_data.get('message_create', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 491,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_data = message_create.get('message_data', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 492,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_id = message_create.get('sender_id', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 493,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recipient_id = message_create.get('target', {}).get('recipient_id', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 495,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_id = dm_data.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 496,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = message_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 497,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_timestamp = dm_data.get('created_timestamp')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 530,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 538,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.db.query(SocialPlatformConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 542,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_monitoring.py",
      "line_number": 488,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "state_value = {'closed': 0, 'open': 1, 'half-open': 2}.get(state, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 243,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_usage = limit_info.get(\"quota_usage\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 244,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quota_limit = limit_info.get(\"quota_total\", 25)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 245,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "time_window = limit_info.get(\"quota_duration\", 3600)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_stats = stats.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 281,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 283,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_usage = platform_stats.get(\"current_requests\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quota_limit = config.get(\"base_quota\", 100)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 285,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "time_window = config.get(\"window_seconds\", 3600)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "burst_available = platform_stats.get(\"burst_tokens_remaining\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 294,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "utilization_percent=platform_stats.get(\"utilization\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.platform_configs.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 306,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quota_limit=config.get(\"base_quota\", 100),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 307,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "time_window=config.get(\"window_seconds\", 3600),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 308,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reset_time=get_utc_now() + timedelta(seconds=config.get(\"window_seconds\", 3600)),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/quota_management.py",
      "line_number": 355,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = request.get(\"platform\", \"unknown\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_sources': len(data.get('organic', [])) + len(data.get('news', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 89,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for news_item in data.get('news', [])[:limit]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 90,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = news_item.get('title', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 91,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = news_item.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': news_item.get('source', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 100,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'date': news_item.get('date', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 101,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': news_item.get('link', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in general_data.get('organic', [])[:5]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 107,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = result.get('title', '') + ' ' + result.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 112,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 113,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'context': result.get('snippet', '')[:200],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': result.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_sources': len(data.get('organic', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 201,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in data.get('organic', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 202,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = result.get('title', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 203,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = result.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': result.get('link', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for insight in insights_data.get('organic', [])[:5]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 223,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = insight.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 231,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': insight.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 234,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': insight.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 245,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_sources': len(data.get('organic', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in data.get('organic', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 328,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = result.get('title', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 329,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = result.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 344,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': result.get('link', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 355,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'leadership_approach': ', '.join(tl_indicators),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 356,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source_authority': result.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 361,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for practice in bp_data.get('organic', [])[:5]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 362,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = practice.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 370,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': practice.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': practice.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 450,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_videos_analyzed': len(data.get('organic', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 456,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for result in data.get('organic', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 457,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = result.get('title', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 458,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet = result.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 459,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url = result.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 495,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for strategy in trends_data.get('organic', [])[:5]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 496,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = strategy.get('snippet', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 505,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': strategy.get('displayLink', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 508,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': strategy.get('link', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 573,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "all_hashtags.extend(hashtag_data.get('hashtags', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 580,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title = item.get('title', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 587,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/real_social_research_service.py",
      "line_number": 595,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keyword_counts[keyword] = keyword_counts.get(keyword, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 32,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 213,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(query)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 214,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return result.scalars().all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 218,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 225,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 234,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_level = plan_hierarchy.get(current_plan, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "new_level = plan_hierarchy.get(new_plan_name, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 340,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_result = self.db.execute(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cache_hit_ratio = cache_stats.get('hit_ratio', 0.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if db_stats.get('peak_connections', 0) > 0:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db_pool_usage = (db_stats.get('active_connections', 0) / db_stats.get('peak_connections', 1)) * 100",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 363,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "thresholds = self.thresholds.get(metric_name, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 393,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "thresholds = self.thresholds.get(metric_name, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/apm_service.py",
      "line_number": 779,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return \"\\n\".join(lines)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 58,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "encrypted_token = connection.access_tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tweets = mentions_data.get(\"data\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, headers=headers, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 196,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_id = tweet.get(\"author_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = tweet.get(\"text\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 198,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = tweet.get(\"created_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reset_time = response.headers.get(\"x-rate-limit-reset\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 511,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=parsed_content.get(\"title\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 513,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtags=parsed_content.get(\"hashtags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 514,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "mentions=parsed_content.get(\"mentions\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 515,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_suggestions=parsed_content.get(\"media_suggestions\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 540,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "template = self.content_templates.get(prompt.content_type.value, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 551,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Keywords to include: {', '.join(prompt.keywords)}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 552,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Goals: {', '.join(prompt.goals)}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 555,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "- Character limit: {constraints.get('character_limit', 'No limit')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 556,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "- Hashtag limit: {constraints.get('hashtag_limit', 'No limit')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 557,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "- Best practices: {constraints.get('best_practices', [])}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 561,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Content Structure: {template.get('structure', 'Standard format')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 597,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 602,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 607,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 623,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 653,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "char_limit = constraints.get(\"character_limit\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 689,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return constraints.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 708,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return \" \".join(context_parts) if context_parts else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 740,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "avg_similarity = sum(result.metadata.get(\"similarity_score\", 0.5) for result in similar_content) / len(similar_content)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 764,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tone_words = tone_keywords.get(tone, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 804,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtag_count = len(content.get(\"hashtags\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_generation_automation.py",
      "line_number": 868,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "client = self.platform_clients.get(content.platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 110,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflow_count=len(workflow_analysis.get(\"workflows\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"triggers\"].update(workflow_analysis.get(\"triggers\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"jobs\"].extend(workflow_analysis.get(\"jobs\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"actions_used\"].update(workflow_analysis.get(\"actions_used\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"security_features\"].extend(workflow_analysis.get(\"security_features\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"deployment_strategies\"].extend(workflow_analysis.get(\"deployment_strategies\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "analysis[\"environment_usage\"].update(workflow_analysis.get(\"environments\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 242,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "assessor = assessors.get(dimension)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 266,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "triggers = analysis.get(\"triggers\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 287,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 319,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 323,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "build_workflows = [w for w in workflows if \"build\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 383,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 387,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if any(keyword in w.get(\"filename\", \"\").lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 409,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "evidence.append(f\"Multiple test types: {', '.join(set(test_types))}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 415,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 455,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "security_features = analysis.get(\"security_features\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 484,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 486,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"security\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 521,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "deployment_strategies = analysis.get(\"deployment_strategies\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 522,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "environments = analysis.get(\"environment_usage\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 525,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 527,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"deploy\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 548,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "evidence.append(f\"Multi-environment support: {', '.join(environments)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 551,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "evidence.append(f\"Basic environment support: {', '.join(environments)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 587,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 591,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"monitoring\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 615,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 662,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "environments = analysis.get(\"environment_usage\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 663,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 680,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "iac_actions = [action for action in analysis.get(\"actions_used\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 718,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 722,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"rollback\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 731,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"backup\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 740,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"recovery\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 787,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 788,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 791,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parallel_jobs = sum(len(w.get(\"jobs\", [])) for w in workflows if len(w.get(\"jobs\", [])) > 1)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 825,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_complexity = sum(w.get(\"complexity_score\", 0) for w in workflows)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 858,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = analysis.get(\"workflows\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 859,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "triggers = analysis.get(\"triggers\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 875,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"compliance\" in w.get(\"filename\", \"\").lower()]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 884,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if any(doc in w.get(\"filename\", \"\").lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 967,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "weight = weights.get(dimension, 0.05)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1032,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "base_impact = impact_map.get(dimension, \"General process improvement\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1077,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_workflows\": len(workflow_analysis.get(\"workflows\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1078,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_jobs\": len(workflow_analysis.get(\"jobs\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1079,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"unique_actions\": len(workflow_analysis.get(\"actions_used\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1080,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"security_features_count\": len(workflow_analysis.get(\"security_features\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1081,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"environments_count\": len(workflow_analysis.get(\"environment_usage\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1082,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"deployment_strategies_count\": len(workflow_analysis.get(\"deployment_strategies\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "line_number": 1089,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"workflow_complexity\": sum(w.get(\"complexity_score\", 0) for w in workflow_analysis.get(\"workflows\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 97,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content += f\"\\n\\n{' '.join(self.hashtags)}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 187,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "target_audience=context.get(\"target_audience\", \"general audience\") if context else \"general audience\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keywords=context.get(\"keywords\", []) if context else [],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goals=context.get(\"goals\", []) if context else [],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 190,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_hashtags=context.get(\"include_hashtags\", True) if context else True,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 191,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_call_to_action=context.get(\"include_call_to_action\", True) if context else True,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 192,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_length=context.get(\"max_length\") if context else None,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 193,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_media=context.get(\"include_media\", False) if context else False",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 364,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "limits = self.platform_limits.get(platform, {\"text\": 1000, \"hashtags\": 5})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 422,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if research_summary and research_summary.get(\"trending_topics\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 424,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "research_context = f\"Based on current trends: {trending.get('topic', '')} is trending with {trending.get('sentiment', 'neutral')} sentiment.\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 427,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_chars = min(limits.get(\"text\", 1000), request.max_length or 1000)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 476,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "- Keywords to include: {', '.join(request.keywords)}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 532,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "template = self.content_templates.get(request.content_type, {}).get(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 570,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_hashtags = limits.get(\"hashtags\", 5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 599,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "base_tags = platform_hashtags.get(platform, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 631,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_ctas = cta_templates.get(platform, [\"Let us know what you think!\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 691,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_base = base_engagement.get(platform, {\"likes\": 10, \"comments\": 1, \"shares\": 1})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 734,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_length = limits.get(\"text\", 1000) * 0.7  # 70% of max is often optimal",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 738,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif content_length <= limits.get(\"text\", 1000):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_automation.py",
      "line_number": 744,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_hashtags = min(limits.get(\"hashtags\", 5), 5)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/email_service.py",
      "line_number": 201,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message_id\": response.headers.get('X-Message-Id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/email_service.py",
      "line_number": 281,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message_id\": result.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 117,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_usage = await redis_cache.get(\"usage_tracking\", \"monthly_usage\", resource_id=cache_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 125,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.query(func.sum(UsageRecord.quantity)).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 168,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = self.db.query(func.sum(UsageRecord.quantity)).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 231,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = self.db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 236,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 167,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 180,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 187,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 274,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 276,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 327,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 329,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 370,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 378,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(OAuthToken.is_valid == True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 382,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 389,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.order_by(OAuthToken.created_at.desc()).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 409,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tokens_to_delete = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 442,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/oauth_token_service.py",
      "line_number": 444,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 215,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 221,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = subscription_data.get(\"metadata\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan_id = metadata.get(\"plan_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 223,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan_name = metadata.get(\"plan_name\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 227,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan = self.db.query(Plan).filter(Plan.id == int(plan_id)).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 232,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan = self.db.query(Plan).filter(Plan.name == plan_name).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 242,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_period_end = subscription_data.get(\"current_period_end\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 259,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_period_end = subscription_data.get(\"current_period_end\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 287,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 308,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "subscription_id = invoice_data.get(\"subscription\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 313,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 322,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if invoice_data.get(\"period_end\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "line_number": 337,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "client_info.get('user_agent', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "client_info.get('ip_address', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 277,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_string = '|'.join(components)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 368,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_data = await self.redis_client.get(session_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 377,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'revocation_reason': RevocationReason(data['revocation_reason']) if data.get('revocation_reason') else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 531,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expires_at = payload.get('exp', time.time() + 3600)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 791,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_data = await self.redis_client.get(key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 794,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if data.get('state') == 'active':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 796,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif data.get('state') == 'revoked':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_session_manager.py",
      "line_number": 843,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await self.redis_client.get(test_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alt_text_service.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return platform_fallbacks.get(platform, \"Social media image\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/alt_text_service.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_length = length_limits.get(platform, 125)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_thresholds = self.tier_thresholds.get(platform, self.tier_thresholds[\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 176,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_thresholds = self.tier_thresholds.get(platform, self.tier_thresholds[\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 229,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(ContentItem.id == content_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 247,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "likes_count=new_metrics.get(\"likes_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "shares_count=new_metrics.get(\"shares_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comments_count=new_metrics.get(\"comments_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 250,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reach_count=new_metrics.get(\"reach_count\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "click_count=new_metrics.get(\"click_count\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 368,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_content = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 483,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = db.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 488,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentPerformanceSnapshot.snapshot_time).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 564,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 589,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tier_distribution[tier] = tier_distribution.get(tier, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 396,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_settings = db.query(UserSetting).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 403,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "account_type = ig_data.get(\"account_type\", \"BUSINESS\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 425,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "caption += ' '.join(new_hashtags)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 458,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "structured_caption = '\\n'.join(content_lines)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 460,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "structured_caption += '\\n\\n' + '\\n'.join(hashtag_lines)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 678,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "potential += media_bonus.get(media_type, 0.1)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 734,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_item = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 817,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_settings = db.query(UserSetting).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 824,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "account_type = ig_data.get(\"account_type\", \"BUSINESS\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 957,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "type_counts[media_type] = type_counts.get(media_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/workflow_orchestration.py",
      "line_number": 426,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"research_topics_found\": research_step.result.get(\"trending_topics\", 0) if research_step.result else 0,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/workflow_orchestration.py",
      "line_number": 584,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "active_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/workflow_orchestration.py",
      "line_number": 587,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/workflow_orchestration.py",
      "line_number": 746,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.active_workflows.get(execution_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 242,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "len([v for v in result.violations if v.get(\"severity\") == \"high\"]) == 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "violation_type=violation.get(\"type\", \"unknown\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "severity=violation.get(\"severity\", \"low\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 418,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message\": f\"Content mentions prohibited topics: {', '.join(topic_violations)}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 439,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message\": f\"Missing required brand elements: {', '.join(missing_elements)}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 613,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_guidelines = brand_guidelines.platform_specific.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 626,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "high_violations = len([v for v in result.violations if v.get(\"severity\") == \"high\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 627,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "medium_violations = len([v for v in result.violations if v.get(\"severity\") == \"medium\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 628,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "low_violations = len([v for v in result.violations if v.get(\"severity\") == \"low\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_safety_service.py",
      "line_number": 631,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "openai_flagged = result.moderation_flags.get(\"flagged\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_spec = self.PLATFORM_SPECS.get(platform, self.PLATFORM_SPECS[\"instagram\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 142,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "target_size = platform_spec.get(format_type, platform_spec[\"default\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 217,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "settings = self.QUALITY_SETTINGS.get(quality_preset, self.QUALITY_SETTINGS[\"standard\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if settings.get(\"sharpen\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 223,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "enhanced_image = enhanced_image.filter(ImageFilter.UnsharpMask(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 228,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if settings.get(\"enhance_color\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if settings.get(\"enhance_contrast\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 294,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text_position = positions.get(position, positions[\"bottom_right\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/image_processing_service.py",
      "line_number": 437,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return practices.get(platform, [",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 209,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "requirements = self.model_requirements.get(model_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 433,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "requirements = self.model_requirements.get(template_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 584,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recommendations.append(f\"\u2795 Create missing critical templates: {', '.join(missing_templates)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 700,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"capabilities\": model_info.get(\"capabilities\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 747,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"content_policy_compliance\" not in template_info.get(\"capabilities\", {}):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 757,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"safety_filter\" not in template_info.get(\"capabilities\", {}):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 791,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if method not in template_info.get(\"methods\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 802,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not config.get(\"max_prompt_length\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 834,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not template_info.get(\"api_key_configured\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 844,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not template_info.get(\"service_available\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 867,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "model_name = issue.details.get(\"model\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 868,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "missing_config = issue.details.get(\"missing_config\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 882,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"description\": f\"Would set max_prompt_length to {default_lengths.get(model_name, default_lengths['default'])} for {model_name}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 894,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "model_name = issue.details.get(\"model\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/template_validation_service.py",
      "line_number": 895,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "issue_type = issue.details.get(\"issue\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_scheduler_service.py",
      "line_number": 53,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_scheduler_service.py",
      "line_number": 143,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_scheduler_service.py",
      "line_number": 180,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_scheduler_service.py",
      "line_number": 182,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "encrypted_user_token = connection.access_tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 157,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "encrypted_refresh_token = connection.access_tokens.get(\"refresh_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 171,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expires_in = new_tokens.get(\"expires_in\", 7200)  # Default 2 hours",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 229,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 234,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "long_lived_token = data.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expires_in = data.get(\"expires_in\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 256,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 260,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token_data = data.get(\"data\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 262,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return token_data.get(\"is_valid\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response = await client.get(url, params=params)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/token_refresh_service.py",
      "line_number": 282,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_token = data.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_rate_limiter.py",
      "line_number": 376,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = await pipe.execute()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/distributed_rate_limiter.py",
      "line_number": 451,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "identifier = \":\".join(key_parts[2:-1])  # Remove prefix and suffix",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_publisher_service.py",
      "line_number": 84,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_token = connection.access_tokens.get(\"page_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_publisher_service.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_publisher_service.py",
      "line_number": 132,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/connection_publisher_service.py",
      "line_number": 222,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data = content + \"\".join(sorted(media_urls or []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 259,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for content in twitter_data.get('trending_content', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 266,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author=content.get('source', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 267,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "published_at=datetime.fromisoformat(content.get('date', datetime.utcnow().isoformat())),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 273,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtags=content.get('hashtags_mentioned', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 281,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'insights': twitter_data.get('hashtag_insights', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 282,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'engagement_patterns': twitter_data.get('engagement_patterns', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 283,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': twitter_data.get('research_summary', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for idea in instagram_data.get('content_ideas', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 304,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author=idea.get('source', 'Unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 307,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_metrics={'visual_elements': len(idea.get('visual_elements', []))},",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtags=idea.get('hashtags', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 319,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'hashtag_strategies': instagram_data.get('hashtag_strategies', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'marketing_insights': instagram_data.get('marketing_insights', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 321,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': instagram_data.get('research_summary', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 335,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for content in linkedin_data.get('professional_content', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 342,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author=content.get('source', 'Professional'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 346,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'professional_signals': len(content.get('professional_signals', [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 347,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'thought_leadership': len(content.get('thought_leadership_signals', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 359,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'thought_leadership_trends': linkedin_data.get('thought_leadership_trends', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 360,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'engagement_strategies': linkedin_data.get('engagement_strategies', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 361,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'industry_insights': linkedin_data.get('industry_insights', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 362,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': linkedin_data.get('research_summary', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for video in youtube_data.get('video_content', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 387,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'estimated_popularity': video.get('estimated_popularity', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 388,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'engagement_signals': len(video.get('engagement_signals', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 391,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "trending_score=min(video.get('estimated_popularity', 0) / 100, 1.0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 401,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'trending_formats': youtube_data.get('trending_formats', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 402,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_strategies': youtube_data.get('content_strategies', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 403,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': youtube_data.get('research_summary', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 468,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for insight in insights.get('insights', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if topic.lower() in insight.get('content', '').lower() or topic.lower() in insight.get('title', '').lower():",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 519,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'execution_summary': research_results.get('summary', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 527,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "social_media_results = research_results.get('results', {}).get('social_media', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 534,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "key=lambda x: x.get('trending_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 541,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'insight': f\"High-trending content: {content.get('title', '')[:100]}\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 542,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'trending_score': content.get('trending_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 543,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'url': content.get('url', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 547,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platforms_analyzed = research_results.get('summary', {}).get('platforms_analyzed', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 548,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_results = research_results.get('summary', {}).get('total_results', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 569,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'api_success_rate': (platforms_analyzed / len(research_results.get('platforms_researched', []))) * 100 if research_results.get('platforms_researched') else 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_production.py",
      "line_number": 578,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if 'trends' not in research_results.get('results', {}):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 128,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if r.get('metadata', {}).get('type') == memory_type",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "vector_id = result.get('content_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 137,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db_memory = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 139,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 235,
      "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_memories = db.query(func.count(Memory.id)).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 238,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "type_stats = db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 241,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").group_by(Memory.memory_type).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 244,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_high_performing = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 246,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(desc(Memory.relevance_score)).limit(10).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 266,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'total_indexed': patterns.get('total_content', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 267,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'avg_engagement': patterns.get('avg_engagement', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'top_topics': patterns.get('top_topics', [])[:5]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 287,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "unindexed_memories = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 289,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(100).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 330,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'remaining': db.query(func.count(Memory.id)).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 332,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/memory_service.py",
      "line_number": 359,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db_cleaned = db.query(Memory).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 196,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_summary = \"; \".join(search_errors)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 253,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for item in data.get('organic', [])[:max_results]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 255,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=item.get('title', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 256,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url=item.get('link', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet=item.get('snippet', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "date=item.get('date'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "async with self.session.get(url, params=params) as response:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "abstract = data.get('Abstract', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 287,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=data.get('Heading', query),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url=data.get('AbstractURL', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 294,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for topic in data.get('RelatedTopics', [])[:max_results-1]:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "title=topic.get('Text', '').split(' - ')[0],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "url=topic.get('FirstURL', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 299,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snippet=topic.get('Text', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 341,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "founded=company_details.get('founded'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 342,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "headquarters=company_details.get('headquarters'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "size=company_details.get('size'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 367,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "combined_text = ' '.join([r.snippet.lower() for r in results])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/web_research_service.py",
      "line_number": 436,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "combined_text = ' '.join([r.snippet for r in results])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 80,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return \":\".join(components)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 184,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_config = self.platform_ttls.get(platform, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 185,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return platform_config.get(operation, self.default_ttl)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 268,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_data = await self.redis_client.get(key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 481,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await self.get(platform, operation, **kwargs)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 496,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"redis_memory_used\": redis_info.get('used_memory', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 497,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"redis_memory_peak\": redis_info.get('used_memory_peak', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 65,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for entry in data.get('entry', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 74,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_id = entry.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender = message_event.get('sender', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 95,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recipient = message_event.get('recipient', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 96,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message = message_event.get('message', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 99,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if message.get('is_echo'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = message.get('text')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 111,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'platform_id': message.get('mid'),  # Message ID",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 113,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_event.get('timestamp', 0) / 1000,",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 117,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_id': sender.get('id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 118,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_username': sender.get('id'),  # FB doesn't provide username in messages",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 124,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'sender_id': sender.get('id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 125,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'recipient_id': recipient.get('id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 126,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'message_id': message.get('mid'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'timestamp': message_event.get('timestamp'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'interaction_id': message.get('mid')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "field = change.get('field')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "value = change.get('value', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 150,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if value.get('verb') == 'add' and value.get('item') == 'comment':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 154,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif value.get('verb') == 'add' and value.get('item') == 'post':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comment_id = value.get('comment_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 166,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "post_id = value.get('post_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 167,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_id = value.get('sender_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_name = value.get('sender_name')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message = value.get('message', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_time = value.get('created_time')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 207,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "post_id = value.get('post_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 208,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_id = value.get('sender_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 209,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_name = value.get('sender_name')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 210,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message = value.get('message', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "line_number": 211,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_time = value.get('created_time')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 88,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await self._process_dm_event(dm, data.get('users', {}), user_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 100,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tweet_id = tweet.get('id_str')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 101,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = tweet.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 102,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = tweet.get('user', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 103,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = tweet.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 112,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if tweet.get('in_reply_to_status_id_str'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 114,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parent_id = tweet.get('in_reply_to_status_id_str')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 117,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif tweet.get('is_quote_status'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 119,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parent_id = tweet.get('quoted_status_id_str')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 134,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_id': user.get('id_str'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_username': user.get('screen_name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 136,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_display_name': user.get('name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 137,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_profile_image': user.get('profile_image_url_https'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 138,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_verified': user.get('verified', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'user_id': user.get('id_str'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'screen_name': user.get('screen_name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'retweet_count': tweet.get('retweet_count', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'favorite_count': tweet.get('favorite_count', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'in_reply_to_user_id': tweet.get('in_reply_to_user_id_str'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'in_reply_to_screen_name': tweet.get('in_reply_to_screen_name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 149,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'is_quote_status': tweet.get('is_quote_status', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 150,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'lang': tweet.get('lang'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 151,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'source': tweet.get('source'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 169,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "dm_id = dm.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_create = dm.get('message_create', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 173,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_id = message_create.get('sender_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 176,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_data = message_create.get('message_data', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = message_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 180,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender = users.get(sender_id, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_timestamp = int(dm.get('created_timestamp', 0))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_username': sender.get('screen_name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 196,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_display_name': sender.get('name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_profile_image': sender.get('profile_image_url_https'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 198,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_verified': sender.get('verified', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'recipient_id': message_create.get('target', {}).get('recipient_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = await self._process_v2_tweet(tweet_data, data.get('includes', {}), user_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 273,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tweet_id = tweet_data.get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "text = tweet_data.get('text', '')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author_id = tweet_data.get('author_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = tweet_data.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users = {user['id']: user for user in includes.get('users', [])}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "author = users.get(author_id, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if tweet_data.get('in_reply_to_user_id'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 288,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "parent_id = tweet_data.get('referenced_tweets', [{}])[0].get('id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 296,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_username': author.get('username'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_display_name': author.get('name'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_profile_image': author.get('profile_image_url'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 299,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'author_verified': author.get('verified', False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 305,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'public_metrics': tweet_data.get('public_metrics', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 306,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'context_annotations': tweet_data.get('context_annotations', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "line_number": 307,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'lang': tweet_data.get('lang'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 178,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "entries = self.db.query(CompanyKnowledge).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 187,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").limit(3).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 222,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "templates = self.db.query(ResponseTemplate).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "personality = self.personality_styles.get(personality_style, self.personality_styles[\"professional\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Intent: {analysis.get('intent', 'general')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 285,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Sentiment: {analysis.get('sentiment', 'neutral')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Priority: {analysis.get('priority_score', 50)}/100",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 302,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "2. Address the customer's {analysis.get('intent', 'concern')} appropriately",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"response_reasoning\": f\"Generated {personality_style} response for {analysis.get('intent', 'general')} intent\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 346,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "knowledge_context = \"\\n\".join([",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 358,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Variables: {', '.join(template.variables or [])}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 407,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "intent = analysis.get('intent', 'general')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 421,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "intent = analysis.get('intent', 'general')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 431,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response_text = fallback_responses.get(intent, fallback_responses[\"general\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 461,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction = self.db.query(SocialInteraction).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 472,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_settings = self.db.query(UserSetting).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 485,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction.sentiment = analysis.get('sentiment', 'neutral')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 486,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction.intent = analysis.get('intent', 'general')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 487,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "interaction.priority_score = analysis.get('priority_score', 50)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 490,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keywords = analysis.get('keywords', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 84,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(ContentLog.status == status)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 94,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 102,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 109,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"likes\": engagement_data.get(\"likes\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 116,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"shares\": engagement_data.get(\"shares\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 117,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"comments\": engagement_data.get(\"comments\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 118,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"views\": engagement_data.get(\"views\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 138,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content = self.db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 268,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.db.query(ContentLog).filter(ContentLog.status == \"scheduled\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 277,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.order_by(ContentLog.scheduled_for).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if key_info.get(\"status\") == \"no_keys\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "line_number": 180,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif key_info.get(\"is_overdue\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "age_days = key_info.get(\"oldest_key_age_days\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "line_number": 184,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "rotation_interval = key_info.get(\"rotation_interval_days\", 90)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "line_number": 323,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"records_migrated\": execute_result.get(\"records_migrated\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 199,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "twitter_accounts = db.query(SocialMediaAccount).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 202,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 219,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 223,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.TWITTER]).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 285,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "instagram_accounts = db.query(SocialMediaAccount).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 288,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 305,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 309,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.INSTAGRAM]).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 371,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "facebook_accounts = db.query(SocialMediaAccount).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 374,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 391,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 395,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.FACEBOOK]).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 457,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "linkedin_accounts = db.query(SocialMediaAccount).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 460,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 477,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_items = db.query(ContentItem).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 481,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.LINKEDIN]).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 641,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "impressions=analytics.get(\"impressions\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 642,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reach=analytics.get(\"reach\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 643,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement=analytics.get(\"engagement\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 644,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "likes=analytics.get(\"likes\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 645,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "comments=analytics.get(\"comments\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 646,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "shares=analytics.get(\"shares\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 647,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "clicks=analytics.get(\"clicks\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 648,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "video_views=analytics.get(\"video_views\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 715,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(ContentPerformanceSnapshot).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 721,
      "query_type": "\\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.join(ContentItem).filter(ContentItem.platform == platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/metrics_collection.py",
      "line_number": 723,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "snapshots = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/websocket_manager.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return len(self.user_connections.get(user_id, []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/websocket_manager.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_type = message_data.get(\"type\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 84,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if research_results.get(\"status\") != \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"research_insights\": len(research_results.get(\"insights\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 180,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "insights = research_results.get(\"insights\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 182,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "trending_topics = insights.get(\"trending_topics\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "market_insights = insights.get(\"market_insights\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 184,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_opportunities = insights.get(\"content_opportunities\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 187,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "trending_topics = research_results.get(\"trends\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "market_insights = research_results.get(\"insights\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_opportunities = research_results.get(\"content_opportunities\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 198,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "{chr(10).join(trending_topics[:5]) if trending_topics else \"AI automation and productivity tools are highly relevant\"}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 201,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "{chr(10).join(market_insights[:3]) if market_insights else \"Businesses are seeking automation solutions to improve efficiency\"}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 204,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "{chr(10).join(content_opportunities[:3]) if content_opportunities else \"Showcase AI automation benefits and case studies\"}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 270,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"hook\": idea.get(\"hook\", \"AI-Generated Content\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 271,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"content\": idea.get(\"content\", \"\")[:800],  # Limit length",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 272,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"hashtags\": idea.get(\"hashtags\", [\"#AIAutomation\"])[:5],  # Limit hashtags",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 273,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform\": idea.get(\"platform\", \"linkedin\").lower(),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"content_type\": idea.get(\"content_type\", \"text\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"value_proposition\": idea.get(\"value_proposition\", \"AI-generated content\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 317,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 362,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if content_idea.get(\"content_type\") == \"image+text\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 366,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if image_result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 367,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "image_url = image_result.get(\"image_url\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 383,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if post_result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 387,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_record.engagement_data[\"platform_post_id\"] = post_result.get(\"post_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 398,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"post_id\": post_result.get(\"post_id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 411,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": post_result.get(\"error\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 427,
      "query_type": "\\.get\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtags = \" \".join(content_idea.get(\"hashtags\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement_data={\"hashtags\": idea.get(\"hashtags\", [])},",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "topics = parameters.get(\"topics\", [\"social media trends\", \"AI\", \"marketing\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 407,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "competitors = parameters.get(\"competitors\", [\"@buffer\", \"@hootsuite\", \"@hubspot\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 420,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if celery_result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 421,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for competitor_data in celery_result.get(\"results\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 423,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"competitor\": competitor_data.get(\"competitor\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 424,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"analysis\": competitor_data.get(\"analysis\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 425,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"posts_analyzed\": competitor_data.get(\"posts_analyzed\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 426,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"sample_content\": competitor_data.get(\"sample_content\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 439,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry = parameters.get(\"industry\", \"social media marketing\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sources = parameters.get(\"sources\", [",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 457,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if celery_result.get(\"status\") == \"success\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 458,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for web_data in celery_result.get(\"results\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 461,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"source_url\": web_data.get(\"url\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 462,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": web_data.get(\"title\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 463,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"analysis\": web_data.get(\"analysis\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 464,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"content_length\": web_data.get(\"content_length\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 481,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "audience_segments = parameters.get(\"segments\", [\"professionals\", \"entrepreneurs\", \"marketers\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 506,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "topic_areas = parameters.get(\"topic_areas\", [\"AI\", \"social media\", \"marketing\", \"productivity\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 534,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "categories = parameters.get(\"categories\", [\"marketing\", \"AI\", \"business\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 555,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "industry = parameters.get(\"industry\", \"social media marketing\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 574,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "market = parameters.get(\"market\", \"social media tools\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 600,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return content_suggestions.get(topic.lower(), [\"articles\", \"guides\", \"tips\", \"insights\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 729,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_text += \" \".join(research_result.insights)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/research_automation_service.py",
      "line_number": 730,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_text += \" Opportunities: \" + \" \".join(research_result.content_opportunities)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 53,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 81,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_response = await media_client.get(media_url)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 84,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_type = media_response.headers.get(\"content-type\", \"image/jpeg\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 131,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tweet_id = result.get(\"data\", {}).get(\"id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reset_time = response.headers.get(\"x-rate-limit-reset\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_detail = error_data.get(\"detail\", \"Permission denied\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 184,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "errors = error_data.get(\"errors\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_type = error.get(\"type\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 192,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_msg = f\"Temporary X API error: {error.get('message', 'Unknown')}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_msg = f\"X API error: {error.get('message', 'Bad request')}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_msg = error_data.get(\"detail\", \"Content validation failed\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 270,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not connection.access_tokens.get(\"access_token\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 321,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 367,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_id = str(result.get(\"media_id\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 397,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_detail = error_data.get(\"errors\", [{}])[0].get(\"message\", \"Permission denied\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "line_number": 409,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_detail = error_data.get(\"errors\", [{}])[0].get(\"message\", \"Bad request\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 53,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_token = connection.access_tokens.get(\"page_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 64,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 101,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "post_id = result.get(\"id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 137,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_code = error_data.get(\"error\", {}).get(\"code\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 138,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_message = error_data.get(\"error\", {}).get(\"message\", \"Bad request\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not connection.access_tokens.get(\"page_token\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "line_number": 207,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not connection.platform_metadata.get(\"page_id\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 72,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if details.get(\"status\") == \"no_keys\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 75,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif details.get(\"is_overdue\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 156,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.debug(f\"Rotation not due for {key_type.value}: {result.get('rotation_due_in_days')} days remaining\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if details.get(\"pending_rotation_events\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 363,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "overdue_keys = [k for k, v in report[\"key_details\"].items() if v.get(\"is_overdue\")]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 499,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if key.get(\"usage_count\", 0) > 1000000:  # Very high usage",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 503,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if key.get(\"usage_count\", 0) == 0 and key.get(\"age_days\", 0) > 7:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 519,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"usage_summary\": {k: {\"total_keys\": v.get(\"total_keys\", 0)} for k, v in usage_stats.items()},",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 48,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 49,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 56,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 128,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 129,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 136,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 202,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 203,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 213,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 273,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 274,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 282,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 306,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not subscription_info or not subscription_info.get(\"subscription\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 315,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "stripe_status = stripe_subscription.get(\"status\", \"cancelled\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 316,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "stripe_end_timestamp = stripe_subscription.get(\"current_period_end\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 344,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "new_status = status_mapping.get(stripe_status, \"cancelled\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 386,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 387,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 394,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 415,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "plan = db.query(Plan).filter(Plan.id == user.plan_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 471,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 472,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 479,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 501,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 502,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 509,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 571,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"success\": task_result.get(\"success\", True),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "line_number": 575,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not task_result.get(\"success\", True):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog.py",
      "line_number": 108,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scan_results[\"entries_by_status\"][status] = scan_results[\"entries_by_status\"].get(status, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "action = action_result.get(\"action\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog.py",
      "line_number": 120,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if action_result.get(\"alert\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog.py",
      "line_number": 347,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform\": entry.event_info.get(\"object\", \"unknown\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 75,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 77,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 87,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_success = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 91,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "media_urls=payload_dict.get('media_urls', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 109,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "idempotency_key=payload_dict.get('idempotency_key')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 131,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedule = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 133,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 156,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedule = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 158,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 179,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedule = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 181,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 204,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if payload_dict.get('idempotency_key'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 206,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedule = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 208,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if payload_dict.get('idempotency_key'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 235,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "schedule = db.query(ContentSchedule).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/publish_tasks.py",
      "line_number": 237,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/lightweight_research_tasks.py",
      "line_number": 56,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'insights': research_result.get('insights', []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/lightweight_research_tasks.py",
      "line_number": 162,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "insights_text = \"\\n\".join(insights[:3])  # Use only first 3 insights",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 40,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users_with_goals = db.query(User).join(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 42,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").distinct().all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 130,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "goals_near_deadline = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 134,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 276,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "active_goals = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 278,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 285,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_progress = db.query(Goal).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 288,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 59,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_types=research_config.get(\"content_types\", [\"text\", \"image\", \"video\"]),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 60,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "time_range=research_config.get(\"time_range\", \"24h\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "location=research_config.get(\"location\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 62,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "max_results=research_config.get(\"max_results\", 100),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 63,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_sentiment=research_config.get(\"include_sentiment\", True),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 64,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_engagement=research_config.get(\"include_engagement\", True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 137,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"top_hashtags\": trends.get(\"top_hashtags\", [])[:10],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 138,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"emerging_topics\": trends.get(\"emerging_topics\", [])[:5],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"engagement_leaders\": trends.get(\"engagement_leaders\", [])[:5],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"sentiment_analysis\": trends.get(\"sentiment_analysis\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform_breakdown\": trends.get(\"platform_breakdown\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 190,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platforms = content_config.get(\"platforms\", [\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 202,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platforms = content_config.get(\"platforms\", [\"twitter\"])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 209,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type=content_config.get(\"content_type\", \"post\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 210,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "tone=content_config.get(\"tone\", \"professional\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 211,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "target_audience=content_config.get(\"target_audience\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_hashtags=content_config.get(\"include_hashtags\", True),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "include_cta=content_config.get(\"include_cta\", True),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "prompt_used=content_result.get(\"prompt\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scheduled_for=content_config.get(\"schedule_time\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 256,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if content_config.get(\"auto_schedule\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"scheduled_for\": content_config.get(\"schedule_time\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 264,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"status\": schedule_result.get(\"status\", \"scheduled\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 294,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not config.get(\"media_urls\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hashtags=content_result.get(\"hashtags\", [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 303,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return {\"status\": \"scheduled\", \"platform_id\": result.get(\"id\")}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 309,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scheduled_publish_time=config.get(\"schedule_time\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return {\"status\": \"scheduled\", \"platform_id\": result.get(\"id\")}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 318,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return {\"status\": \"published\", \"platform_id\": result.get(\"id\")}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 379,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"workflow_id\": workflow_results.get(\"id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 380,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"stages_completed\": workflow_results.get(\"stages_completed\", []),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 381,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"content_generated\": workflow_results.get(\"content_generated\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 382,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"posts_scheduled\": workflow_results.get(\"posts_scheduled\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 439,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"metrics_analyzed\": len(metrics_result.get(\"content_items\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 440,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"optimizations_identified\": len(optimization_result.get(\"recommendations\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 441,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"top_performing_content\": optimization_result.get(\"top_performers\", [])[:3],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 473,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_posts_analyzed\": metrics_result.get(\"total_posts\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 474,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platforms_collected\": list(metrics_result.get(\"platforms\", {}).keys()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 475,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"avg_engagement_rate\": metrics_result.get(\"avg_engagement_rate\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 476,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_impressions\": metrics_result.get(\"total_impressions\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 477,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_engagement\": metrics_result.get(\"total_engagement\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 478,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"top_performing_posts\": metrics_result.get(\"top_performers\", [])[:5]",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 521,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 522,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(User.is_active == True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 526,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 580,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.query(User)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 581,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 588,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ".all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 169,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 172,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 241,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 249,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 300,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "old_audits_count = db.query(SocialAudit).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/token_health_tasks.py",
      "line_number": 314,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "deleted_count = db.query(SocialAudit).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Processing Meta webhook entry: task_id={task_id}, entry_id={event_info.get('entry_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature=event_info.get('signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 100,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 122,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "webhook_id = f\"meta_{entry.get('id', task_id)}_{int(start_time.timestamp())}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 128,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get('error'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 156,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 160,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'entry_id': event_info.get('entry_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'events_processed': result.get('events_processed', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'entry_type': result.get('entry_type', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 175,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"entry_id={event_info.get('entry_id')}, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 190,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"events_processed={result.get('events_processed', 0)}, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"events_processed\": result.get('events_processed', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 209,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "webhook_id = f\"meta_{entry.get('id', task_id)}_{int(start_time.timestamp())}\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 229,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "signature=event_info.get('signature')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 252,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'entry_id': event_info.get('entry_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 285,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'webhook_processing'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 303,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for change in entry.get(\"changes\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 330,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"processed\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 334,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for message in entry.get(\"messaging\", []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 337,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"processed\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 343,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"entry_type\": entry.get(\"object_type\", \"unknown\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 368,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "field = change.get(\"field\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 369,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "value = change.get(\"value\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 371,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Processing Page change: field={field}, entry_id={entry.get('entry_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 402,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sender_id = message.get(\"sender\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 403,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recipient_id = message.get(\"recipient\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 404,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "message_text = message.get(\"message\", {}).get(\"text\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 437,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "verb = value.get(\"verb\")  # add, edit, remove",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 438,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "item = value.get(\"item\")  # post, comment, etc.",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 450,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"post_id\": value.get(\"post_id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 451,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"comment_id\": value.get(\"comment_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 472,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Processing mention event: entry_id={entry.get('entry_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 501,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Processing messaging change: entry_id={entry.get('entry_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 689,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_webhook_failures\": health_stats.get(\"failures_by_queue\", {}).get(\"webhook_processing\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 744,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"reliability_stats\": reliability_stats.get('delivery_statistics', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 751,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"Webhook recovery scan completed: {recovery_results.get('recovery_attempts', 0)} attempts, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 752,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"{recovery_results.get('successful_recoveries', 0)} successes, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 803,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"status\": \"completed\" if not cleanup_results.get('error') else \"failed\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 808,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"{cleanup_results.get('expired_idempotency_records_deleted', 0)} idempotency records, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 809,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"{cleanup_results.get('old_delivered_records_deleted', 0)} delivered records, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 810,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "f\"{cleanup_results.get('old_abandoned_records_deleted', 0)} abandoned records deleted, \"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 252,
      "query_type": "\\.query\\(, db\\.query\\(, \\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(User, UserSetting).join(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 254,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 348,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'upgrade_suggestion': quota_check.get('upgrade_suggestion', 'Contact support for plan details')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 393,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'upgrade_suggestion': research_capability_check.get('upgrade_suggestion'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 439,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "posting_time = user_config['posting_times'].get(platform, '09:00')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 442,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_timezone = user_config.get('timezone', 'UTC')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 474,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'research_data': research_results.get('summary', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 475,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'inspiration_sources': len(inspiration.get('similar_content', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 485,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'research_quality_score': research_results.get('summary', {}).get('research_quality_score', 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 562,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "workflows = db.query(WorkflowExecution).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 577,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_content = len(week_content.get('content', []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 641,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "active_users = db.query(User).filter(User.is_active == True).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 659,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for content_item in recent_content.get('content', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 660,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if content_item.get('published_at'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 666,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = content_item.get('platform', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 82,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 85,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 236,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 392,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 399,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"Emergency cleanup completed for {category}. Records deleted: {result.get('total_deleted', 0)}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/ftc_compliance_tasks.py",
      "line_number": 199,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results[\"subtasks\"][\"trial_reminders\"] = trial_results.get(timeout=300)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/ftc_compliance_tasks.py",
      "line_number": 210,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results[\"subtasks\"][\"renewal_notices\"] = renewal_results.get(timeout=300)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/ftc_compliance_tasks.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_reminders = results[\"subtasks\"][\"trial_reminders\"].get(\"reminders_sent\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/ftc_compliance_tasks.py",
      "line_number": 220,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_notices = results[\"subtasks\"][\"renewal_notices\"].get(\"notices_sent\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 50,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 60,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 113,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'posting'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 155,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(ContentLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 158,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "raise Exception(f\"Twitter API error: {result.get('error', 'Unknown error')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 203,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_log = db.query(ContentLog).filter(ContentLog.id == int(post_id)).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 241,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'posting'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 267,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "kwargs={'post_id': post.get('id')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 361,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform_times = optimal_times.get(platform.lower(), optimal_times['twitter'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/db_session_manager.py",
      "line_number": 28,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users = db.query(User).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/db_session_manager.py",
      "line_number": 141,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users = db.query(User).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 93,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "x_connections = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 97,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "poll_results[\"total_new_mentions\"] += result.get(\"new_mentions\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"new_mentions\": result.get(\"new_mentions\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"since_id\": result.get(\"since_id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 149,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_fetched\": result.get(\"total_fetched\", 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 153,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif result.get(\"error\") == \"rate_limited\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 162,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"backoff_seconds\": result.get(\"backoff_seconds\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 163,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"retry_after\": result.get(\"retry_after\", {}).isoformat() if result.get(\"retry_after\") else None",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 170,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_msg = result.get(\"error\", \"unknown error\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 262,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connection = db.query(SocialConnection).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 266,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if result.get(\"success\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 284,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"new_mentions\": result.get(\"new_mentions\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 285,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"since_id\": result.get(\"since_id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 286,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"total_fetched\": result.get(\"total_fetched\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "line_number": 294,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"error\": result.get(\"error\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "line_number": 41,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"DLQ watchdog scan completed: {scan_results.get('actions_taken', {})}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "line_number": 44,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "alerts = scan_results.get('alerts', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "line_number": 46,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if alert.get('severity') == 'error':",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "line_number": 47,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.error(f\"DLQ Alert: {alert.get('message')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "line_number": 49,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.warning(f\"DLQ Alert: {alert.get('message')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_decorators.py",
      "line_number": 25,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = kwargs.get('user')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_decorators.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = kwargs.get('user')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_decorators.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = kwargs.get('user')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_decorators.py",
      "line_number": 160,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user = kwargs.get('user')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/app_factory.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@app.get(\"/\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/app_factory.py",
      "line_number": 269,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@app.get(\"/health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/app_factory.py",
      "line_number": 301,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@app.get(\"/render-health\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/logging.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "name = frame.f_globals.get('__name__', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/logging.py",
      "line_number": 136,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not hasattr(kwargs.get('extra', {}), key):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/secrets_validator.py",
      "line_number": 191,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "rules = self.environment_rules.get(self.environment, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/secrets_validator.py",
      "line_number": 193,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if not rules.get(\"allow_placeholders\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/secrets_validator.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "rules = self.environment_rules.get(self.environment, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/secrets_validator.py",
      "line_number": 235,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "min_length = rules.get(\"minimum_key_length\", 16)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/secrets_validator.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if rules.get(\"require_complex_secrets\", False):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_config.py",
      "line_number": 94,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self._feature_flags.get(feature, False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_config.py",
      "line_number": 98,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self._config.get(key, default)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_config.py",
      "line_number": 136,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self._feature_flags.get(\"fail_open_on_redis_error\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_config.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self._feature_flags.get(\"fail_open_on_redis_error\", True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 115,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = db.execute(query, {\"table_name\": table_name})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 125,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "indexdef = index.get(\"indexdef\", \"\").lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 133,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "indexdef = index.get(\"indexdef\", \"\").lower()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 165,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = db.execute(query)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 180,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "size_result = db.execute(size_query)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 208,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "SELECT 1 FROM pg_extension WHERE extname = 'pg_stat_statements'",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 212,
      "query_type": "\\.execute\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = db.execute(check_query).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 236,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = db.execute(slow_query, {\"min_duration\": min_duration_ms})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 336,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sql = rec.get(\"sql\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 345,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "db.execute(text(sql))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 349,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"table\": rec.get(\"table\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 350,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"column\": rec.get(\"column\", rec.get(\"columns\")),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 391,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result = db.execute(tables_query)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 398,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "conn.execute(text(f\"VACUUM ANALYZE {table}\"))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 440,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "size_result = db.execute(size_query).fetchone()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 449,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "(SELECT setting FROM pg_settings WHERE name='max_connections') max_conn",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 453,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "conn_result = db.execute(conn_query).fetchone()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 468,
      "query_type": "\\.execute\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "long_result = db.execute(long_query).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/database_optimizer.py",
      "line_number": 484,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "bloat_result = db.execute(bloat_query)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/encryption.py",
      "line_number": 209,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"enc_version\": envelope.get(\"enc_version\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/encryption.py",
      "line_number": 210,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"enc_kid\": envelope.get(\"enc_kid\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/uuid_helper.py",
      "line_number": 53,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return db.query(model_class).filter(model_class.public_id == public_id).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/uuid_helper.py",
      "line_number": 124,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "records_without_uuid = db.query(model_class).filter(model_class.public_id.is_(None)).limit(batch_size).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/uuid_helper.py",
      "line_number": 140,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "remaining = db.query(model_class).filter(model_class.public_id.is_(None)).count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/config.py",
      "line_number": 141,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "temp_key = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 37,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.index_file = os.path.join(index_path, \"faiss.index\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 38,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = self.metadata.get(str(idx), {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': metadata.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': metadata.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 150,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': metadata.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 151,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': metadata.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 163,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if meta.get('metadata', {}).get('type') == content_type:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 166,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 167,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 182,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 185,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 186,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 189,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 206,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 207,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 211,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 216,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 242,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = meta.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 245,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type = metadata.get('type', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 246,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 249,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = metadata.get('platform', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 250,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 253,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 258,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "topic = metadata.get('topic', 'general')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/memory.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/http_client.py",
      "line_number": 190,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return await client.get(url, **kwargs)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 61,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.index_file = os.path.join(index_path, \"faiss.index\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 62,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 63,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.id_mapping_file = os.path.join(index_path, \"id_mapping.json\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 64,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.vectors_file = os.path.join(index_path, \"vectors.npz\")  # Store vectors for rebuild",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 353,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': self._id_mapping.get(internal_id),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 660,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = result.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/vector_store.py",
      "line_number": 663,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if metadata.get(key) != value:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 102,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for goal_data in data.get('goals', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform=data.get('platform'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "milestones=data.get('milestones', [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.goals.get(goal_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 324,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_followers = current_metrics.get('followers', 1000)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 335,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_engagement = current_metrics.get('engagement_rate', 3.0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/goals.py",
      "line_number": 346,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "current_posts = current_metrics.get('monthly_posts', 20)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/webhook_security.py",
      "line_number": 131,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/webhook_security.py",
      "line_number": 174,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/webhook_security.py",
      "line_number": 351,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "webhook_timestamp = sig_parts.get('t')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/webhook_security.py",
      "line_number": 352,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "webhook_signature = sig_parts.get('v1')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/webhook_security.py",
      "line_number": 427,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.debug(f\"Created access token for user: {data.get('sub', 'unknown')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security.py",
      "line_number": 83,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.debug(f\"Created refresh token for user: {data.get('sub', 'unknown')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 181,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return cls.PLAN_LIMITS.get(plan, {}).get(quota_type, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 186,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return cls.PLAN_FEATURES.get(plan, {}).get(feature, False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 239,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "upgrade_options = cls.PLAN_UPGRADE_PATHS.get(current_plan, [])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 255,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quota_info = cls.QUOTA_UPGRADE_BENEFITS.get(quota_type, {",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 320,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}.get(blocked_feature, {\"title\": blocked_feature.replace('_', ' ').title(), \"icon\": \"\ud83d\udd12\", \"description\": f\"Access to {blocked_feature.replace('_', ' ')}\"})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 379,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"title\": feature_descriptions.get(feature, feature.replace('_', ' ').title()),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 388,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "quota_title = quota_info.get(\"title\", \"Usage\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 400,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "feature_title = feature_info.get(\"title\", \"Feature\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 465,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "usage = self.redis_client.get(key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 500,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "results = pipeline.execute()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 698,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plan\": upgrade_suggestion.get(\"recommended_plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 752,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plan\": upgrade_suggestion.get(\"recommended_plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/plan_enforcement.py",
      "line_number": 896,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"suggested_plan\": suggestion.get(\"recommended_plan\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 109,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token_data = ':'.join(parts[:-1])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 251,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token = request.headers.get(self.token_manager.csrf_header_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 257,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token = request.headers.get(header_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_cookie = request.cookies.get('session_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 372,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@csrf_router.get(\"/csrf-token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 384,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_id = request.cookies.get('session_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 421,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "token = token_data.get('csrf_token')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/csrf_protection.py",
      "line_number": 429,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "session_id = request.cookies.get('session_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/runbooks.py",
      "line_number": 381,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"connection_pool_usage\": db_stats.get(\"connection_pool_usage\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/runbooks.py",
      "line_number": 382,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"active_connections\": db_stats.get(\"active_connections\", 0),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/runbooks.py",
      "line_number": 424,
      "query_type": "SELECT.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"SELECT * FROM large_table WHERE unindexed_column\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/runbooks.py",
      "line_number": 529,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if any(component.get(\"status\") == \"critical\" for component in health_status.values() if isinstance(component, dict)):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/runbooks.py",
      "line_number": 531,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "elif any(component.get(\"status\") == \"degraded\" for component in health_status.values() if isinstance(component, dict)):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability.py",
      "line_number": 186,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if event.get('transaction') in ['/health', '/render-health', '/metrics']:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/feature_flags.py",
      "line_number": 58,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return bool(feature_flags().get(name, False))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/token_encryption_validator.py",
      "line_number": 283,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.info(f\"\ud83d\udd11 Encryption key backup info generated: ID={backup_info.get('key_id')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 142,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 179,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "minute_count = await self.redis_client.get(minute_key) or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "hour_count = await self.redis_client.get(hour_key) or 0",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 212,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "await pipe.execute()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 361,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "origin = request.headers.get(\"Origin\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 409,
      "query_type": "SELECT.*FROM, DELETE.*FROM, INSERT.*INTO",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"union select\", \"drop table\", \"delete from\", \"insert into\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/security_middleware.py",
      "line_number": 410,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"update set\", \"create table\", \"alter table\", \"exec(\",",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 23,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.vectors_file = os.path.join(index_path, \"vectors.npy\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 24,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = self.metadata.get(str(idx), {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 132,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': metadata.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 133,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': metadata.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': metadata.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 136,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': metadata.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if meta.get('metadata', {}).get('type') == content_type:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 147,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 149,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 150,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 167,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 168,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 182,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 183,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 187,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': meta.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 188,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content': meta.get('content', ''),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 191,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'metadata': meta.get('metadata', {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 192,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'created_at': meta.get('created_at')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = meta.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 218,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type = metadata.get('type', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 222,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = metadata.get('platform', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 223,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_vector_search.py",
      "line_number": 231,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "topic = metadata.get('topic', 'general')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 355,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "details = kwargs.get(\"details\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 390,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.audit_logger.db_session.query(AuditLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 412,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if event.compliance_flags.get(\"pii_involved\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 427,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.audit_logger.db_session.query(AuditLog).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 433,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "events = query.all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 457,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "event_counts[event.event_type] = event_counts.get(event.event_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 488,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "method = scope.get(\"method\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 489,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "path = scope.get(\"path\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 490,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "client_ip = scope.get(\"client\", [\"unknown\", None])[0] if scope.get(\"client\") else \"unknown\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 493,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "headers = dict(scope.get(\"headers\", []))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 494,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_agent = headers.get(b\"user-agent\", b\"\").decode(\"utf-8\", errors=\"ignore\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 501,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response_status = message.get(\"status\", 200)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 87,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if item['metadata'].get('type') == content_type:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 104,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = item['metadata'].get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 132,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "metadata = item.get('metadata', {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 135,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_type = metadata.get('type', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 136,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 139,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = metadata.get('platform', 'unknown')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_memory.py",
      "line_number": 143,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"http.user_agent\": request.headers.get(\"user-agent\", \"\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if self.business_metrics.get('user_registrations'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 302,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if self.business_metrics.get('oauth_connections'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 308,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if self.business_metrics.get('content_generations'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 314,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if self.business_metrics.get('api_rate_limits'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/observability_middleware.py",
      "line_number": 319,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if self.business_metrics.get('webhook_events'):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/http_migration_helper.py",
      "line_number": 60,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return await client.get(url, **kwargs)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/http_migration_helper.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"\"\"Drop-in replacement for requests.get()\"\"\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/http_migration_helper.py",
      "line_number": 163,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return client.get(url, **kwargs)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 97,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 106,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 116,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return \":\".join(identifier_components)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 121,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.headers.get(\"X-Organization-ID\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 211,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-RateLimit-Limit-Minute\"] = str(limits.get(\"minute\", 60))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-RateLimit-Remaining-Minute\"] = str(remaining.get(\"minute\", 0))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 213,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-RateLimit-Limit-Hour\"] = str(limits.get(\"hour\", 1000))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/distributed_security_middleware.py",
      "line_number": 214,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-RateLimit-Remaining-Hour\"] = str(remaining.get(\"hour\", 0))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/error_handler.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if taxonomy_info.get(\"requires_alert\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/error_handler.py",
      "line_number": 285,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"escalation_required\": taxonomy_info.get(\"requires_escalation\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/service_factory.py",
      "line_number": 71,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "scope = self._scopes.get(service_name, 'singleton')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/service_factory.py",
      "line_number": 84,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.get(service_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/service_factory.py",
      "line_number": 89,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "dependencies = self._services.get(service_name, {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/service_factory.py",
      "line_number": 164,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return get_factory().get(service_name, **kwargs)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 307,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "combined_research = \"\\n\\n\".join([item['content'] for item in recent_research])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 463,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "Platform: {content_item['metadata'].get('platform', 'unknown')}",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 482,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'platform': content_item['metadata'].get('platform'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 484,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'original_id': content_item.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 519,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = content_item['metadata'].get('platform', 'twitter')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 520,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "optimal_time = optimal_times.get(platform, '12:00')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/workflow.py",
      "line_number": 523,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'content_id': content_item.get('content_id'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 99,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "items = query.offset(offset).limit(params.page_size).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 159,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(cursor_col < params.cursor)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 161,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(cursor_col > params.cursor)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 173,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "items = query.limit(params.limit + 1).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 247,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(or_(*search_conditions))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/pagination.py",
      "line_number": 317,
      "query_type": "\\.execute\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.session.execute(count_query).scalar()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 50,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "endpoint_metrics[\"status_codes\"][status_str] = endpoint_metrics[\"status_codes\"].get(status_str, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 225,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if \"postgresql\" in optimized.get(\"url\", \"\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 226,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "connect_args = optimized.get(\"connect_args\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 294,
      "query_type": "DELETE.*FROM",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"\"\"Delete value from cache\"\"\"",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 331,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_result = cache_optimizer.get(cache_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/performance.py",
      "line_number": 350,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "cached_result = cache_optimizer.get(cache_key)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing_alert = self.active_alerts.get(alert.id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 215,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "alert = self.active_alerts.get(alert_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 240,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "alert = self.active_alerts.get(alert_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 298,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sources[alert.source] = sources.get(alert.source, 0) + 1",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 356,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "policy = self.escalation_policies.get(policy_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 391,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "channel = self.notification_channels.get(channel_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 420,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "msg['To'] = ', '.join(config['to_emails'])",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 465,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}.get(alert.severity, \"warning\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 468,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"channel\": config.get(\"channel\", \"#alerts\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 469,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": config.get(\"username\", \"AlertBot\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 501,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "headers = config.get(\"headers\", {\"Content-Type\": \"application/json\"})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 545,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "slack_channel = self.notification_channels.get(\"slack_ops\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 549,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"channel\": slack_channel.config.get(\"channel\", \"#alerts\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 550,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": slack_channel.config.get(\"username\", \"AlertBot\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 564,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "slack_channel = self.notification_channels.get(\"slack_ops\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 573,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"channel\": slack_channel.config.get(\"channel\", \"#alerts\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 574,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"username\": slack_channel.config.get(\"username\", \"AlertBot\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 618,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "labels=kwargs.get(\"labels\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 619,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 634,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "labels=kwargs.get(\"labels\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 635,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 650,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "labels=kwargs.get(\"labels\", {}),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/alerting.py",
      "line_number": 651,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/env_validator.py",
      "line_number": 195,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "result[\"errors\"].append(f\"Value must be one of: {', '.join(rule['allowed_values'])}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_goals.py",
      "line_number": 56,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "for goal_data in data.get('goals', []):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/simple_goals.py",
      "line_number": 116,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return self.goals.get(goal_id)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/tiers.py",
      "line_number": 212,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "limit = limits.get(usage_type)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/tiers.py",
      "line_number": 221,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if usage_data.get('platforms', 0) >= current_config.max_platforms:",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/tiers.py",
      "line_number": 229,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if usage_data.get('daily_posts', 0) >= current_config.max_posts_per_day * 0.8:  # 80% threshold",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/tiers.py",
      "line_number": 244,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "'benefit': f'Get {\", \".join(missing_features[:3])}'",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/tiers.py",
      "line_number": 354,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_tier = kwargs.get('user_tier', SubscriptionTier.BASE)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 144,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = self.db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 146,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 238,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = self.db.query(DeadLetterTask)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 241,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(DeadLetterTask.queue_name == queue_name)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 244,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(DeadLetterTask.failure_reason == failure_reason.value)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 255,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return query.limit(limit).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 272,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "dlq_task = self.db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 274,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 307,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "deleted_count = self.db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 330,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_failed = self.db.query(DeadLetterTask).count()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 333,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "queue_stats = self.db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 336,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").group_by(DeadLetterTask.queue_name).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 339,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reason_stats = self.db.query(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 342,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").group_by(DeadLetterTask.failure_reason).all()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 345,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "manual_review_count = self.db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/dlq.py",
      "line_number": 352,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "recent_failures = self.db.query(DeadLetterTask).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/token_encryption.py",
      "line_number": 330,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform = token_data.get(\"platform\", \"unknown\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/token_encryption.py",
      "line_number": 347,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "expires_at = token_data.get(\"expires_at\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/token_encryption.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logger.warning(f\"Access token expired for platform {token_data.get('platform')}\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/core/token_encryption.py",
      "line_number": 376,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return token_data.get(\"access_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 45,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id_header = request.headers.get(\"X-Organization-ID\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 64,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 100,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id_header = request.headers.get(\"X-Organization-ID\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 112,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 144,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_level = role_hierarchy.get(tenant_context.role, 0)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_context.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "required_level = role_hierarchy.get(required_role, 999)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "refresh_token = request.cookies.get(\"refresh_token\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 224,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 270,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if payload.get(\"type\") != \"refresh\":",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 329,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 332,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "original_ip = session_info.client_info.get(\"ip_address\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 341,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "original_ua = session_info.client_info.get(\"user_agent\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 365,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 369,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 401,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_message = auth_result.get(\"error\", \"Authentication required\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 402,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "reason = auth_result.get(\"reason\", \"authentication_failed\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 431,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if auth_result.get(\"session_id\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 434,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if auth_result.get(\"refreshed\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 438,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if auth_result.get(\"new_refresh_token\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 448,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if auth_result.get(\"new_access_token\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 472,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 72,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "flags_str = \"', '\".join(flag_names)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 104,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "disabled_str = \"', '\".join(disabled_flags)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 192,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"auth0_disabled\": not flags.get(\"AUTH0_ENABLED\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 193,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"workflow_v2_enabled\": flags.get(\"WORKFLOW_V2\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 194,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"deep_research_available\": flags.get(\"ENABLE_DEEP_RESEARCH\", False),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"using_stub_integrations\": flags.get(\"USE_STUB_INTEGRATIONS\", False)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 126,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data.get('content') or",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 127,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data.get('text') or",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 128,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data.get('caption') or",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 129,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data.get('description') or",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_data.get('message') or",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 140,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "platform=content_data.get('platform', 'general'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 153,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"platform\": content_data.get('platform', 'general'),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 178,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "safety_level = safety_result.get(\"safety_level\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 194,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"safety_level\": safety_result.get(\"safety_level\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 195,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"brand_alignment_score\": safety_result.get(\"brand_alignment_score\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 196,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"violations\": safety_result.get(\"violations\", [])[:3],  # Limit for response size",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 197,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"recommendations\": safety_result.get(\"recommendations\", [])[:3],",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 198,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"review_required\": safety_result.get(\"review_required\", True)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 228,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"brand_alignment_score\": safety_result.get(\"brand_alignment_score\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 229,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"publish_approved\": safety_result.get(\"publish_approved\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 230,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"violations_count\": len(safety_result.get(\"violations\", [])),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 231,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"confidence_score\": safety_result.get(\"confidence_score\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/global_feature_flag_middleware.py",
      "line_number": 146,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-AI-Features-Enabled\"] = str(flags.get(\"AI_CONTENT_GENERATION\", False))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/global_feature_flag_middleware.py",
      "line_number": 148,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "response.headers[\"X-Admin-Access-Enabled\"] = str(flags.get(\"ADMIN_ACCESS\", False))",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/global_feature_flag_middleware.py",
      "line_number": 235,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/feature-requirements\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/error_tracking.py",
      "line_number": 29,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "if request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/error_tracking.py",
      "line_number": 107,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"request_id\": request_info.get(\"headers\", {}).get(\"x-request-id\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/error_tracking.py",
      "line_number": 150,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\"),",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/error_tracking.py",
      "line_number": 151,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"referer\": request.headers.get(\"referer\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 117,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.headers.get(self.tenant_header)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 123,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.query_params.get(self.tenant_query_param)",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.path_params.get('organization_id') or request.path_params.get('org_id')",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 190,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "organization = db.query(Organization).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 192,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 241,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_org_role = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 260,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "user_org_role = db.query(UserOrganizationRole).filter(",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 113,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "authorization = request.headers.get(\"Authorization\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 153,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.query_params.get(\"organization_id\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 161,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "org_id = request.headers.get(\"X-Organization-ID\")",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 193,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "}).first()",
      "risk_level": "HIGH",
      "recommendation": "Query lacks organization filtering - potential data leak"
    }
  ],
  "medium_risk_queries": [
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 31,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 34,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 138,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 207,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "update_data = settings_update.dict(exclude_unset=True)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 216,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "logger.info(f\"Updated user settings for user {current_user.id}: {list(update_data.keys())}\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_settings.py",
      "line_number": 241,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "detail=\"Failed to update user settings\"",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 274,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "@router.get(\"/me\", response_model=UserProfile)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 326,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = payload.get(\"sub\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 327,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "email = payload.get(\"email\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 328,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "username = payload.get(\"username\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 337,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == int(user_id)).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 367,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "expires_at=datetime.fromtimestamp(payload.get(\"exp\"), tz=timezone.utc)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 435,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = payload.get(\"sub\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 439,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "existing_blacklist = db.query(RefreshTokenBlacklist).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth.py",
      "line_number": 447,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "expires_at=datetime.fromtimestamp(payload.get(\"exp\"), tz=timezone.utc)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 106,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(SocialInteraction.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 129,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "high_priority_count = db.query(SocialInteraction).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 161,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 202,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 235,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 337,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(ResponseTemplate.priority.desc()).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_inbox.py",
      "line_number": 390,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(CompanyKnowledge.topic == topic)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 86,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memory = db.query(Memory).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 269,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "total_memories = db.query(Memory).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/memory_vector.py",
      "line_number": 273,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "indexed_memories = db.query(Memory).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 97,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "timestamp_str = log_entry.get('timestamp', '')",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 114,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "errors = [e for e in errors if e.get('severity') == severity]",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "all_logs.sort(key=lambda x: x.get('timestamp', ''), reverse=True)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 159,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "sev = error.get('severity', 'unknown')",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 160,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "severity_counts[sev] = severity_counts.get(sev, 0) + 1",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 165,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "endpoint = error.get('endpoint', 'unknown')",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 166,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "endpoint_counts[endpoint] = endpoint_counts.get(endpoint, 0) + 1",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 224,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/logs\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 252,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/logs/stats\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 261,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "error_data['severity'] = error_data.get('severity', 'error')",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "return {\"status\": \"logged\", \"id\": error_data.get('id')}",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 302,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/logs/export\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/system_logs.py",
      "line_number": 335,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/health/detailed\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 93,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform_url=result.get(\"permalink\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 247,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(ResearchData.created_at.desc()).limit(limit).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 297,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_model=generated_content.get(\"model\", \"openai-gpt\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 373,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"last_collection\": status.get(\"last_update\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 374,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"platforms\": status.get(\"platforms\", {}),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/integration_services.py",
      "line_number": 375,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"metrics_count\": status.get(\"total_metrics\", 0)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 123,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 128,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentItem.platform.in_(platform_list))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 551,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 554,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentItem.created_at >= date_from)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 556,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentItem.created_at <= date_to)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_history.py",
      "line_number": 681,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 227,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = current_user.get('user_id')",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_deletion.py",
      "line_number": 314,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/similarity.py",
      "line_number": 253,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 426,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == current_user.id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content_real.py",
      "line_number": 705,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").group_by(ContentLog.platform).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 272,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_auth.py",
      "line_number": 315,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/monitoring.py",
      "line_number": 503,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 73,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 115,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 151,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 173,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 227,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 251,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/user_credentials.py",
      "line_number": 301,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 73,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user.id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 87,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_count = db.query(Content).filter(Content.user_id == user.id).limit(1000).count()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 107,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "goal_count = db.query(Goal).filter(Goal.user_id == user.id).limit(50).count()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/ai_suggestions.py",
      "line_number": 116,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memory_count = db.query(Memory).filter(Memory.user_id == user.id).limit(100).count()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 115,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "event_id=result.get(\"event_id\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/key_rotation.py",
      "line_number": 116,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "key_id=result.get(\"key_id\") or result.get(\"new_key_id\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 110,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/dashboard_metrics.py",
      "line_number": 112,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").group_by(SocialPlatformConnection.platform).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 139,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = self.db.query(Metric).filter(Metric.user_id == user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 142,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Metric.date_recorded >= date_start)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 144,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Metric.date_recorded <= date_end)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 160,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_query = self.db.query(ContentLog).filter(ContentLog.user_id == user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 162,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_query = content_query.filter(ContentLog.created_at >= date_start)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 164,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_query = content_query.filter(ContentLog.created_at <= date_end)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 165,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_logs = content_query.all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 168,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_content_query = self.db.query(Content).filter(Content.user_id == user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 170,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_content_query = ai_content_query.filter(Content.created_at >= date_start)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 172,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_content_query = ai_content_query.filter(Content.created_at <= date_end)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 173,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_content = ai_content_query.all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 176,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memories_query = self.db.query(Memory).filter(Memory.user_id == user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 178,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memories_query = memories_query.filter(Memory.created_at >= date_start)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 180,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memories_query = memories_query.filter(Memory.created_at <= date_end)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 181,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memories = memories_query.all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 303,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = self.db.query(WorkflowExecution).filter(WorkflowExecution.user_id == user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 306,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(WorkflowExecution.created_at >= date_start)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 308,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(WorkflowExecution.created_at <= date_end)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 392,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "goals = self.db.query(Goal).filter(Goal.user_id == user.id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/data_export.py",
      "line_number": 405,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "notifications = self.db.query(Notification).filter(Notification.user_id == user.id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 87,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(WorkflowExecution).filter(WorkflowExecution.user_id == current_user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 90,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(WorkflowExecution.workflow_type == workflow_type)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 92,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(WorkflowExecution.status == status)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 109,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 127,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 160,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 189,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 192,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "recent_completed = db.query(WorkflowExecution).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/workflow_v2.py",
      "line_number": 195,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(WorkflowExecution.completed_at.desc()).limit(5).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/linkedin_oauth.py",
      "line_number": 329,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "data={\"post_id\": result.get(\"post_id\"), \"content_length\": len(post_data.content)}",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 352,
      "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db_session.query(ContentLog).filter(ContentLog.user_id == current_user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 355,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 357,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.status == status)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 385,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == current_user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 388,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentItem.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 390,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentItem.status == status)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 428,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 447,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 485,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 524,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 551,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 585,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(ContentLog.scheduled_for).limit(page_size).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 627,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(ContentLog.created_at.desc()).limit(page_size).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1026,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/content.py",
      "line_number": 1033,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == current_user.id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 145,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "authorization = request.headers.get(\"Authorization\", \"\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 156,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/auth/me\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 177,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/dashboard\", response_model=AdminDashboardStats)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 188,
      "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_users = db.query(func.count(User.id)).scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 190,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "active_users_today = db.query(func.count(User.id)).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 192,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar() if hasattr(User, 'last_login') else 0",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 194,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "new_users_this_week = db.query(func.count(User.id)).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 196,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 198,
      "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_content_items = db.query(func.count(ContentItem.id)).scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 200,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "content_created_today = db.query(func.count(ContentItem.id)).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 202,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 205,
      "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "total_api_requests = db.query(func.sum(UserManagement.monthly_requests_used)).scalar() or 0",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 208,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "failed_logins_today = db.query(func.count(AdminAuditLog.id)).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 213,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 216,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "suspended_users = db.query(func.count(UserManagement.id)).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 218,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 233,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/users\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 246,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(User).options(joinedload(User.management_info))",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 250,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 259,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(User.is_active == is_active)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 262,
      "query_type": "\\.join\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.join(UserManagement, User.id == UserManagement.user_id, isouter=True)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 263,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(UserManagement.is_suspended == is_suspended)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 270,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "users = query.offset(offset).limit(limit).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 311,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/users/{user_id}\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 319,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).options(joinedload(User.management_info)).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 324,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_stats = db.query(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 326,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "func.count(ContentItem.id).filter(ContentItem.status == \"published\").label(\"published_content\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 327,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "func.count(ContentItem.id).filter(ContentItem.status == \"draft\").label(\"draft_content\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 328,
      "query_type": "\\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").filter(ContentItem.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 331,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "recent_content = db.query(ContentItem).filter(ContentItem.user_id == user_id).order_by(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 333,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").limit(10).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 396,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"\"\"Update user management settings\"\"\"",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 398,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 403,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 423,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "update_dict = update_data.dict(exclude_unset=True)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 476,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 485,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 544,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 548,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 597,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "existing = db.query(AdminUser).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 602,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 656,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/admin-users\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 663,
      "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "admin_users = db.query(AdminUser).order_by(AdminUser.created_at.desc()).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 683,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/settings\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 702,
      "query_type": "UPDATE.*SET",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"updated_at\": setting.updated_at",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 771,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/audit-logs\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 784,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(AdminAuditLog).options(joinedload(AdminAuditLog.admin_user))",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 788,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(AdminAuditLog.action == action)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 791,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(AdminAuditLog.admin_user_id == admin_user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 794,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(AdminAuditLog.created_at >= start_date)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 797,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(AdminAuditLog.created_at <= end_date)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 804,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "logs = query.order_by(desc(AdminAuditLog.created_at)).offset(offset).limit(limit).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 908,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/registration-keys\", response_model=Dict[str, Any])",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 918,
      "query_type": "\\.query\\(, db\\.query\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = db.query(RegistrationKey).options(joinedload(RegistrationKey.created_by_admin))",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 921,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "query = query.filter(RegistrationKey.is_active == True)",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 927,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "keys = query.order_by(desc(RegistrationKey.created_at)).offset((page - 1) * limit).limit(limit).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 963,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "registration_key = db.query(RegistrationKey).filter(RegistrationKey.id == key_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 991,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "registration_key = db.query(RegistrationKey).filter(RegistrationKey.id == key_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 1019,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "@router.get(\"/migration/tier-to-plan/status\")",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 1068,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"migration_run\": result.get(\"migration_run\", False),",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 1069,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"stats\": result.get(\"stats\", {}),",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 1070,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"verification\": result.get(\"verification\", {})",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/admin.py",
      "line_number": 1076,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": false,
      "query_snippet": "\"message\": \"Tier migration completed successfully\" if result.get(\"migration_run\") else \"No migration was needed\",",
      "risk_level": "MEDIUM",
      "recommendation": "Admin/system query - verify proper authorization"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 59,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id=payload.get(\"sub\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 60,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "auth_method=\"auth0\" if \"@\" in payload.get(\"sub\", \"\") else \"local\",",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_management.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "expires_at=payload.get(\"exp\", 0),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 146,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(Goal).filter(Goal.user_id == current_user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 149,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Goal.status == status)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 151,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Goal.goal_type == goal_type)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 174,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 196,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 234,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 317,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 343,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 369,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 396,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 415,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 538,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(GoalProgress.recorded_at).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 541,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "current_goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 600,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 684,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 724,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 750,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 797,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 875,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 915,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(Goal.target_date).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 972,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(Goal.completed_at.desc()).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 979,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(Milestone.achieved_at.desc()).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1021,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1029,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/goals_v2.py",
      "line_number": 1036,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 229,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(Notification).filter(Notification.user_id == current_user.id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 233,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Notification.is_read.is_(False))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 268,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "unread_count = db.query(Notification).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 287,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(desc(Notification.created_at)).limit(5).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 314,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 348,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 410,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/notifications.py",
      "line_number": 449,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 542,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 545,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 604,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 607,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 675,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/auth_open.py",
      "line_number": 678,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 265,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 269,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "facebook_connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 273,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 328,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 332,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "instagram_connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 336,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 408,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 412,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "twitter_connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 416,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 470,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 474,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "twitter_connection = db.query(SocialPlatformConnection).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/webhooks.py",
      "line_number": 478,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 206,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 258,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 263,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "existing_connection.platform_user_id = user_info.get(\"id\", user_info.get(\"user_id\", \"\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 264,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "existing_connection.platform_username = user_info.get(\"username\", user_info.get(\"display_name\", \"\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 265,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "existing_connection.platform_display_name = user_info.get(\"name\", user_info.get(\"display_name\", \"\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 266,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "existing_connection.profile_image_url = user_info.get(\"profile_image_url\", user_info.get(\"profile_picture\", \"\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 277,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform_user_id=user_info.get(\"id\", user_info.get(\"user_id\", \"\")),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 278,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform_username=user_info.get(\"username\", user_info.get(\"display_name\", \"\")),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 279,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform_display_name=user_info.get(\"name\", user_info.get(\"display_name\", \"\")),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 280,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "profile_image_url=user_info.get(\"profile_image_url\", user_info.get(\"profile_picture\", \"\")),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 299,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"platform_user_id\": user_info.get(\"id\", \"\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 411,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 443,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 491,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 589,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 743,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(SocialPost.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 774,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 813,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 816,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "recent_posts = db.query(SocialPost).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/api/social_platforms.py",
      "line_number": 819,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(SocialPost.posted_at.desc()).limit(10).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 188,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = self.db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/subscription_service.py",
      "line_number": 361,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = self.db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 403,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".filter(ContentItem.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 404,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".filter(ContentItem.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 405,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".filter(ContentItem.published_at >= cutoff_date)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/platform_optimization_service.py",
      "line_number": 406,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 50,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 212,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == goal.user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 217,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "client_class = self.social_clients.get(goal.platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/goals_progress_service.py",
      "line_number": 331,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/multi_tenant_service.py",
      "line_number": 270,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "results = self.db.execute(query, {\"user_id\": user_id}).fetchall()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 276,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "return result.scalar() or 0",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/plan_aware_social_service.py",
      "line_number": 294,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "connections = result.scalars().all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/industry_classification_service.py",
      "line_number": 212,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 300,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "resource_id=payload.get('resourceId', ''),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/webhook_service.py",
      "line_number": 325,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "resource_id=payload.get('data', {}).get('video_id', ''),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 331,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 387,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = db.query(Notification).filter(Notification.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 390,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(Notification.is_read == False)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/notification_service.py",
      "line_number": 413,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "unread_notifications = db.query(Notification).filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/file_upload_service.py",
      "line_number": 342,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 669,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id=context.get(\"user_id\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 670,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "session_id=context.get(\"session_id\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 671,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "request_id=context.get(\"request_id\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 672,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "endpoint=context.get(\"endpoint\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 673,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_agent=context.get(\"user_agent\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/error_taxonomy_service.py",
      "line_number": 674,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ip_address=context.get(\"ip_address\") if context else None,",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 59,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = user_data.get(\"id\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 60,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "username = user_data.get(\"username\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/x_connection_service.py",
      "line_number": 61,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "name = user_data.get(\"name\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 272,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 298,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "result = self.db.execute(query, {",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 332,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_result = self.db.execute(content_query, {'user_id': user_id})",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/pgvector_service.py",
      "line_number": 333,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "memory_result = self.db.execute(memory_query, {'user_id': user_id})",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 57,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".filter(ContentItem.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/cache_warmup_service.py",
      "line_number": 58,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ".filter(ContentItem.created_at >= datetime.now(timezone.utc) - timedelta(days=days_back))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 289,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "author_platform_id=sender.get('id', ''),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 329,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "author_platform_id=sender.get('id', ''),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/social_webhook_service.py",
      "line_number": 534,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/plan_service.py",
      "line_number": 38,
      "query_type": "\\.execute\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "plan_result = self.db.execute(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/x_mentions_service.py",
      "line_number": 66,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "since_id = connection.platform_metadata.get(\"mentions_since_id\") if connection.platform_metadata else None",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 131,
      "query_type": "\\.scalar\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").scalar()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/usage_tracking_service.py",
      "line_number": 241,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").group_by(UsageRecord.usage_type).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 375,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(desc(ContentItem.published_at)).limit(50).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/performance_tracking.py",
      "line_number": 570,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 398,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first() if db else None",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 402,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ig_data = user_settings.connected_accounts.get(\"instagram\", {})",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 737,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 819,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first() if db else None",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/instagram_service.py",
      "line_number": 823,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ig_data = user_settings.connected_accounts.get(\"instagram\", {})",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/redis_cache.py",
      "line_number": 281,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "result = self.fallback_cache.get(platform, operation, user_id=user_id, resource_id=resource_id, **kwargs)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 227,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").order_by(ResponseTemplate.priority.desc()).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 464,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/personality_response_engine.py",
      "line_number": 474,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 78,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = self.db.query(ContentLog).filter(ContentLog.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 82,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 141,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 271,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 273,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.platform == platform)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/content_persistence_service.py",
      "line_number": 275,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(ContentLog.scheduled_for <= before)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/websocket_manager.py",
      "line_number": 97,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = self.websocket_users.get(websocket)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 66,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_obj = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 311,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_obj = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 351,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_type=content_idea.get(\"content_type\", \"text\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 353,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "engagement_data={\"hashtags\": content_idea.get(\"hashtags\", [])},",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 379,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_type=content_idea.get(\"content_type\", \"text\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 464,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform=idea.get(\"platform\", \"twitter\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/services/autonomous_posting.py",
      "line_number": 466,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_type=idea.get(\"content_type\", \"text\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "line_number": 353,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"overdue_keys\": len([k for k, v in report[\"key_details\"].items() if v.get(\"is_overdue\")]),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/goals_tasks.py",
      "line_number": 188,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_goals = db.query(Goal).filter(Goal.user_id == user_id).all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 246,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "content_type=content_config.get(\"content_type\", \"post\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 247,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "status=\"scheduled\" if content_config.get(\"auto_schedule\") else \"draft\",",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/automation_tasks.py",
      "line_number": 248,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "ai_model=content_result.get(\"model\", \"openai-gpt\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/webhook_tasks.py",
      "line_number": 615,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"entry_id\": event_info.get(\"entry_id\"),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 65,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 74,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 410,
      "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "line_number": 566,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 92,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 93,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 171,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 172,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 246,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 247,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "line_number": 391,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/tasks/posting_tasks.py",
      "line_number": 63,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 397,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "query = query.filter(AuditLog.user_id == user_id)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/core/audit_logger.py",
      "line_number": 399,
      "query_type": "\\.all\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "events = query.all()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 66,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "request.state.session_id = auth_result.get(\"session_id\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 157,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 158,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "session_id = payload.get(\"session_id\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 275,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = int(payload.get(\"sub\"))",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "line_number": 276,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "session_id = payload.get(\"session_id\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 141,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id=content_data.get('user_id')",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 217,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = content_data.get('user_id', 'unknown')",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 218,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "platform = content_data.get('platform', 'general')",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "line_number": 219,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "safety_level = safety_result.get('safety_level')",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 219,
      "query_type": "\\.filter\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").filter(",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/tenant_isolation.py",
      "line_number": 263,
      "query_type": "\\.first\\(\\)",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": ").first()",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/subscription_enforcement.py",
      "line_number": 134,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "limit_value = limits.get(limit_key, 0)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 125,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "user_id = payload.get(\"user_id\")",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    },
    {
      "file_path": "backend/middleware/multi_tenant.py",
      "line_number": 130,
      "query_type": "\\.get\\(",
      "has_org_filter": false,
      "has_user_filter": true,
      "query_snippet": "tenant_context.is_superuser = payload.get(\"is_superuser\", False)",
      "risk_level": "MEDIUM",
      "recommendation": "Query filtered by user_id - verify user belongs to organization"
    }
  ],
  "file_summaries": {
    "backend/api/user_settings.py": {
      "file_path": "backend/api/user_settings.py",
      "total_queries": 12,
      "secure_queries": 6,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 31,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 34,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 100,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "class UpdateUserSettingsRequest(BaseModel):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 138,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=UserSettingsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 197,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "async def update_user_settings(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 198,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "settings_update: UpdateUserSettingsRequest,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 202,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"\"\"Update current user's settings\"\"\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 207,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "update_data = settings_update.dict(exclude_unset=True)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 216,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "logger.info(f\"Updated user settings for user {current_user.id}: {list(update_data.keys())}\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 241,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "detail=\"Failed to update user settings\"",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_settings.py",
          "line_number": 244,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/defaults\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/two_factor.py": {
      "file_path": "backend/api/two_factor.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/api/two_factor.py",
          "line_number": 22,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\", response_model=TwoFactorStatusResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/auth.py": {
      "file_path": "backend/api/auth.py",
      "total_queries": 21,
      "secure_queries": 9,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/api/auth.py",
          "line_number": 72,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "registration_key = db.query(RegistrationKey).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 74,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 95,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_user = db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 97,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 179,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "@router.get(\"/me\", response_model=UserProfile)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 308,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if payload.get(\"type\") != \"refresh\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 315,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "jti = payload.get(\"jti\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 317,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "blacklisted = db.query(RefreshTokenBlacklist).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 319,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 326,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = payload.get(\"sub\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "email = payload.get(\"email\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 328,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "username = payload.get(\"username\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 337,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == int(user_id)).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 367,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "expires_at=datetime.fromtimestamp(payload.get(\"exp\"), tz=timezone.utc)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 434,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "jti = payload.get(\"jti\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 435,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = payload.get(\"sub\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 439,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "existing_blacklist = db.query(RefreshTokenBlacklist).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 441,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 447,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "expires_at=datetime.fromtimestamp(payload.get(\"exp\"), tz=timezone.utc)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth.py",
          "line_number": 462,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/verify\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/social_inbox.py": {
      "file_path": "backend/api/social_inbox.py",
      "total_queries": 31,
      "secure_queries": 7,
      "risky_queries": 24,
      "issues_found": [
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 88,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/interactions\", response_model=InteractionListResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 101,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 106,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(SocialInteraction.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 109,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(SocialInteraction.status == status)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 112,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(SocialInteraction.intent == intent)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 121,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 124,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "unread_count = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 129,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "high_priority_count = db.query(SocialInteraction).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 158,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 161,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 199,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 202,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 232,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 235,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 328,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/templates\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 334,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "templates = db.query(ResponseTemplate).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 337,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(ResponseTemplate.priority.desc()).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/knowledge-base\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 384,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(CompanyKnowledge).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 390,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(CompanyKnowledge.topic == topic)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 394,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 398,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/knowledge-base/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 404,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_entries = db.query(CompanyKnowledge).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 467,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Hub-Signature-256', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 501,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Hub-Signature-256', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 526,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 591,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = db.query(InteractionResponse).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 593,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 606,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = db.query(InteractionResponse).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 608,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_inbox.py",
          "line_number": 636,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ws/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/memory_vector.py": {
      "file_path": "backend/api/memory_vector.py",
      "total_queries": 17,
      "secure_queries": 3,
      "risky_queries": 14,
      "issues_found": [
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 86,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memory = db.query(Memory).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 88,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 128,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memory = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 130,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 152,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/high-performing\", response_model=List[VectorMemoryResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 170,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memory = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 172,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 193,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/repurposing-candidates\", response_model=List[VectorMemoryResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 211,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memory = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 213,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 238,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/patterns\", response_model=ContentPatternAnalysis)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 269,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "total_memories = db.query(Memory).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 273,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "indexed_memories = db.query(Memory).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 322,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/by-type/{memory_type}\", response_model=List[VectorMemoryResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 340,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memory = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_vector.py",
          "line_number": 342,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/system_logs.py": {
      "file_path": "backend/api/system_logs.py",
      "total_queries": 13,
      "secure_queries": 13,
      "risky_queries": 0,
      "issues_found": [
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 97,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "timestamp_str = log_entry.get('timestamp', '')",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 114,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "errors = [e for e in errors if e.get('severity') == severity]",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "all_logs.sort(key=lambda x: x.get('timestamp', ''), reverse=True)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 159,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sev = error.get('severity', 'unknown')",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 160,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "severity_counts[sev] = severity_counts.get(sev, 0) + 1",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "endpoint = error.get('endpoint', 'unknown')",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 166,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "endpoint_counts[endpoint] = endpoint_counts.get(endpoint, 0) + 1",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 224,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/logs\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 252,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/logs/stats\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 261,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_data['severity'] = error_data.get('severity', 'error')",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return {\"status\": \"logged\", \"id\": error_data.get('id')}",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 302,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/logs/export\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/system_logs.py",
          "line_number": 335,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health/detailed\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        }
      ]
    },
    "backend/api/integration_services.py": {
      "file_path": "backend/api/integration_services.py",
      "total_queries": 16,
      "secure_queries": 6,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 93,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform_url=result.get(\"permalink\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"permalink\": result.get(\"permalink\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 110,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/instagram/insights/{post_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 172,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/facebook/insights/{post_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 234,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/research/results\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 244,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = db.query(ResearchData).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 247,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(ResearchData.created_at.desc()).limit(limit).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_model=generated_content.get(\"model\", \"openai-gpt\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "prompt_used=generated_content.get(\"prompt\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"hashtags\": generated_content.get(\"hashtags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 312,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_prediction\": generated_content.get(\"engagement_score\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 349,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/workflow/status/{workflow_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 362,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics/collection\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"last_collection\": status.get(\"last_update\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 374,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"platforms\": status.get(\"platforms\", {}),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/integration_services.py",
          "line_number": 375,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"metrics_count\": status.get(\"total_metrics\", 0)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/api/content_history.py": {
      "file_path": "backend/api/content_history.py",
      "total_queries": 40,
      "secure_queries": 6,
      "risky_queries": 34,
      "issues_found": [
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/history\", response_model=ContentHistoryResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 123,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 128,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentItem.platform.in_(platform_list))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 132,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.content_type.in_(type_list))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 136,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.performance_tier.in_(tier_list))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 140,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.topic_category.in_(category_list))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 144,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.sentiment.in_(sentiment_list))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 147,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.created_at >= date_from)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 150,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.created_at <= date_to)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 153,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.engagement_rate >= min_engagement)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 156,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.engagement_rate <= max_engagement)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 160,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.content.ilike(search_pattern))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 187,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "items = query.offset(offset).limit(page_size).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 236,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{content_id}/analytics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 246,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(ContentItem.id == content_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 264,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"content\": result.get('content', '')[:100] + '...',",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_rate\": result.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 269,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = db.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 271,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(desc(ContentPerformanceSnapshot.snapshot_time)).limit(10).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/summary\", response_model=ContentAnalytics)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 326,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_query = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 334,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = content_query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 364,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platforms_summary[item.platform] = platforms_summary.get(item.platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 368,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "performance_distribution[tier] = performance_distribution.get(tier, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 372,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "category_distribution[category] = category_distribution.get(category, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sentiment_distribution[sentiment] = sentiment_distribution.get(sentiment, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 492,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 494,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 532,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/export\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 551,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 554,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentItem.created_at >= date_from)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 556,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentItem.created_at <= date_to)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 559,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.platform.in_(platform_list))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 561,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = query.order_by(desc(ContentItem.created_at)).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 676,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 681,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 687,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 714,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/statistics/performance\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 729,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/categories\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_history.py",
          "line_number": 735,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "categories = db.query(ContentCategory).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/legal_documents.py": {
      "file_path": "backend/api/legal_documents.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/api/legal_documents.py",
          "line_number": 23,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/privacy-policy\", response_class=HTMLResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/legal_documents.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/terms-of-service\", response_class=HTMLResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/legal_documents.py",
          "line_number": 407,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/data-deletion-instructions\", response_class=HTMLResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/legal_documents.py",
          "line_number": 550,
          "query_type": "DELETE.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "<p>To delete data from social media platforms, you must:</p>",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/legal_documents.py",
          "line_number": 618,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/billing.py": {
      "file_path": "backend/api/billing.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/api/billing.py",
          "line_number": 173,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/subscription\", response_model=SubscriptionInfoResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/plans\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sig_header = request.headers.get(\"stripe-signature\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 464,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not subscription_info.get(\"has_active_subscription\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 488,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cancellation_date=cancellation_result.get(\"cancelled_at\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 489,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "effective_date=cancellation_result.get(\"effective_date\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 579,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/compliance-disclosures\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/billing.py",
          "line_number": 628,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/data_deletion.py": {
      "file_path": "backend/api/data_deletion.py",
      "total_queries": 20,
      "secure_queries": 8,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 55,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Connection deletion requested: {connection_id} by user {current_user.get('user_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 58,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "SocialConnection.organization_id == current_user.get('organization_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 61,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if unsubscribe_result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "warning_msg = f\"Webhook unsubscription warning: {unsubscribe_result.get('error', 'unknown')}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 142,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=current_user.get('user_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 227,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = current_user.get('user_id')",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 228,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "organization_id = current_user.get('organization_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 253,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 255,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 292,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_audit_logs = db.query(SocialAudit).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 297,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 314,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 350,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/retention-policy\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 418,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not current_user.get('is_admin'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 426,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expired_logs_query = db.query(SocialAudit).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 443,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expired_logs = expired_logs_query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_deletion.py",
          "line_number": 468,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/similarity.py": {
      "file_path": "backend/api/similarity.py",
      "total_queries": 17,
      "secure_queries": 1,
      "risky_queries": 16,
      "issues_found": [
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 89,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 170,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 250,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "original_content = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 253,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 264,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid platforms: {', '.join(invalid_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_rate\": high_performing[0].engagement_metrics.get(\"engagement_rate\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 375,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_rate\": c.engagement_metrics.get(\"engagement_rate\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 395,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/trending\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 413,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 422,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 424,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.content_type == content_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 430,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 510,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "distribution[content_type] = distribution.get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 519,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "distribution[platform] = distribution.get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 535,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "c.engagement_metrics.get(\"engagement_rate\", 0) * c.similarity_score",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 587,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "suggestions.append(f\"Consider using popular hashtags: {', '.join(top_hashtags)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/similarity.py",
          "line_number": 598,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "suggestions.extend(platform_suggestions.get(platform, []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/memory.py": {
      "file_path": "backend/api/memory.py",
      "total_queries": 9,
      "secure_queries": 1,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/api/memory.py",
          "line_number": 17,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 87,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/content/{content_type}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/high-performing\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 125,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/repurpose\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 187,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type = meta.get('metadata', {}).get('type', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_types[content_type] = content_types.get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "[meta.get('created_at', '') for meta in memory_system.metadata.values()],",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        }
      ]
    },
    "backend/api/plan_aware_images.py": {
      "file_path": "backend/api/plan_aware_images.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/api/plan_aware_images.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/capabilities\", response_model=ImageCapabilitiesResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_aware_images.py",
          "line_number": 158,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/usage\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_aware_images.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/models\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/template_validation.py": {
      "file_path": "backend/api/template_validation.py",
      "total_queries": 13,
      "secure_queries": 1,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 44,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if any(model in issue.details.get(\"model\", \"\") for model in request.models)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/models/{model_name}/validate\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/coverage/report\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"template_class\": model_info.get(\"template_class\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 277,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"capabilities\": model_info.get(\"capabilities\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"configuration\": model_info.get(\"configuration\", {}),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_tested\": model_info.get(\"last_tested\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if model in issue.details.get(\"model\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 355,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if fix_result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 358,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"fix\": fix_result.get(\"description\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 364,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if fix_result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/template_validation.py",
          "line_number": 367,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"fix\": fix_result.get(\"description\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/vector_search_production.py": {
      "file_path": "backend/api/vector_search_production.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/api/vector_search_production.py",
          "line_number": 254,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/content_real.py": {
      "file_path": "backend/api/content_real.py",
      "total_queries": 52,
      "secure_queries": 2,
      "risky_queries": 50,
      "issues_found": [
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 77,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 134,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": engagement_data.get(\"title\", request.title),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"tags\": engagement_data.get(\"tags\", request.tags),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"generated_by_ai\": request.dict().get('generated_by_ai', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"industry_context\": request.dict().get('industry_context', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_url\": request.dict().get('image_url', None),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_prompt\": request.dict().get('image_prompt', None),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/scheduled/upcoming\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 185,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_chars = platform_limits.get(request.platform, 250)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 221,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if insights.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 227,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "company_insights = request.company_research_data.get('insights', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 231,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "category_data = company_insights.get(category, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 237,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "context_parts.append(f\"Company research: {'. '.join(research_insights[:3])}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 239,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_context = '. '.join(context_parts)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if image_result and image_result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 378,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_url\": image_result.get(\"image_data_url\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 379,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_data_url\": image_result.get(\"image_data_url\"),  # For backward compatibility",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 380,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"prompt\": image_result.get(\"prompt\", {}).get(\"enhanced\", image_prompt),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 387,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": image_result.get(\"error\", \"Image generation failed\") if image_result else \"Image service unavailable\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 426,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == current_user.id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 456,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "image_history = engagement_data.get(\"image_history\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 499,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ai-insights\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 509,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/social-connections\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 529,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"connected_count\": sum(1 for conn in connections.values() if conn.get(\"connected\", False)),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 533,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{content_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 551,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 558,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 561,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"generated_by_ai\": engagement_data.get('generated_by_ai', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 562,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"industry_context\": engagement_data.get('industry_context', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 563,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_url\": engagement_data.get('image_url', None),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 564,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"image_prompt\": engagement_data.get('image_prompt', None),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 566,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"views\": engagement_data.get('views', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 567,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"likes\": engagement_data.get('likes', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 568,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"shares\": engagement_data.get('shares', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 569,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"comments\": engagement_data.get('comments', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 570,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_rate\": engagement_data.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 622,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 629,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 672,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 686,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_query = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 694,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "published_count = content_query.filter(ContentLog.status == \"published\").count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 695,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scheduled_count = content_query.filter(ContentLog.status == \"scheduled\").count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 696,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "draft_count = content_query.filter(ContentLog.status == \"draft\").count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 699,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_stats = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 702,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 705,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").group_by(ContentLog.platform).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 713,
          "query_type": "\\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "published_content = content_query.filter(ContentLog.status == \"published\").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 725,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "views = engagement_data.get('views', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 726,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "likes = engagement_data.get('likes', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 727,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "shares = engagement_data.get('shares', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content_real.py",
          "line_number": 728,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comments = engagement_data.get('comments', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/plan_suggestions.py": {
      "file_path": "backend/api/plan_suggestions.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/api/plan_suggestions.py",
          "line_number": 20,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/proactive\", response_model=List[Dict[str, Any]])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_suggestions.py",
          "line_number": 53,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/usage-summary\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_suggestions.py",
          "line_number": 123,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/quota-warning/{quota_type}\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_suggestions.py",
          "line_number": 182,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/all-plans\", response_model=List[Dict[str, Any]])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_suggestions.py",
          "line_number": 192,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"pricing\": UpgradeSuggestionEngine.PLAN_PRICING.get(plan_tier, {\"monthly\": 0, \"annual\": 0}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/partner_oauth.py": {
      "file_path": "backend/api/partner_oauth.py",
      "total_queries": 36,
      "secure_queries": 6,
      "risky_queries": 30,
      "issues_found": [
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{platform}/start\", response_model=OAuthStartResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "internal_platform = platform_mapping.get(platform, platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 241,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 242,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 243,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 263,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"scope\": \" \".join(platform_config[\"scopes\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 308,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{platform}/callback\", response_model=OAuthCallbackResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 392,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "code_verifier = state_data.get(\"code_verifier\") if platform_config[\"requires_pkce\"] else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 522,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"token_type\": tokens.get(\"token_type\", \"bearer\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 523,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"expires_in\": tokens.get(\"expires_in\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 560,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"token_type\": tokens.get(\"token_type\", \"bearer\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 561,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"expires_in\": tokens.get(\"expires_in\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 562,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"refresh_token\": tokens.get(\"refresh_token\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 563,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"scope\": tokens.get(\"scope\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 597,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 608,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ig_id = connection.platform_metadata.get(\"ig_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 665,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/meta/assets\", response_model=MetaAssetsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 708,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "instagram_business_account=page_data.get(\"instagram_business_account\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 768,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 769,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 832,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if cached_tokens[\"tokens\"].get(\"expires_in\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 847,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scopes=cached_tokens.get(\"scopes\", PLATFORM_CONFIGS[\"meta\"][\"scopes\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1023,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1024,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1061,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if tokens.get(\"refresh_token\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1066,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if tokens.get(\"expires_in\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1107,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verified\": metadata.get(\"verified\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1185,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/connections\", response_model=ConnectionListResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1204,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialConnection).filter(",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1208,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").order_by(SocialConnection.created_at.desc()).all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1268,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1273,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1296,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "encrypted_page_token = connection.access_tokens.get(\"page_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1309,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "instagram_id = connection.connection_metadata.get(\"instagram_account_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1443,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/partner_oauth.py",
          "line_number": 1447,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        }
      ]
    },
    "backend/api/error_taxonomy.py": {
      "file_path": "backend/api/error_taxonomy.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 38,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 252,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/categories\", response_model=Dict[str, List[str]])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/compliance/report\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 342,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/export/taxonomy\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/validation/completeness\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/error_taxonomy.py",
          "line_number": 423,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/troubleshooting/{error_code}\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/goals.py": {
      "file_path": "backend/api/goals.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/goals.py",
          "line_number": 42,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{goal_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals.py",
          "line_number": 159,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/types/list\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/social_auth.py": {
      "file_path": "backend/api/social_auth.py",
      "total_queries": 37,
      "secure_queries": 2,
      "risky_queries": 35,
      "issues_found": [
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 78,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Unsupported platform. Must be one of: {', '.join(supported_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 104,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_plan\": enforcement_result.get(\"plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": profile_data.get(\"username\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"display_name\": profile_data.get(\"display_name\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 200,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"profile_image\": profile_data.get(\"profile_image\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 201,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"follower_count\": profile_data.get(\"follower_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 202,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verified\": profile_data.get(\"verified\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/callback/{platform}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 261,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/connected\", response_model=List[ConnectedAccountResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 270,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_settings = db.query(UserSetting).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 272,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if account_data.get(\"expires_at\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "username=account_data.get(\"username\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 289,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "display_name=account_data.get(\"display_name\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 290,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "profile_image=account_data.get(\"profile_image\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "follower_count=account_data.get(\"follower_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 292,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "verified=account_data.get(\"verified\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 293,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connected_at=account_data.get(\"connected_at\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status/{platform}\", response_model=PlatformStatusResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 313,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_settings = db.query(UserSetting).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 315,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 323,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "account_data = user_settings.connected_accounts.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 330,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if account_data.get(\"expires_at\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 337,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": account_data.get(\"username\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 338,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"display_name\": account_data.get(\"display_name\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 339,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"follower_count\": account_data.get(\"follower_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 340,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verified\": account_data.get(\"verified\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "last_activity = account_data.get(\"last_refreshed\") or account_data.get(\"connected_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 428,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/test/{platform}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 459,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": profile_data.get(\"username\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 460,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"display_name\": profile_data.get(\"display_name\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 461,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"follower_count\": profile_data.get(\"follower_count\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_auth.py",
          "line_number": 472,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/platforms\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/diagnostics.py": {
      "file_path": "backend/api/diagnostics.py",
      "total_queries": 7,
      "secure_queries": 0,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 40,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ai-features\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 83,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if insights.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 86,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ai_insights_test = {\"status\": \"failed\", \"error\": insights.get(\"error\", \"Unknown error\")}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/industry-research\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if insights.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 174,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"has_real_time_data\": insights.get(\"metadata\", {}).get(\"has_real_time_data\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "full_test = {\"status\": \"failed\", \"error\": insights.get(\"error\", \"Unknown error\")}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/monitoring.py": {
      "file_path": "backend/api/monitoring.py",
      "total_queries": 12,
      "secure_queries": 4,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"response_time_ms\": db_health_result.get(\"query_response_time\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 83,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"connection_pool\": db_health_result.get(\"connection_pool_status\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 84,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": db_health_result.get(\"error\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 136,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message\": f\"Critical quota usage on platforms: {', '.join(quota_stats.critical_platforms)}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\", summary=\"System Health Check\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health/detailed\", summary=\"Detailed Health Information\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 324,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\", summary=\"System Metrics\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 352,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics/history\", summary=\"Historical Metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 388,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/alerts\", summary=\"System Alerts\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 441,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\", summary=\"Service Status Dashboard\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 503,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/monitoring.py",
          "line_number": 558,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/frontend-logs\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/user_credentials.py": {
      "file_path": "backend/api/user_credentials.py",
      "total_queries": 26,
      "secure_queries": 7,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 55,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/platforms\", response_model=List[PlatformConfigResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 58,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platforms = db.query(SocialMediaPlatformConfig).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 60,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 65,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[CredentialResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 71,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credentials = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 73,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 87,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_config = db.query(SocialMediaPlatformConfig).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 90,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 108,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Missing required fields: {', '.join(missing_fields)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 112,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 115,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{platform}\", response_model=CredentialResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 148,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credential = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 151,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 170,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credential = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 173,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 184,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_config = db.query(SocialMediaPlatformConfig).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 187,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 199,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Missing required fields: {', '.join(missing_fields)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 224,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credential = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 227,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 248,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credential = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 251,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{platform}/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 298,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credential = db.query(UserCredentials).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/user_credentials.py",
          "line_number": 301,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/api/plan_management.py": {
      "file_path": "backend/api/plan_management.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 78,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/current\", response_model=PlanInfo)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/usage\", response_model=UsageSummary)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 137,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/features/{feature}\", response_model=PlanFeatureCheck)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/quotas/{quota_type}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/available\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_management.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/admin/usage-stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/websockets.py": {
      "file_path": "backend/api/websockets.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/api/websockets.py",
          "line_number": 210,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_type = message.get(\"type\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/websockets.py",
          "line_number": 228,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "automation_id = message.get(\"automation_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/websockets.py",
          "line_number": 253,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ws/connections\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/memory_v2.py": {
      "file_path": "backend/api/memory_v2.py",
      "total_queries": 44,
      "secure_queries": 0,
      "risky_queries": 44,
      "issues_found": [
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_id = result['metadata'].get('content_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 173,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(MemoryContent).filter(MemoryContent.id.in_(content_ids))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 177,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.content_type.in_(request.content_types))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 180,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.platform.in_(request.platforms))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 182,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 194,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "similarity_score = faiss_scores.get(item.id, 0.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 219,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "match_reason = \", \".join(match_reasons)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 235,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(MemoryContent)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 239,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.content_type.in_(request.content_types))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 242,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.platform.in_(request.platforms))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 244,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.relevance_score >= request.min_relevance)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 247,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = query.filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 249,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(MemoryContent.created_at.desc()).limit(request.limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[MemoryContentResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 288,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(MemoryContent)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 291,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.content_type == content_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 293,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 295,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(MemoryContent.performance_tier == performance_tier)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 297,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = query.order_by(MemoryContent.created_at.desc()).offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{content_id}\", response_model=MemoryContentResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 309,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 325,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 331,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "update_data = request.dict(exclude_unset=True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 350,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(MemoryContent).filter(MemoryContent.id == content_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 360,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 368,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "all_content = db.query(MemoryContent).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 380,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_by_type[content_type] = content_by_type.get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 385,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_by_platform[platform] = content_by_platform.get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 389,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_by_performance[performance] = content_by_performance.get(performance, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 392,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "high_performing = db.query(MemoryContent).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 394,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(MemoryContent.engagement_score.desc()).limit(5).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 397,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_content = db.query(MemoryContent).order_by(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 399,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(5).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 427,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/tags/popular\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 436,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_with_tags = db.query(MemoryContent).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 438,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 444,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tag_counts[tag] = tag_counts.get(tag, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 465,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "source_content = db.query(MemoryContent).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 467,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 486,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result_content_id = result['metadata'].get('content_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 493,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(MemoryContent).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 495,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 614,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/vector-stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/memory_v2.py",
          "line_number": 625,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"status\": \"healthy\" if stats.get(\"total_vectors\", 0) > 0 else \"empty\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/database_health.py": {
      "file_path": "backend/api/database_health.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/database_health.py",
          "line_number": 16,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/database_health.py",
          "line_number": 65,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/schema/verify\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/ai_suggestions.py": {
      "file_path": "backend/api/ai_suggestions.py",
      "total_queries": 8,
      "secure_queries": 4,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 73,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user.id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 87,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_count = db.query(Content).filter(Content.user_id == user.id).limit(1000).count()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 97,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_content = db.query(Content).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 107,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "goal_count = db.query(Goal).filter(Goal.user_id == user.id).limit(50).count()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 116,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memory_count = db.query(Memory).filter(Memory.user_id == user.id).limit(100).count()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 139,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "- Preferred platforms: {', '.join(user_context['preferred_platforms'])}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 393,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return fallbacks.get(suggestion_type, fallbacks[\"content\"])[:4]  # Limit to 4 suggestions",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/ai_suggestions.py",
          "line_number": 465,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/suggestion-types\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/observability.py": {
      "file_path": "backend/api/observability.py",
      "total_queries": 11,
      "secure_queries": 0,
      "risky_queries": 11,
      "issues_found": [
        {
          "file_path": "backend/api/observability.py",
          "line_number": 85,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\", response_model=HealthStatus)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 95,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await db.execute(text(\"SELECT 1\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\", response_model=MetricsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 156,
          "query_type": "\\.execute\\(, SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await db.execute(text(\"SELECT count(*) FROM pg_stat_activity\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 161,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await db.execute(text(\"\"\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/prometheus\", response_class=PlainTextResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/traces/recent\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/config\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 363,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/alerting/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 392,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/alerting/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/observability.py",
          "line_number": 420,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/alerting/rules\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/feature_flags.py": {
      "file_path": "backend/api/feature_flags.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/api/feature_flags.py",
          "line_number": 6,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/workflow_stub.py": {
      "file_path": "backend/api/workflow_stub.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/workflow_stub.py",
          "line_number": 11,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_stub.py",
          "line_number": 21,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/key_rotation.py": {
      "file_path": "backend/api/key_rotation.py",
      "total_queries": 13,
      "secure_queries": 2,
      "risky_queries": 11,
      "issues_found": [
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "event_id=result.get(\"event_id\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 116,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "key_id=result.get(\"key_id\") or result.get(\"new_key_id\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 119,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scheduled_at=result.get(\"scheduled_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "errors=result.get(\"errors\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 174,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/schedule\", response_model=KeyScheduleResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 202,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/keys/{key_type}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 272,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/report\", response_model=KeyRotationReportResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/procedures/documentation\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 332,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 351,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if details.get(\"status\") == \"no_keys\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 353,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif details.get(\"is_overdue\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 385,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/key-types\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/key_rotation.py",
          "line_number": 500,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/scheduler/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/performance_monitoring.py": {
      "file_path": "backend/api/performance_monitoring.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/api/performance_monitoring.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_ratio = stats.get('compression_ratio', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_monitoring.py",
          "line_number": 93,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return dict(self.endpoint_stats.get(endpoint, {}))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_monitoring.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "accept_encoding = request.headers.get('accept-encoding', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_monitoring.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_encoding = response.headers.get('content-encoding')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_monitoring.py",
          "line_number": 318,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "compressed_responses = [m for m in recent_metrics if m.get('compressed_size')]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/dashboard_metrics.py": {
      "file_path": "backend/api/dashboard_metrics.py",
      "total_queries": 19,
      "secure_queries": 2,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 24,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 32,
          "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status IN ('published', 'scheduled')\")).scalar() or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 33,
          "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "published_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status = 'published'\")).scalar() or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 34,
          "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scheduled_posts = db.execute(text(\"SELECT COUNT(*) FROM content_logs WHERE status = 'scheduled'\")).scalar() or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 37,
          "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connected_platforms = db.execute(text(\"SELECT COUNT(*) FROM social_platform_connections\")).scalar() or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 79,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics/charts\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 99,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_engagement = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 108,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").join(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 110,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 112,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").group_by(SocialPlatformConnection.platform).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 128,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_posts = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 130,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentLog.published_at.desc()).limit(10).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 137,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "likes = engagement_data_dict.get('likes', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 138,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "shares = engagement_data_dict.get('shares', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comments = engagement_data_dict.get('comments', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/activity/recent\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 223,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_content = db.query(ContentLog).order_by(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 225,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/dashboard_metrics.py",
          "line_number": 230,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = engagement_data.get('title', 'Untitled Post')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/data_export.py": {
      "file_path": "backend/api/data_export.py",
      "total_queries": 28,
      "secure_queries": 20,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 127,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"updated_at\": user.user_settings.updated_at.isoformat() if user.user_settings.updated_at else None,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 139,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = self.db.query(Metric).filter(Metric.user_id == user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 142,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Metric.date_recorded >= date_start)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 144,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Metric.date_recorded <= date_end)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 146,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metrics = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 160,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_query = self.db.query(ContentLog).filter(ContentLog.user_id == user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 162,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_query = content_query.filter(ContentLog.created_at >= date_start)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 164,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_query = content_query.filter(ContentLog.created_at <= date_end)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 165,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_logs = content_query.all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 168,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_content_query = self.db.query(Content).filter(Content.user_id == user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 170,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_content_query = ai_content_query.filter(Content.created_at >= date_start)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 172,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_content_query = ai_content_query.filter(Content.created_at <= date_end)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 173,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_content = ai_content_query.all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 176,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memories_query = self.db.query(Memory).filter(Memory.user_id == user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 178,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memories_query = memories_query.filter(Memory.created_at >= date_start)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 180,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memories_query = memories_query.filter(Memory.created_at <= date_end)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 181,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memories = memories_query.all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 222,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = self.db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 224,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 303,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = self.db.query(WorkflowExecution).filter(WorkflowExecution.user_id == user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 306,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(WorkflowExecution.created_at >= date_start)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 308,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(WorkflowExecution.created_at <= date_end)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 310,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "executions = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 392,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "goals = self.db.query(Goal).filter(Goal.user_id == user.id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 405,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "notifications = self.db.query(Notification).filter(Notification.user_id == user.id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 516,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/download/{export_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 648,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return \"\\\\n\".join(xml_lines)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_export.py",
          "line_number": 673,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status/{export_id}\", response_model=DataExportStatus)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/vector_search.py": {
      "file_path": "backend/api/vector_search.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 89,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 105,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"use_templates\": len(results.get('templates', [])) > 0,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"leverage_insights\": len(results.get('research_insights', [])) > 0,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 107,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"study_high_performers\": len(results.get('high_performing_examples', [])) > 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 135,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid memory type. Must be one of: {', '.join(valid_types)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 200,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if sync_results.get('remaining', 0) > 0:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/similar/{memory_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 251,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memory = db.query(Memory).filter(Memory.id == memory_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/vector_search.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "similar = [m for m in similar if m.get('id') != memory_id][:limit]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/workflow_v2.py": {
      "file_path": "backend/api/workflow_v2.py",
      "total_queries": 22,
      "secure_queries": 9,
      "risky_queries": 13,
      "issues_found": [
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 77,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[WorkflowExecutionResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 87,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(WorkflowExecution).filter(WorkflowExecution.user_id == current_user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 90,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(WorkflowExecution.workflow_type == workflow_type)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 92,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(WorkflowExecution.status == status)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 94,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "executions = query.order_by(WorkflowExecution.started_at.desc()).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 98,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{execution_id}\", response_model=WorkflowExecutionResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 106,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "execution = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 109,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 124,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "execution = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 127,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 157,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "executions = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 160,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 174,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "status_counts[status] = status_counts.get(status, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "type_counts[workflow_type] = type_counts.get(workflow_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 186,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "running_executions = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 189,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 192,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "recent_completed = db.query(WorkflowExecution).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 195,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(WorkflowExecution.completed_at.desc()).limit(5).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 297,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "execution = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 299,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow_v2.py",
          "line_number": 374,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return stage_mapping.get(workflow_type, [\"processing\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/linkedin_oauth.py": {
      "file_path": "backend/api/linkedin_oauth.py",
      "total_queries": 22,
      "secure_queries": 1,
      "risky_queries": 21,
      "issues_found": [
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 52,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/auth\", response_model=LinkedInAuthResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/callback\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 203,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"linkedin_id\": profile.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"expires_in\": token_data.get(\"expires_in\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"id\": profile.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"first_name\": profile.get(\"localizedFirstName\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 214,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_name\": profile.get(\"localizedLastName\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"profile_picture\": profile.get(\"profilePicture\", {}).get(\"displayImage\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 218,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"expires_in\": token_data.get(\"expires_in\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"scope\": token_data.get(\"scope\", \"\").split()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/profile\", response_model=LinkedInProfileResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "id=profile.get(\"id\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 261,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "first_name=profile.get(\"localizedFirstName\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 262,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "last_name=profile.get(\"localizedLastName\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "email=profile.get(\"elements\", [{}])[0].get(\"handle~\", {}).get(\"emailAddress\") if \"elements\" in profile else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 325,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 329,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "data={\"post_id\": result.get(\"post_id\"), \"content_length\": len(post_data.content)}",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 335,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"post_id\": result.get(\"post_id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 336,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"post_url\": result.get(\"post_url\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 341,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": result.get(\"error\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 342,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"guidance\": result.get(\"guidance\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/linkedin_oauth.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/content.py": {
      "file_path": "backend/api/content.py",
      "total_queries": 55,
      "secure_queries": 16,
      "risky_queries": 39,
      "issues_found": [
        {
          "file_path": "backend/api/content.py",
          "line_number": 219,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 222,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 336,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[ContentResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 352,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db_session.query(ContentLog).filter(ContentLog.user_id == current_user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 355,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 357,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.status == status)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 359,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentLog.content_type == content_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 361,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.order_by(ContentLog.created_at.desc()).offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/items\", response_model=List[dict])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 385,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(ContentItem).filter(ContentItem.user_id == current_user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 388,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentItem.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 390,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentItem.status == status)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 392,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentItem.content_type == content_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 394,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = query.order_by(ContentItem.created_at.desc()).offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 417,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{content_id}\", response_model=ContentResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 425,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 428,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 444,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 447,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 456,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "update_data = request.dict(exclude_unset=True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 482,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 485,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 521,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 524,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 548,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 551,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 564,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/scheduled/upcoming\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 581,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db_session.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 585,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(ContentLog.scheduled_for).limit(page_size).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 608,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/summary\", response_model=ContentAnalytics)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 624,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return db_session.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 627,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(ContentLog.created_at.desc()).limit(page_size).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 648,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "posts_by_platform[platform] = posts_by_platform.get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 652,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "posts_by_status[status] = posts_by_status.get(status, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 661,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "likes = engagement_data.get('likes', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 662,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comments = engagement_data.get('comments', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 663,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "shares = engagement_data.get('shares', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 679,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "score = (engagement_data.get('likes', 0) +",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 680,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_data.get('comments', 0) * 2 +",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 681,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_data.get('shares', 0) * 3)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 723,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 724,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "generated_content = result.get(\"content\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 738,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": result.get(\"title\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 739,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"hashtags\": result.get(\"hashtags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 766,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": result.get(\"error\", \"Content generation failed\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 843,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "suggestions = suggestions.get(\"ideas\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 900,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "suggestions = platform_fallbacks.get(platform, platform_fallbacks[\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 952,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 955,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"image_base64\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1023,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_log = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1026,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1033,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == current_user.id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1057,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_context=user_settings_dict.get('industry_type', '') if user_settings_dict else '',",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1064,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "image_history = engagement_data.get(\"image_history\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/content.py",
          "line_number": 1207,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/upload-stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/admin.py": {
      "file_path": "backend/api/admin.py",
      "total_queries": 68,
      "secure_queries": 68,
      "risky_queries": 0,
      "issues_found": [
        {
          "file_path": "backend/api/admin.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "authorization = request.headers.get(\"Authorization\", \"\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 156,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/auth/me\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard\", response_model=AdminDashboardStats)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 188,
          "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_users = db.query(func.count(User.id)).scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 190,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "active_users_today = db.query(func.count(User.id)).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 192,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar() if hasattr(User, 'last_login') else 0",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 194,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "new_users_this_week = db.query(func.count(User.id)).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 196,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 198,
          "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_content_items = db.query(func.count(ContentItem.id)).scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 200,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_created_today = db.query(func.count(ContentItem.id)).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 202,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 205,
          "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_api_requests = db.query(func.sum(UserManagement.monthly_requests_used)).scalar() or 0",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 208,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "failed_logins_today = db.query(func.count(AdminAuditLog.id)).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 213,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 216,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "suspended_users = db.query(func.count(UserManagement.id)).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 218,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/users\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 246,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(User).options(joinedload(User.management_info))",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 250,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 259,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(User.is_active == is_active)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 262,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.join(UserManagement, User.id == UserManagement.user_id, isouter=True)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 263,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(UserManagement.is_suspended == is_suspended)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 270,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users = query.offset(offset).limit(limit).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/users/{user_id}\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 319,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).options(joinedload(User.management_info)).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 324,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_stats = db.query(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 326,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "func.count(ContentItem.id).filter(ContentItem.status == \"published\").label(\"published_content\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 327,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "func.count(ContentItem.id).filter(ContentItem.status == \"draft\").label(\"draft_content\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 328,
          "query_type": "\\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").filter(ContentItem.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 331,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "recent_content = db.query(ContentItem).filter(ContentItem.user_id == user_id).order_by(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 333,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").limit(10).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 396,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"\"\"Update user management settings\"\"\"",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 398,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 403,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 423,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "update_dict = update_data.dict(exclude_unset=True)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 476,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 485,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 544,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 548,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "mgmt = db.query(UserManagement).filter(UserManagement.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 597,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(AdminUser).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 602,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 656,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/admin-users\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 663,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "admin_users = db.query(AdminUser).order_by(AdminUser.created_at.desc()).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 683,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/settings\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 690,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "settings = db.query(SystemSettings).order_by(SystemSettings.key).all()",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 702,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"updated_at\": setting.updated_at",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 709,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "async def update_system_setting(",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 716,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"\"\"Update system setting\"\"\"",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 718,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "setting = db.query(SystemSettings).filter(SystemSettings.key == setting_key).first()",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 755,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"UPDATE_SYSTEM_SETTING\",",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 771,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/audit-logs\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 784,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(AdminAuditLog).options(joinedload(AdminAuditLog.admin_user))",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 788,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(AdminAuditLog.action == action)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 791,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(AdminAuditLog.admin_user_id == admin_user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 794,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(AdminAuditLog.created_at >= start_date)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 797,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(AdminAuditLog.created_at <= end_date)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 804,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logs = query.order_by(desc(AdminAuditLog.created_at)).offset(offset).limit(limit).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 908,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/registration-keys\", response_model=Dict[str, Any])",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 918,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(RegistrationKey).options(joinedload(RegistrationKey.created_by_admin))",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 921,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(RegistrationKey.is_active == True)",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 927,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keys = query.order_by(desc(RegistrationKey.created_at)).offset((page - 1) * limit).limit(limit).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 963,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "registration_key = db.query(RegistrationKey).filter(RegistrationKey.id == key_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 991,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "registration_key = db.query(RegistrationKey).filter(RegistrationKey.id == key_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 1019,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/migration/tier-to-plan/status\")",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 1068,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"migration_run\": result.get(\"migration_run\", False),",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 1069,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"stats\": result.get(\"stats\", {}),",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 1070,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verification\": result.get(\"verification\", {})",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        },
        {
          "file_path": "backend/api/admin.py",
          "line_number": 1076,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message\": \"Tier migration completed successfully\" if result.get(\"migration_run\") else \"No migration was needed\",",
          "risk_level": "MEDIUM",
          "recommendation": "Admin/system query - verify proper authorization"
        }
      ]
    },
    "backend/api/auth_management.py": {
      "file_path": "backend/api/auth_management.py",
      "total_queries": 8,
      "secure_queries": 3,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 59,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id=payload.get(\"sub\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "auth_method=\"auth0\" if \"@\" in payload.get(\"sub\", \"\") else \"local\",",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "expires_at=payload.get(\"exp\", 0),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/session-info\", response_model=UserSessionInfo)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/middleware-stats\", response_model=MiddlewareStatsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 283,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"Redis connection required for distributed caching\" if not middleware_stats.get(\"redis_connected\", False) else \"\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_management.py",
          "line_number": 295,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/config\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/autonomous_stub.py": {
      "file_path": "backend/api/autonomous_stub.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/autonomous_stub.py",
          "line_number": 11,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/research/latest\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous_stub.py",
          "line_number": 20,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/notifications_stub.py": {
      "file_path": "backend/api/notifications_stub.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/notifications_stub.py",
          "line_number": 11,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications_stub.py",
          "line_number": 20,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/unread\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/webhook_monitoring.py": {
      "file_path": "backend/api/webhook_monitoring.py",
      "total_queries": 12,
      "secure_queries": 2,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 20,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dlq/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 77,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dlq/failures\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 175,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "task = db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 178,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dlq/analytics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 236,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "all_failures = db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 240,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 335,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "deleted_count = db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 363,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_failures = health_stats.get(\"total_failed_tasks\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_failures = health_stats.get(\"recent_failures_24h\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_monitoring.py",
          "line_number": 378,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "manual_review_required = health_stats.get(\"manual_review_required\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/autonomous.py": {
      "file_path": "backend/api/autonomous.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 96,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 151,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/research/latest\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_result = await redis_cache_service.get(\"autonomous\", \"research_latest\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if insights.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 172,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "insights_data = insights.get(\"insights\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 176,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"research_date\": insights.get(\"generated_at\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"trends\": insights_data.get(\"trending_topics\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/autonomous.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/industries\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/organizations.py": {
      "file_path": "backend/api/organizations.py",
      "total_queries": 27,
      "secure_queries": 6,
      "risky_queries": 21,
      "issues_found": [
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 73,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.error(f\"Failed to send organization invitation email to {invitation.email}: {result.get('message')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 151,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[OrganizationResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 165,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "organization = db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 167,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 213,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_org = db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 215,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 237,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_owner_role = db.query(Role).filter(Role.name == 'org_owner').first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{organization_id}\", response_model=OrganizationResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 364,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Update organization settings",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 428,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{organization_id}/teams\", response_model=List[TeamResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 444,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "teams = db.query(Team).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 446,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 451,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "member_count = db.query(user_teams).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 496,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_team = db.query(Team).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 501,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 563,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_user = db.query(User).filter(User.email == invite_data.email).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 565,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_role = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 571,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 580,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_invitation = db.query(OrganizationInvitation).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 586,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 595,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "role = db.query(Role).filter(Role.name == invite_data.role).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 605,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "team = db.query(Team).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 610,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 665,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{organization_id}/invitations\", response_model=List[InvitationResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 681,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "invitations = db.query(OrganizationInvitation).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 683,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/api/organizations.py",
          "line_number": 689,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "team = db.query(Team).filter(Team.id == invitation.team_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/image_streaming.py": {
      "file_path": "backend/api/image_streaming.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/api/image_streaming.py",
          "line_number": 80,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stream-status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/plans.py": {
      "file_path": "backend/api/plans.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/plans.py",
          "line_number": 53,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/available\", response_model=List[Dict[str, Any]])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plans.py",
          "line_number": 69,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/my-plan\", response_model=PlanFeatureResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plans.py",
          "line_number": 185,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/capabilities/{capability_name}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plans.py",
          "line_number": 234,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/limits\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/goals_v2.py": {
      "file_path": "backend/api/goals_v2.py",
      "total_queries": 72,
      "secure_queries": 25,
      "risky_queries": 47,
      "issues_found": [
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[GoalResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 146,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(Goal).filter(Goal.user_id == current_user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 149,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Goal.status == status)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 151,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Goal.goal_type == goal_type)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 153,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(Goal.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 155,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goals = query.order_by(Goal.created_at.desc()).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 163,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{goal_id}\", response_model=GoalResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 171,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 174,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 193,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 196,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 205,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "update_data = request.dict(exclude_unset=True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 231,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 234,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 314,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 317,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 340,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 343,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 366,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 369,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 375,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(GoalProgress).filter(GoalProgress.goal_id == goal_id).delete()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 383,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{goal_id}/progress\", response_model=List[GoalProgressResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 393,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 396,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 401,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "progress_logs = db.query(GoalProgress).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 403,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(GoalProgress.recorded_at.desc()).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 407,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 415,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 494,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 514,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/progress-trends\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 528,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "progress_data = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 535,
          "query_type": "\\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").join(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 538,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(GoalProgress.recorded_at).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 541,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "current_goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 593,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/performance\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 600,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "goals = db.query(Goal).filter(Goal.user_id == current_user.id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 681,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 684,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 712,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{goal_id}/milestones\", response_model=List[MilestoneResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 721,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 724,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 729,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "milestones = db.query(Milestone).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 731,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(Milestone.target_value).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 747,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 750,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 756,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "milestone = db.query(Milestone).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 759,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 794,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 797,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 803,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "milestone = db.query(Milestone).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 806,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 872,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goal = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 875,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 881,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "milestone = db.query(Milestone).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 884,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 897,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/widgets/upcoming-deadlines\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 910,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "upcoming_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 915,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(Goal.target_date).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 918,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "upcoming_milestones = db.query(Milestone).join(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 925,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(Milestone.target_date).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 955,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/widgets/recent-achievements\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 968,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "completed_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 972,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(Goal.completed_at.desc()).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 975,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "achieved_milestones = db.query(Milestone).join(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 979,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(Milestone.achieved_at.desc()).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1008,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/widgets/progress-alerts\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1018,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "at_risk_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1021,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1025,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "stagnant_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1029,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1032,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "overdue_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/goals_v2.py",
          "line_number": 1036,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/api/webhook_reliability.py": {
      "file_path": "backend/api/webhook_reliability.py",
      "total_queries": 9,
      "secure_queries": 0,
      "risky_queries": 9,
      "issues_found": [
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 25,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 56,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/idempotency/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 78,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "idempotency_stats = all_stats.get('idempotency_statistics', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"timestamp\": all_stats.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 104,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/delivery/stats\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 126,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "delivery_stats = all_stats.get('delivery_statistics', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"timestamp\": all_stats.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 230,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhook_reliability.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "health_info[\"last_stats_check\"] = stats.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/notifications.py": {
      "file_path": "backend/api/notifications.py",
      "total_queries": 26,
      "secure_queries": 8,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 89,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if message.get(\"type\") == \"ping\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif message.get(\"type\") == \"mark_read\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 96,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notification_id = message.get(\"notification_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 128,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ws/stats\", response_model=WebSocketStats)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[NotificationResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 229,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(Notification).filter(Notification.user_id == current_user.id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 233,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Notification.is_read.is_(False))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 236,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(Notification.notification_type == notification_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 239,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(Notification.priority == priority)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 245,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notifications = query.offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 254,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/summary\", response_model=NotificationSummary)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 263,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 268,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "unread_count = db.query(Notification).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 276,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "high_priority_count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 285,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_notifications = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 287,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(desc(Notification.created_at)).limit(5).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 309,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notification = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 314,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 343,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notification = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 348,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 377,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "updated_count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 405,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notification = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 410,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 442,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 449,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/notifications.py",
          "line_number": 481,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/types\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/plan_billing.py": {
      "file_path": "backend/api/plan_billing.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/plan_billing.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/plans\", response_model=AvailablePlansResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_billing.py",
          "line_number": 253,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/info\", response_model=BillingInfoResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_billing.py",
          "line_number": 299,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sig_header = request.headers.get(\"stripe-signature\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/plan_billing.py",
          "line_number": 366,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/assistant_chat.py": {
      "file_path": "backend/api/assistant_chat.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/assistant_chat.py",
          "line_number": 52,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "thread_id = thread_storage.get(chat_message.session_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/assistant_chat.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/chat/assistant/thread/{session_id}\", response_model=ThreadInfo)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/assistant_chat.py",
          "line_number": 134,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "thread_id = thread_storage.get(session_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/assistant_chat.py",
          "line_number": 157,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/chat/assistant/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/auth_open.py": {
      "file_path": "backend/api/auth_open.py",
      "total_queries": 24,
      "secure_queries": 6,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 124,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_user = db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 126,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 152,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_count = db.query(User).count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 157,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%free%')).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 159,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%starter%')).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 161,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "free_plan = db.query(Plan).filter(Plan.name.ilike('%basic%')).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 273,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 275,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 312,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 359,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 404,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 406,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 441,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = db.query(User).filter(User.email == request.email).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 531,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "refresh_token = request.cookies.get(\"refresh_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 535,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 542,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 545,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 598,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if payload.get(\"type\") != \"refresh\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 604,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 607,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 654,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/me\", response_model=TokenResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 663,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 675,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/auth_open.py",
          "line_number": 678,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/api/workflow.py": {
      "file_path": "backend/api/workflow.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/api/workflow.py",
          "line_number": 7,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow.py",
          "line_number": 37,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow.py",
          "line_number": 53,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stages\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/workflow.py",
          "line_number": 67,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/errors\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/webhooks.py": {
      "file_path": "backend/api/webhooks.py",
      "total_queries": 29,
      "secure_queries": 12,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 69,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/meta\", response_class=PlainTextResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 173,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get(\"X-Hub-Signature-256\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"object\": payload.get(\"object\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_count\": len(payload.get(\"entry\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/facebook\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Hub-Signature-256')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 265,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 269,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "facebook_connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 273,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/instagram\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 321,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Hub-Signature-256')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 328,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 332,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "instagram_connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 336,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 352,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/twitter/crc\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 381,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 408,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 412,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "twitter_connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 416,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 443,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('X-Twitter-Webhooks-Signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 470,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 474,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "twitter_connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 478,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 494,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 559,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recent_deliveries_24h\": reliability_stats.get('delivery_statistics', {}).get('recent_deliveries_24h', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 560,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"success_rate_24h_percent\": reliability_stats.get('delivery_statistics', {}).get('success_rate_24h_percent', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 561,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"pending_retries\": reliability_stats.get('delivery_statistics', {}).get('pending_retries', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 562,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"duplicates_prevented_24h\": reliability_stats.get('idempotency_statistics', {}).get('duplicates_prevented_24h', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/webhooks.py",
          "line_number": 564,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reliability_status[\"last_updated\"] = reliability_stats.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/simple_workflow.py": {
      "file_path": "backend/api/simple_workflow.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/api/simple_workflow.py",
          "line_number": 51,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/simple_workflow.py",
          "line_number": 62,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/simple_workflow.py",
          "line_number": 76,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/stages\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/performance.py": {
      "file_path": "backend/api/performance.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/api/performance.py",
          "line_number": 77,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\", response_model=PerformanceMetricsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance.py",
          "line_number": 104,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analysis\", response_model=PerformanceAnalysisResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/slow-queries\", response_model=PaginatedResponse[SlowQueryResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/cache/stats\", response_model=CacheStatsResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/endpoints\", response_model=PaginatedResponse[EndpointPerformanceResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance.py",
          "line_number": 315,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/multi_tenant.py": {
      "file_path": "backend/api/multi_tenant.py",
      "total_queries": 7,
      "secure_queries": 2,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 113,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/\", response_model=List[OrganizationResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{organization_id}/members\", response_model=List[OrganizationMemberResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 232,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/{organization_id}/permissions/{permission}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/system/roles\", response_model=List[SystemRoleResponse])",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 283,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = db.execute(query).fetchall()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/system/permissions\", response_model=List[SystemPermissionResponse])",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/multi_tenant.py",
          "line_number": 325,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = db.execute(query).fetchall()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/data_retention.py": {
      "file_path": "backend/api/data_retention.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 63,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/policies\", response_model=Dict[str, RetentionPolicyResponse])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/policies/{category}\", response_model=RetentionPolicyResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/expired-data\", response_model=Dict[str, Dict[str, int]])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 247,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_deleted = cleanup_results.get(\"total_deleted\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 254,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "deleted_counts=cleanup_results.get(\"deleted_counts\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "errors=cleanup_results.get(\"errors\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expired_counts=cleanup_results.get(\"expired_counts\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 272,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/report\", response_model=RetentionReportResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 304,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/categories\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/data_retention.py",
          "line_number": 424,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/performance_dashboard.py": {
      "file_path": "backend/api/performance_dashboard.py",
      "total_queries": 40,
      "secure_queries": 7,
      "risky_queries": 33,
      "issues_found": [
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 45,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'apm': apm_summary.get('health_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 46,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'database': 100 if db_health.get('database_connected') else 0,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 47,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'cache': 100 if cache_stats.get('redis_connected') else 80,  # 80 if fallback works",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 48,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'errors': max(0, 100 - error_analysis.get('total_errors', 0))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 68,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'active_alerts': apm_summary.get('active_alerts', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 69,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'critical_alerts': apm_summary.get('critical_alerts', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 70,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_errors': error_analysis.get('total_errors', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 71,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'cache_hit_ratio': cache_stats.get('hit_ratio', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 72,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'database_response_time': db_health.get('query_response_time', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 73,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'active_connections': db_health.get('connection_pool_status', {}).get('checked_out', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "severity = alert.get('severity', 'info')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'status': 'healthy' if db_health.get('database_connected') else 'unhealthy',",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'response_time': db_health.get('query_response_time', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'status': cache_health.get('status', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'redis_connected': cache_health.get('redis_connected', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 171,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'hit_ratio': cache_health.get('hit_ratio', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 175,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'status': 'healthy' if pool_health.get('total_pools', 0) > 0 else 'unhealthy',",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 176,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_pools': pool_health.get('total_pools', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'status': error_health.get('status', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 181,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'health_score': error_health.get('health_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db_response_time = db_health.get('query_response_time', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cache_connected = cache_health.get('redis_connected', False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'system_status': performance_summary.get('status', 'unknown'),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'health_score': performance_summary.get('health_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 259,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'cpu_usage': current_metrics.get('system', {}).get('cpu_percent', 0),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'memory_usage': current_metrics.get('system', {}).get('memory_percent', 0),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 261,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'response_time': current_metrics.get('system', {}).get('response_time_avg', 0),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 262,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'error_rate': current_metrics.get('system', {}).get('error_rate', 0),",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'cache_hit_ratio': current_metrics.get('application', {}).get('cache_hit_ratio', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'critical_count': len([a for a in active_alerts if a.get('severity') == 'critical'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/overview\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_data = await redis_cache.get(\"system\", \"dashboard_overview\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 312,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 325,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/alerts\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 336,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/infrastructure\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 347,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/platforms\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 358,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/realtime\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 390,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cache_test = await redis_cache.get(\"system\", \"health_test\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/performance_dashboard.py",
          "line_number": 429,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@dashboard_router.get(\"/config\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/social_platforms.py": {
      "file_path": "backend/api/social_platforms.py",
      "total_queries": 47,
      "secure_queries": 20,
      "risky_queries": 27,
      "issues_found": [
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/connect/{platform}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"current_usage\": enforcement_result.get(\"current_usage\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 128,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"limits\": enforcement_result.get(\"limits\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plans\": enforcement_result.get(\"suggested_plans\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 175,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/callback/{platform}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 206,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 255,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 258,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "existing_connection.platform_user_id = user_info.get(\"id\", user_info.get(\"user_id\", \"\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 264,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "existing_connection.platform_username = user_info.get(\"username\", user_info.get(\"display_name\", \"\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "existing_connection.platform_display_name = user_info.get(\"name\", user_info.get(\"display_name\", \"\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 266,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "existing_connection.profile_image_url = user_info.get(\"profile_image_url\", user_info.get(\"profile_picture\", \"\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 277,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform_user_id=user_info.get(\"id\", user_info.get(\"user_id\", \"\")),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform_username=user_info.get(\"username\", user_info.get(\"display_name\", \"\")),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform_display_name=user_info.get(\"name\", user_info.get(\"display_name\", \"\")),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "profile_image_url=user_info.get(\"profile_image_url\", user_info.get(\"profile_picture\", \"\")),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 299,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"platform_user_id\": user_info.get(\"id\", \"\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 300,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform_username\": user_info.get(\"username\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 310,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "username = user_info.get(\"username\", user_info.get(\"display_name\", \"\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 342,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/connections\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 363,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "base_query = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 399,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/connections/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 408,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 411,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 440,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 443,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 487,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 491,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 536,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection.last_error = validation_result.get(\"error\", \"Validation failed\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 585,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 589,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 717,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/posts\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 738,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(SocialPost).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 743,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(SocialPost.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 747,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 753,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics/{platform}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 770,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 774,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 787,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "followers_count=platform_metadata.get(\"followers_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 788,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "following_count=platform_metadata.get(\"following_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 789,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "posts_count=platform_metadata.get(\"media_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 794,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/overview\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 810,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 813,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 816,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "recent_posts = db.query(SocialPost).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 819,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(SocialPost.posted_at.desc()).limit(10).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/api/social_platforms.py",
          "line_number": 827,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"followers\": metadata.get(\"followers_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/diagnostics_simple.py": {
      "file_path": "backend/api/diagnostics_simple.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/diagnostics_simple.py",
          "line_number": 8,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/ai-features\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/diagnostics_simple.py",
          "line_number": 41,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/industry-research\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/metrics_stub.py": {
      "file_path": "backend/api/metrics_stub.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/api/metrics_stub.py",
          "line_number": 15,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/metrics_stub.py",
          "line_number": 25,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "twitter_connected = bool(twitter_status.get(\"connected\", False))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/metrics_stub.py",
          "line_number": 26,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "twitter_username = str(twitter_status.get(\"username\", \"Not connected\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/monitoring_metrics.py": {
      "file_path": "backend/api/monitoring_metrics.py",
      "total_queries": 4,
      "secure_queries": 1,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/api/monitoring_metrics.py",
          "line_number": 38,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\", response_model=MonitoringHealthResponse)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring_metrics.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/monitoring_metrics.py",
          "line_number": 83,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/system\", response_model=SystemMetricsResponse)",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/api/monitoring_metrics.py",
          "line_number": 153,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/deep_research.py": {
      "file_path": "backend/api/deep_research.py",
      "total_queries": 27,
      "secure_queries": 0,
      "risky_queries": 27,
      "issues_found": [
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status/{industry}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if status.get(\"status\") == \"not_configured\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 179,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/status\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"status\") == \"error\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise HTTPException(status_code=400, detail=result.get(\"message\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/execute/{industry}/result/{task_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 332,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if r.get(\"metadata\", {}).get(\"industry\") == query_request.industry_filter",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 382,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/knowledge-base/recent/{industry}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 431,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/content-opportunities/{industry}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 460,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if opp.get(\"urgency\", \"\").lower() == urgency.lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 473,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"high\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"high\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 474,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"medium\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"medium\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 475,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"low\": len([o for o in intelligence.content_opportunities if o.get(\"urgency\") == \"low\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 489,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/analytics/{industry}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 504,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if status.get(\"status\") == \"not_configured\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 513,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"research_runs\": status.get(\"total_research_runs\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 514,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"average_findings_per_run\": status.get(\"average_findings_per_run\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 515,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_performance\": status.get(\"last_performance_metrics\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 533,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if status.get(\"last_performance_metrics\", {}).get(\"confidence_score\", 1) < 0.7:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 555,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/access-summary\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 578,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 590,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "health_data = health_result.get(timeout=10)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 649,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/topics/{industry}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 662,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if status.get(\"status\") == \"not_configured\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 678,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"topics\": config.get(\"research_topics\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 679,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_topics\": len(config.get(\"research_topics\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/deep_research.py",
          "line_number": 680,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_updated\": config.get(\"created_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/sre_dashboard.py": {
      "file_path": "backend/api/sre_dashboard.py",
      "total_queries": 15,
      "secure_queries": 0,
      "risky_queries": 15,
      "issues_found": [
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 52,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/dashboard/overview\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 97,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/slos\", response_model=List[ServiceLevelObjective])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 111,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/error-budget/{slo_name}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/incidents\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 236,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/runbooks\", response_model=Dict[str, Any])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 316,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/runbooks/executions/{execution_id}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 354,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/prometheus/metrics\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 369,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/capacity-planning\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 388,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/performance-trends\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 424,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mean_time_to_recovery=alert_metrics.get(\"mean_time_to_resolve\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 425,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mean_time_to_detection=alert_metrics.get(\"mean_time_to_acknowledge\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 477,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "severity_breakdown[severity] = severity_breakdown.get(severity, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 480,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_incidents=alert_metrics.get(\"alerts_last_24h\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 482,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "incidents_this_month=alert_metrics.get(\"alerts_last_24h\", 0) * 30,  # Rough estimate",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/sre_dashboard.py",
          "line_number": 483,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avg_resolution_time_hours=(alert_metrics.get(\"mean_time_to_resolve\", 0) / 60),  # Convert from minutes",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/auth_fastapi_users.py": {
      "file_path": "backend/api/auth_fastapi_users.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/api/auth_fastapi_users.py",
          "line_number": 68,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/me\", response_model=UserRead)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/auth_fastapi_users.py",
          "line_number": 78,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/check\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/api/validation.py": {
      "file_path": "backend/api/validation.py",
      "total_queries": 13,
      "secure_queries": 0,
      "risky_queries": 13,
      "issues_found": [
        {
          "file_path": "backend/api/validation.py",
          "line_number": 62,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if v and info.data.get('start_date') and v < info.data['start_date']:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 77,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise ValidationError(f\"Invalid platform. Must be one of: {', '.join(valid_platforms)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 84,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise ValidationError(f\"Invalid content type. Must be one of: {', '.join(valid_types)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 91,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise ValidationError(f\"Invalid goal type. Must be one of: {', '.join(valid_types)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 98,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise ValidationError(f\"Invalid workflow type. Must be one of: {', '.join(valid_types)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 107,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sanitized = ' '.join(text.split())",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 136,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = ' '.join(text.split())",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_length = request.headers.get('content-length')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 438,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'user_agent': request.headers.get('user-agent'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 439,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'referer': request.headers.get('referer'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'forwarded_for': request.headers.get('x-forwarded-for'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 441,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'real_ip': request.headers.get('x-real-ip')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/api/validation.py",
          "line_number": 470,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise ValidationError(f\"File type '{detected_type}' not allowed. Allowed types: {', '.join(allowed_types)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/stripe_service.py": {
      "file_path": "backend/services/stripe_service.py",
      "total_queries": 16,
      "secure_queries": 0,
      "risky_queries": 16,
      "issues_found": [
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 167,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "price_id = self.STRIPE_PRICE_IDS.get(tier)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 255,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 261,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = subscription.get(\"metadata\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 262,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tier = metadata.get(\"tier\", SubscriptionTier.BASIC.value)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 271,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_period_end = subscription.get(\"current_period_end\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 305,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 314,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_period_end = subscription.get(\"current_period_end\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 341,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 363,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "subscription_id = invoice.get(\"subscription\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 368,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if invoice.get(\"period_end\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 392,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 575,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users_to_remind = self.db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 581,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 632,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users_to_notify = self.db.query(User).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/stripe_service.py",
          "line_number": 638,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/avoid_list_processor.py": {
      "file_path": "backend/services/avoid_list_processor.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/services/avoid_list_processor.py",
          "line_number": 313,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "pattern = self.compiled_patterns.get(rule.pattern)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/avoid_list_processor.py",
          "line_number": 353,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "guidance = f\"ensure {rule.replacement_text} instead of {', '.join(matches)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/avoid_list_processor.py",
          "line_number": 441,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "score_penalty += violation_weights.get(violation[\"severity\"], -5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/data_retention_service.py": {
      "file_path": "backend/services/data_retention_service.py",
      "total_queries": 20,
      "secure_queries": 0,
      "risky_queries": 20,
      "issues_found": [
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 203,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.retention_policies.get(category)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 281,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "models = model_mappings.get(category, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 285,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "count = db.query(model_class).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 340,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cleanup_function = cleanup_functions.get(category)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 366,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_logs = db.query(ContentLog).filter(ContentLog.created_at < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 372,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "drafts = db.query(ContentDraft).filter(ContentDraft.created_at < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 378,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedules = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 389,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(ContentItem.created_at < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 401,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metrics = db.query(Metric).filter(Metric.date_recorded < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 407,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "perf_snapshots = db.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 415,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_snapshots = db.query(PlatformMetricsSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 429,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "memories = db.query(Memory).filter(Memory.created_at < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 435,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ai_content = db.query(Content).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 452,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_posts = db.query(SocialPost).filter(SocialPost.created_at < cutoff_date)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 458,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_interactions = db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 466,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "inactive_connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 482,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflow_executions = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 495,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notifications = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 508,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "research_data = db.query(ResearchData).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/data_retention_service.py",
          "line_number": 522,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "blacklisted_tokens = db.query(RefreshTokenBlacklist).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/subscription_service.py": {
      "file_path": "backend/services/subscription_service.py",
      "total_queries": 14,
      "secure_queries": 2,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 175,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return tier_mapping.get(tier_lower, SubscriptionTier.BASIC)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 188,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = self.db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 198,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org = self.db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 200,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 228,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org = self.db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 230,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 259,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return feature in TIER_FEATURES.get(tier, set())",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 290,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tier_limits = TIER_LIMITS.get(tier, TIER_LIMITS[SubscriptionTier.BASIC])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "limit = tier_limits.get(limit_type, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return TIER_LIMITS.get(tier, TIER_LIMITS[SubscriptionTier.BASIC])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return TIER_FEATURES.get(tier, TIER_FEATURES[SubscriptionTier.BASIC])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 361,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = self.db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 372,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org = self.db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/subscription_service.py",
          "line_number": 375,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/plan_aware_image_service.py": {
      "file_path": "backend/services/plan_aware_image_service.py",
      "total_queries": 12,
      "secure_queries": 0,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 157,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"available_models\": self.plan_model_access.get(plan_name, [\"grok2_basic\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 181,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if features_result.get(\"modified_options\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enable_post_processing = features_result.get(\"enable_post_processing\", enable_post_processing)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 184,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "generate_alt_text = features_result.get(\"generate_alt_text\", generate_alt_text)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 202,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if generation_result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 240,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"available_models\": self.plan_model_access.get(plan_name, [\"grok2_basic\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 241,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"max_quality\": self.plan_quality_mapping.get(plan_name, \"draft\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan_max_quality = self.plan_quality_mapping.get(plan_name, \"draft\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "requested_level = quality_levels.get(requested_quality, 1)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_level = quality_levels.get(plan_max_quality, 1)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "available_models = self.plan_model_access.get(plan_name, [\"grok2_basic\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_image_service.py",
          "line_number": 370,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return upgrade_map.get(current_plan, [\"starter\", \"pro\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/meta_webhook_service.py": {
      "file_path": "backend/services/meta_webhook_service.py",
      "total_queries": 18,
      "secure_queries": 0,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 95,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "entries = payload.get(\"entry\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_id\": entry.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_time\": entry.get(\"time\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "success = result.get(\"success\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_id\": entry.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_time\": entry.get(\"time\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for change in entry.get(\"changes\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"field\": change.get(\"field\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 287,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"change_time\": change.get(\"time\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"value\": change.get(\"value\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 293,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for message in entry.get(\"messaging\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 295,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"sender\": message.get(\"sender\", {}).get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 296,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recipient\": message.get(\"recipient\", {}).get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"timestamp\": message.get(\"timestamp\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message\": message.get(\"message\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 299,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"postback\": message.get(\"postback\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 300,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"delivery\": message.get(\"delivery\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_webhook_service.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"read\": message.get(\"read\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/platform_optimization_service.py": {
      "file_path": "backend/services/platform_optimization_service.py",
      "total_queries": 23,
      "secure_queries": 4,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "char_limit = config.character_limits.get('text', config.character_limits.get('post', 280))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 203,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_score = config.content_type_preferences.get(content_type, 1.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 225,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 229,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_hashtags = config.hashtag_limits.get('max_hashtags', 10)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 230,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_hashtags = config.hashtag_limits.get('optimal_hashtags', 5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if user_performance.get('best_performing_hours'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 401,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(ContentItem, ContentPerformanceSnapshot)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 402,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".join(ContentPerformanceSnapshot)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 403,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".filter(ContentItem.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 404,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".filter(ContentItem.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 405,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".filter(ContentItem.published_at >= cutoff_date)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 406,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 461,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return frequency_map.get(platform, {'min': 1, 'max': 3, 'optimal': 1})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 504,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_strategy = hashtag_strategies.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 505,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 518,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "trending = platform_strategy.get('trending_hashtags', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 523,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "niche_hashtags = platform_strategy.get('niche_hashtags', {}).get(niche, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 530,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_hashtags = config.hashtag_limits.get('max_hashtags', 10)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 531,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_hashtags = config.hashtag_limits.get('optimal_hashtags', 5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 582,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_benchmarks = benchmarks.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/platform_optimization_service.py",
          "line_number": 587,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/deep_company_research_service.py": {
      "file_path": "backend/services/deep_company_research_service.py",
      "total_queries": 18,
      "secure_queries": 0,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 390,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_news=insights.get('recent_news', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 391,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "company_culture=insights.get('company_culture', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 392,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "market_position=insights.get('market_position', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 393,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "competitive_advantages=insights.get('competitive_advantages', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 394,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "customer_pain_points=insights.get('customer_pain_points', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 395,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_themes=insights.get('content_themes', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 396,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "social_presence=insights.get('social_presence', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 578,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "{chr(10).join([f\"- {news.title}: {news.snippet}\" for news in web_data.recent_news[:3]])}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 624,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_news=insights.get('recent_news', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 625,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "company_culture=insights.get('company_culture', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 626,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "market_position=insights.get('market_position', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 627,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "competitive_advantages=insights.get('competitive_advantages', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 628,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "customer_pain_points=insights.get('customer_pain_points', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 629,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_themes=insights.get('content_themes', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 630,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "social_presence=insights.get('social_presence', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 716,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return audience_mapping.get(industry, 'Business professionals and industry stakeholders')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 728,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text_content = web_data.description + \" \" + \" \".join([news.snippet for news in web_data.recent_news])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/deep_company_research_service.py",
          "line_number": 755,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return theme_mapping.get(industry, ['industry innovation', 'business growth', 'customer success', 'market insights'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/goals_progress_service.py": {
      "file_path": "backend/services/goals_progress_service.py",
      "total_queries": 23,
      "secure_queries": 4,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 45,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "active_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 50,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 165,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(ContentPerformanceSnapshot).join(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 176,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 192,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 199,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 212,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == goal.user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 217,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "client_class = self.social_clients.get(goal.platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 224,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "social_accounts = user.preferences.get('social_accounts', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 225,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_auth = social_accounts.get(goal.platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 232,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token=platform_auth.get('access_token'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token_secret=platform_auth.get('access_token_secret')  # For Twitter",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 238,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return float(metrics.get('followers_count', 0))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "field = metric_source.get('field')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "aggregation = metric_source.get('aggregation', 'sum')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 271,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(ContentPerformanceSnapshot).join(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 279,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = query.with_entities(func.sum(getattr(ContentPerformanceSnapshot, field))).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 281,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = query.with_entities(func.avg(getattr(ContentPerformanceSnapshot, field))).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 283,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = query.with_entities(func.max(getattr(ContentPerformanceSnapshot, field))).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "progress_range = goal.target_value - (goal.metadata.get('initial_value', 0) if goal.metadata else 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 315,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actual_progress = goal.current_value - (goal.metadata.get('initial_value', 0) if goal.metadata else 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 325,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/goals_progress_service.py",
          "line_number": 331,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/services/advanced_quality_scorer.py": {
      "file_path": "backend/services/advanced_quality_scorer.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/services/advanced_quality_scorer.py",
          "line_number": 156,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "weights = self.platform_weights.get(platform, self.platform_weights['default'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/advanced_quality_scorer.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "prefs = platform_preferences.get(platform, platform_preferences['instagram'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/advanced_quality_scorer.py",
          "line_number": 499,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tip = platform_tips.get(platform, \"Optimize aspect ratio and resolution for target platform\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/multi_tenant_service.py": {
      "file_path": "backend/services/multi_tenant_service.py",
      "total_queries": 33,
      "secure_queries": 3,
      "risky_queries": 30,
      "issues_found": [
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 65,
          "query_type": "\\.execute\\(, \\.scalar\\(\\), SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_roles = self.db.execute(text(\"SELECT COUNT(*) FROM roles\")).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 72,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO roles (id, public_id, name, description, permissions, is_system_role, created_at) VALUES",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 75,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(3, 'admin', 'admin', 'Administrative access within organization', ARRAY['users.create', 'users.read', 'users.update', 'teams.read', 'teams.update', 'content.*', 'social_accounts.*', 'analytics.read', 'settings.*'], true, NOW()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 77,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(5, 'member', 'member', 'Standard user access', ARRAY['users.read', 'teams.read', 'content.create', 'content.read', 'content.update', 'social_accounts.connect', 'social_accounts.read', 'analytics.read', 'settings.read'], true, NOW()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 80,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.db.execute(roles_sql)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 85,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO permissions (id, public_id, name, description, resource, action, created_at) VALUES",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 92,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(7, 'organizations_update', 'organizations.update', 'Update organization settings', 'organizations', 'update', NOW()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 96,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(11, 'teams_update', 'teams.update', 'Update team settings', 'teams', 'update', NOW()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 108,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(23, 'settings_update', 'settings.update', 'Update organization/team settings', 'settings', 'update', NOW())",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 110,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.db.execute(permissions_sql)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 151,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 152,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text(\"SELECT id FROM organizations WHERE slug = :slug\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 154,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 161,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO organizations (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 173,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(org_sql, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 182,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 191,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO teams (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 201,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "team_result = self.db.execute(team_sql, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 205,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 209,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO user_organization_roles (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 214,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(SELECT id FROM roles WHERE name = 'org_owner'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 219,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.db.execute(user_role_sql, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 270,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "results = self.db.execute(query, {\"user_id\": user_id}).fetchall()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 328,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 333,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 363,
          "query_type": "\\.execute\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "results = self.db.execute(query, {\"org_id\": organization_id}).fetchall()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 405,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "role_query = text(\"SELECT id FROM roles WHERE name = :role_name\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 406,
          "query_type": "\\.execute\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "role_result = self.db.execute(role_query, {\"role_name\": role_name}).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 416,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO user_organization_roles (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 424,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "DO UPDATE SET",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 432,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.db.execute(upsert_sql, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 461,
          "query_type": "DELETE.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "DELETE FROM organization_invitations",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/multi_tenant_service.py",
          "line_number": 466,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(cleanup_sql, {\"days\": older_than_days})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/ai_insights_service.py": {
      "file_path": "backend/services/ai_insights_service.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 67,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url = result.get('link', result.get('url', ''))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'title': item.get('title', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 100,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'snippet': item.get('snippet', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 101,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'link': item.get('url', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'date': item.get('date', date_filter),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 183,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "news_context = \"\\n\\n\".join([",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 186,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"SOURCE: {item.get('source', 'Unknown')}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/ai_insights_service.py",
          "line_number": 247,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"data_sources\": [item.get('source', 'Unknown') for item in news_results[:5]]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/webhook_reliability_service.py": {
      "file_path": "backend/services/webhook_reliability_service.py",
      "total_queries": 19,
      "secure_queries": 0,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 242,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(WebhookIdempotencyRecord).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 244,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 341,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tracker = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 343,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 467,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ready_for_retry = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 471,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 558,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expired_idempotency = db.query(WebhookIdempotencyRecord).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 563,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_delivered = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 569,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_abandoned = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 616,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "status_stats = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 619,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").group_by(WebhookDeliveryTracker.delivery_status).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 622,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_deliveries = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 626,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_failures = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 635,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_idempotency_records = db.query(WebhookIdempotencyRecord).count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 637,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "duplicate_prevention_24h = db.query(WebhookIdempotencyRecord).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 643,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avg_processing_time = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 645,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar() or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 648,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "pending_retries = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_reliability_service.py",
          "line_number": 653,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_abandoned = db.query(WebhookDeliveryTracker).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/real_trends_service.py": {
      "file_path": "backend/services/real_trends_service.py",
      "total_queries": 19,
      "secure_queries": 0,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 55,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query_map.get(category, \"trending topics today\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 76,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for i, result in enumerate(data.get('organic', [])[:count]):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 78,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'topic': result.get('title', '').replace(' - ', ' ').split(' | ')[0],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 79,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'description': result.get('snippet', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 80,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 81,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': result.get('link', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "top_queries = related_queries[keyword].get('top')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 203,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "organic_count = len(data.get('organic', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "news_count = len(data.get('news', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 259,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'news_mentions': len(data.get('news', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_results': len(data.get('organic', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 264,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in data.get('organic', [])[:3]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = result.get('title', '').lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 266,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = result.get('snippet', '').lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 398,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in data.get('organic', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 399,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = result.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 405,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_trends_service.py",
          "line_number": 407,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': result.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/plan_aware_social_service.py": {
      "file_path": "backend/services/plan_aware_social_service.py",
      "total_queries": 10,
      "secure_queries": 2,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 116,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "available_platforms = self.plan_platform_access.get(plan_name, [\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"available\": self.plan_platform_access.get(plan_name, [\"twitter\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 166,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"features\": self.plan_features.get(plan_name, self.plan_features[\"free\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 267,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 276,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "return result.scalar() or 0",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 285,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 294,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "connections = result.scalars().all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 316,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 348,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return upgrade_map.get(current_plan, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_social_service.py",
          "line_number": 365,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return benefits.get(current_plan, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/memory_service_production.py": {
      "file_path": "backend/services/memory_service_production.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/services/memory_service_production.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metrics = result['metadata'].get('performance_metrics', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service_production.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_rate = metrics.get('engagement_rate', 3.0)  # Default to 3% if no data",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service_production.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get('content_id') == content_id:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/industry_classification_service.py": {
      "file_path": "backend/services/industry_classification_service.py",
      "total_queries": 4,
      "secure_queries": 2,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/industry_classification_service.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_data = INDUSTRY_RESEARCH_MAPPING.get(industry_code, INDUSTRY_RESEARCH_MAPPING[\"general\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/industry_classification_service.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_data = INDUSTRY_RESEARCH_MAPPING.get(industry_code, INDUSTRY_RESEARCH_MAPPING[\"general\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/industry_classification_service.py",
          "line_number": 212,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/industry_classification_service.py",
          "line_number": 217,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "organization = db.query(Organization).filter(Organization.id == user.default_organization_id).first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        }
      ]
    },
    "backend/services/webhook_service.py": {
      "file_path": "backend/services/webhook_service.py",
      "total_queries": 27,
      "secure_queries": 3,
      "risky_queries": 24,
      "issues_found": [
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 105,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "secret = self.platform_secrets.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 173,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "handlers = self.event_handlers.get(event.event_type, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 255,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if value.get('verb') == 'add':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif value.get('verb') == 'remove':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 293,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mapped_event_type = event_type_map.get(linkedin_event_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 300,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "resource_id=payload.get('resourceId', ''),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 318,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mapped_event_type = event_type_map.get(tiktok_event_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 325,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "resource_id=payload.get('data', {}).get('video_id', ''),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 401,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 404,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 479,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 482,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 491,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content.like_count = metrics.get('like_count', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 492,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content.share_count = metrics.get('retweet_count', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 493,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content.comment_count = metrics.get('reply_count', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 494,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content.view_count = metrics.get('impression_count', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 508,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 511,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 517,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "like_count=event.data.get('like_count', content.like_count),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 518,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "share_count=event.data.get('share_count', content.share_count),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 519,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comment_count=event.data.get('comment_count', content.comment_count),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 520,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "view_count=event.data.get('view_count', content.view_count),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 521,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_rate=event.data.get('engagement_rate', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 568,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('x-twitter-webhooks-signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 570,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('x-hub-signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 572,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature = request.headers.get('x-li-signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/webhook_service.py",
          "line_number": 599,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "stats = await redis_cache.get('system', 'webhook_stats')",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        }
      ]
    },
    "backend/services/notification_service.py": {
      "file_path": "backend/services/notification_service.py",
      "total_queries": 12,
      "secure_queries": 4,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 182,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "unread_count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 326,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "notification = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 331,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 354,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "updated_count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 387,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = db.query(Notification).filter(Notification.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 390,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(Notification.is_read == False)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 394,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(Notification.notification_type.in_(type_values))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 398,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").offset(offset).limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 409,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_notifications = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 413,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "unread_notifications = db.query(Notification).filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 423,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "count = db.query(Notification).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/notification_service.py",
          "line_number": 582,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return content_templates.get(milestone_type, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/similarity_service.py": {
      "file_path": "backend/services/similarity_service.py",
      "total_queries": 35,
      "secure_queries": 0,
      "risky_queries": 35,
      "issues_found": [
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 173,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result_metadata = result.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 174,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if content_type and result_metadata.get('type') != content_type:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 176,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if platform and result_metadata.get('platform') != platform:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 218,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_id = basic_result.get('content_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = basic_result.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tags = metadata.get('tags', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 231,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_log = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 232,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ContentLog.content.contains(basic_result.get('content', '')[:100])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 233,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_rate = engagement_metrics.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_id, basic_result.get('content', ''), db",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at_str = basic_result.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content=basic_result.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 270,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "similarity_score=basic_result.get('similarity_score', 0.0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 271,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type=metadata.get('type', 'content'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 272,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform=metadata.get('platform'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 306,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "similarity_score = result.get('similarity_score', 0.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 310,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_rate = engagement_metrics.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at_str = result.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 336,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type = metadata.get('type', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tags = metadata.get('tags', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 388,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "related_id = item.get('content_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 489,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': item.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 490,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': item.get('content'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 492,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': item.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 493,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': item.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 595,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if similarity_results and similarity_results[0].content_id == item.get('content_id'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 598,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': item.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 599,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': item.get('content'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 601,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': item.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 602,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': item.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 754,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return timing_data.get(platform, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 772,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_config = self.platform_adaptations.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 773,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtag_limit = platform_config.get(\"hashtag_limit\", 5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/similarity_service.py",
          "line_number": 794,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "base_hashtags.extend(platform_hashtags.get(platform, []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/publish_runner.py": {
      "file_path": "backend/services/publish_runner.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/publish_runner.py",
          "line_number": 88,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "retry_after = cb_state.get('remaining_cooldown_s', 120)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publish_runner.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"duration:{metrics.get('duration_s', 0):.2f}s\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/error_recovery_service.py": {
      "file_path": "backend/services/error_recovery_service.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "handlers = self.recovery_handlers.get(error_info.error_type, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "fallback = self.fallback_handlers.get(operation)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 407,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.execute(\"SELECT 1\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 437,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reset_time = context.get('rate_limit_reset', 60)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 470,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "async with session.get('https://httpbin.org/status/200', timeout=10) as response:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_recovery_service.py",
          "line_number": 569,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for error_type, data in analysis.get('error_types', {}).items():",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/file_upload_service.py": {
      "file_path": "backend/services/file_upload_service.py",
      "total_queries": 5,
      "secure_queries": 1,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/services/file_upload_service.py",
          "line_number": 106,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "detail=f\"File type not allowed. Allowed types: {', '.join(self.allowed_extensions)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/file_upload_service.py",
          "line_number": 110,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expected_mime = allowed_mime_types.get(file_ext)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/file_upload_service.py",
          "line_number": 174,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "safe_name = ''.join(c for c in original_filename if c.isalnum() or c in '._-')[:50]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/file_upload_service.py",
          "line_number": 338,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/file_upload_service.py",
          "line_number": 342,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/services/content_categorization.py": {
      "file_path": "backend/services/content_categorization.py",
      "total_queries": 20,
      "secure_queries": 0,
      "risky_queries": 20,
      "issues_found": [
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "topic_category=ai_result.get(\"topic_category\", \"general\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "confidence=float(ai_result.get(\"confidence\", 0.5)),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 214,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sentiment=ai_result.get(\"sentiment\", \"neutral\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tone=ai_result.get(\"tone\", \"conversational\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reading_level=ai_result.get(\"reading_level\", \"intermediate\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 217,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keywords=ai_result.get(\"keywords\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 289,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "word_freq[word] = word_freq.get(word, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 319,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_rules = self.platform_rules.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 322,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_length = platform_rules.get(\"max_length\", 10000)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtag_limit = platform_rules.get(\"hashtag_limit\", 10)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 443,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "category_score = category_scores.get(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 445,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").get(platform, base_score)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 453,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sentiment_boost = sentiment_multiplier.get(category_result.sentiment, 1.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 463,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tone_boost = tone_multiplier.get(category_result.tone, 1.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 468,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_rules = self.platform_rules.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_hashtags = platform_rules.get(\"hashtag_limit\", 5) // 2",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 479,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "historical_avg = historical_data.get(category_result.topic_category, base_score)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 575,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "category_counts[category] = category_counts.get(category, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 581,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sentiment_counts[sentiment] = sentiment_counts.get(sentiment, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_categorization.py",
          "line_number": 591,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tone_counts[tone] = tone_counts.get(tone, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/research_scheduler.py": {
      "file_path": "backend/services/research_scheduler.py",
      "total_queries": 17,
      "secure_queries": 0,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 133,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"next_run\": schedule_result.get(\"next_run\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 153,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hour=schedule_config.get(\"hour\", 2),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 154,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "minute=schedule_config.get(\"minute\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 155,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "day_of_week=schedule_config.get(\"day_of_week\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "days_ahead = schedule_config.get(\"day_of_week\", 0) - now.weekday()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hour=schedule_config.get(\"hour\", 2),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 190,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "minute=schedule_config.get(\"minute\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 321,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_avg = config.get(\"average_findings_per_run\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 394,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if opp.get(\"urgency\") == \"high\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 400,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if trend.get(\"impact_level\") == \"high\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 452,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"status\": config.get(\"status\", \"unknown\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 453,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_research_runs\": config.get(\"total_research_runs\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 454,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_research\": config.get(\"last_research\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 455,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"average_findings_per_run\": config.get(\"average_findings_per_run\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 456,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"schedule\": config.get(\"schedule\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 458,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"last_performance_metrics\": config.get(\"last_performance_metrics\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_scheduler.py",
          "line_number": 491,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"next_run\": schedule_result.get(\"next_run\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/web_search_utils.py": {
      "file_path": "backend/services/web_search_utils.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 35,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": item.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 36,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"url\": item.get(\"url\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 37,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"snippet\": item.get(\"snippet\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 38,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"date\": item.get(\"date\", datetime.now().strftime('%Y-%m-%d'))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 86,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=d.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 87,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url=d.get(\"url\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 88,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet=d.get(\"snippet\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_search_utils.py",
          "line_number": 89,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "date=d.get(\"date\", datetime.now().strftime('%Y-%m-%d')),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/metrics_collection_service.py": {
      "file_path": "backend/services/metrics_collection_service.py",
      "total_queries": 9,
      "secure_queries": 0,
      "risky_queries": 9,
      "issues_found": [
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "client = self.platform_clients.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 445,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = await session.get(ContentItem, metrics.content_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 499,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = session.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 505,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentPerformanceSnapshot.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 507,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = await query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 561,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = session.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 567,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentPerformanceSnapshot.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 569,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = await query.order_by(ContentPerformanceSnapshot.viral_score.desc()).limit(50).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection_service.py",
          "line_number": 573,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = await session.get(ContentItem, snapshot.content_item_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/meta_page_token_service.py": {
      "file_path": "backend/services/meta_page_token_service.py",
      "total_queries": 17,
      "secure_queries": 0,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 48,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 52,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "pages_data = data.get(\"data\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 64,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"has_instagram\": bool(page_data.get(\"instagram_business_account\")),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 65,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"token_available\": bool(page_data.get(\"access_token\")),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 70,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "ig_account = page_data.get(\"instagram_business_account\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 75,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_data.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 122,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 126,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return data.get(\"username\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 159,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 163,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_token = data.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_name = data.get(\"name\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return data.get(\"username\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 245,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"page_id\": data.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 252,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"page_name\": data.get(\"name\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/meta_page_token_service.py",
          "line_number": 253,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"permissions\": data.get(\"permissions\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/alerting_service.py": {
      "file_path": "backend/services/alerting_service.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/services/alerting_service.py",
          "line_number": 71,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for group_config in config.get('groups', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/alerting_service.py",
          "line_number": 73,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for rule_config in group_config.get('rules', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/alerting_service.py",
          "line_number": 77,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "duration=rule_config.get('for', '0s'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/alerting_service.py",
          "line_number": 131,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "team_counts[rule.team] = team_counts.get(rule.team, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/alerting_service.py",
          "line_number": 290,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return policies.get(escalation_level, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/error_taxonomy_service.py": {
      "file_path": "backend/services/error_taxonomy_service.py",
      "total_queries": 7,
      "secure_queries": 6,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 634,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.taxonomy_map.get(error_code)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 669,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id=context.get(\"user_id\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 670,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "session_id=context.get(\"session_id\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 671,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "request_id=context.get(\"request_id\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 672,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "endpoint=context.get(\"endpoint\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 673,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_agent=context.get(\"user_agent\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/error_taxonomy_service.py",
          "line_number": 674,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ip_address=context.get(\"ip_address\") if context else None,",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/services/content_moderation_service.py": {
      "file_path": "backend/services/content_moderation_service.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "threshold = ModerationCategories.OPENAI_CATEGORIES.get(category, {}).get('threshold', 0.5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 258,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'message': f'Content flagged by OpenAI moderation: {\", \".join(flagged_categories.keys())}'",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 346,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "threshold = thresholds.get(category, 0.5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 356,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'message': f'Content flagged by pattern matching: {\", \".join(flagged_patterns.keys())}'",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 469,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "final_message = '; '.join(all_messages)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_moderation_service.py",
          "line_number": 507,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'processing_time_ms': result.get('processing_time_ms', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/cache_decorators.py": {
      "file_path": "backend/services/cache_decorators.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/cache_decorators.py",
          "line_number": 93,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_result = await redis_cache.get(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_decorators.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "operations = common_operations.get(platform, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/research_automation.py": {
      "file_path": "backend/services/research_automation.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 385,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 394,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for article in news_data.get(\"articles\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 398,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_id=article.get(\"url\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 399,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=article.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 400,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content=article.get(\"description\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 401,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author=article.get(\"author\", \"Unknown\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 403,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "article.get(\"publishedAt\", \"\").replace(\"Z\", \"+00:00\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 405,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url=article.get(\"url\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 409,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_urls=[article.get(\"urlToImage\")] if article.get(\"urlToImage\") else []",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation.py",
          "line_number": 609,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "all_content = \" \".join([r.title + \" \" + r.content for r in results])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/connection_pool_manager.py": {
      "file_path": "backend/services/connection_pool_manager.py",
      "total_queries": 23,
      "secure_queries": 0,
      "risky_queries": 23,
      "issues_found": [
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 238,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET statement_timeout = '30s'\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 239,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET lock_timeout = '10s'\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 240,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET idle_in_transaction_session_timeout = '60s'\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 243,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET work_mem = '16MB'\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 244,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET maintenance_work_mem = '64MB'\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 247,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET tcp_keepalives_idle = 600\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 248,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET tcp_keepalives_interval = 30\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 249,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET tcp_keepalives_count = 3\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 259,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET SESSION max_execution_time = 30000\")  # 30 seconds",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 260,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET SESSION innodb_lock_wait_timeout = 10\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 263,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET SESSION sort_buffer_size = 2097152\")  # 2MB",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 264,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET SESSION join_buffer_size = 262144\")   # 256KB",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 267,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 278,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA journal_mode=WAL\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 279,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA synchronous=NORMAL\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 280,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA cache_size=10000\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 281,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA temp_store=MEMORY\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 282,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA mmap_size=268435456\")  # 256MB",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 285,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA optimize\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 288,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cursor.execute(\"PRAGMA foreign_keys=ON\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 364,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = conn.execute(text(\"SELECT 1\")).fetchone()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 494,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"health\": health[\"pools\"].get(pool_name, {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_pool_manager.py",
          "line_number": 496,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": recommendations.get(pool_name, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/x_connection_service.py": {
      "file_path": "backend/services/x_connection_service.py",
      "total_queries": 17,
      "secure_queries": 3,
      "risky_queries": 14,
      "issues_found": [
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 34,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token = tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 50,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params, headers=headers)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 54,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_data = data.get(\"data\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 59,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = user_data.get(\"id\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "username = user_data.get(\"username\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "name = user_data.get(\"name\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 70,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verified\": user_data.get(\"verified\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 71,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"created_at\": user_data.get(\"created_at\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 72,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"public_metrics\": user_data.get(\"public_metrics\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_detail = error_data.get(\"detail\", f\"X API error: {e.response.status_code}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 123,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"expires_at\": tokens.get(\"expires_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scope_string = tokens.get(\"scope\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"verified\": user_data.get(\"verified\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"created_at\": user_data.get(\"created_at\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"followers_count\": user_data.get(\"public_metrics\", {}).get(\"followers_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 171,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"following_count\": user_data.get(\"public_metrics\", {}).get(\"following_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_connection_service.py",
          "line_number": 172,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"tweet_count\": user_data.get(\"public_metrics\", {}).get(\"tweet_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/pgvector_service.py": {
      "file_path": "backend/services/pgvector_service.py",
      "total_queries": 14,
      "secure_queries": 4,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 41,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.db.execute(text(\"CREATE EXTENSION IF NOT EXISTS vector;\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 81,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO content_embeddings (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 90,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 126,
          "query_type": "INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "INSERT INTO memory_embeddings (",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 135,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 181,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 243,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query, params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 268,
          "query_type": "DELETE.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "DELETE FROM content_embeddings",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 272,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 294,
          "query_type": "DELETE.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "DELETE FROM memory_embeddings",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 298,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "result = self.db.execute(query, {",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 320,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "SELECT COUNT(*) as count FROM content_embeddings",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 332,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_result = self.db.execute(content_query, {'user_id': user_id})",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/pgvector_service.py",
          "line_number": 333,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "memory_result = self.db.execute(memory_query, {'user_id': user_id})",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/services/image_generation_service.py": {
      "file_path": "backend/services/image_generation_service.py",
      "total_queries": 70,
      "secure_queries": 0,
      "risky_queries": 70,
      "issues_found": [
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 318,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_prompt += f\". Quality requirements: {', '.join(quality_boosters[:3])}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 323,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_prompt += f\". Platform optimization: {', '.join(platform_boosters)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 333,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_prompt += f\". Technical specs: {', '.join(technical_specs[:2])}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 400,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_type = user_settings.get(\"industry_type\", \"general\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 406,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "visual_style = user_settings.get(\"visual_style\", \"modern\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 419,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "primary_color = user_settings.get(\"primary_color\", \"#3b82f6\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 420,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "secondary_color = user_settings.get(\"secondary_color\", \"#10b981\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 428,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "brand_keywords = user_settings.get(\"brand_keywords\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 430,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keywords_str = \", \".join(brand_keywords[:3])  # Limit to 3 most important",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 434,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "image_mood = user_settings.get(\"image_mood\", [\"professional\", \"clean\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 436,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mood_str = \", \".join(image_mood)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avoid_list = user_settings.get(\"avoid_list\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 442,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avoid_str = \", \".join(avoid_list[:5])  # Limit to prevent prompt bloat",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 446,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "preferred_style = user_settings.get(\"preferred_image_style\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 448,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "lighting = preferred_style.get(\"lighting\", \"natural\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 449,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "composition = preferred_style.get(\"composition\", \"rule_of_thirds\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 450,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "color_temp = preferred_style.get(\"color_temperature\", \"neutral\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 454,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quality = user_settings.get(\"image_quality\", \"high\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 461,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_prompt += f\" Quality: {quality_specs.get(quality, 'high resolution, professional quality')}.\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 611,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": brand_safety_result.get('recommendations', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 615,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "preset_config = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 620,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"size\": preset_config.get(\"size\", \"1024x1024\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 621,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"quality\": preset_config.get(\"quality\", \"standard\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 651,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "img_response = await client.get(image_data.url)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 694,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "legacy_quality_score = quality_metrics.get(\"overall_score\", 50)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 697,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"issues\": quality_metrics.get(\"recommendations\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 698,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": quality_metrics.get(\"recommendations\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 704,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"error\" in quality_metrics or quality_metrics.get(\"models_used\", {}).get(\"clip_available\", True) == False:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 705,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "fallback_reason = \"model_unavailable\" if quality_metrics.get(\"models_used\", {}).get(\"clip_available\", True) == False else \"assessment_error\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 734,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "model_config = self.model_configs.get(model, self.model_configs[\"auto\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 765,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "legacy_quality_score = retry_quality_assessment.get(\"overall_score\", 50)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 768,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"issues\": retry_quality_assessment.get(\"recommendations\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 769,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": retry_quality_assessment.get(\"recommendations\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 803,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Alt-text generated: {alt_text_data.get('status')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 808,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "status=alt_text_data.get('status', 'success')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 865,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "advanced_assessment = legacy_quality_metrics.get(\"advanced_assessment\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 878,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quality_level = advanced_assessment.get(\"quality_level\", \"unknown\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 886,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "brand_score = dimension_scores.get(\"brand\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 891,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_type = self._current_user_settings.get(\"industry_type\", \"general\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 939,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"alt_text\": alt_text_data.get(\"alt_text\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 941,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"alt_text\": alt_text_data.get(\"alt_text\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 942,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"alt_text_status\": alt_text_data.get(\"status\", \"not_generated\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 943,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"alt_text_length\": alt_text_data.get(\"length\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 944,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform_optimized\": alt_text_data.get(\"platform\") == platform",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 947,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"score\": legacy_quality_metrics.get(\"quality_score\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 948,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"issues\": legacy_quality_metrics.get(\"issues\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 949,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": legacy_quality_metrics.get(\"recommendations\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 953,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"advanced_assessment\": legacy_quality_metrics.get(\"advanced_assessment\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 959,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"original_size\": processing_metadata.get(\"original_size\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 960,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"final_size\": processing_metadata.get(\"processed_size\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 961,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"compression_ratio\": processing_metadata.get(\"compression_ratio\", 1.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 970,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"requested_size\": tool_options.get(\"size\", \"1024x1024\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1041,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tool_options = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tool_options = self.quality_presets.get(quality_preset, self.quality_presets[\"standard\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Generated image {i + 1}/{image_count} for {platform} (quality: {result.get('quality', {}).get('score', 'N/A')})\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1277,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "successful_images = [img for img in platform_images if img.get(\"status\") == \"success\"]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avg_quality = sum(img.get(\"quality\", {}).get(\"score\", 0) for img in successful_images) / max(len(successful_images), 1)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return presets.get(platform, [\"standard\", \"premium\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1413,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return tips.get(platform, [",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1453,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return guidelines.get(platform, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actual_model = self.model_mapping.get(model, \"grok-2-image\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1505,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "model_config = self.model_configs.get(model)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1885,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "guidance = platform_guidance.get(platform, \"Create engaging social media content\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 1953,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = '. '.join(sentences[:mid_point]) + '.\\n\\n' + '. '.join(sentences[mid_point:])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2068,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"industry_type\": industry_context or user_settings.get(\"industry_type\", \"general\") if user_settings else \"general\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry_requirements = brand_context.get(\"industry_requirements\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "brand_guidelines = brand_context.get(\"brand_guidelines\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2205,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "restrictions = requirements.get(\"restrictions\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2240,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keywords = guidelines.get(\"keywords\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_generation_service.py",
          "line_number": 2246,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "issues.append(f\"WARNING: Content doesn't emphasize brand keywords: {', '.join(keywords[:3])}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/embedding_service.py": {
      "file_path": "backend/services/embedding_service.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/services/embedding_service.py",
          "line_number": 122,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "chunks.append(' '.join(current_chunk))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/embedding_service.py",
          "line_number": 130,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "chunks.append(' '.join(current_chunk))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/embedding_service.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hash_input = f\"{content}_{metadata.get('platform', '')}_{metadata.get('created_at', '')}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/embedding_service.py",
          "line_number": 576,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(key) != value:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/pkce_state_store.py": {
      "file_path": "backend/services/pkce_state_store.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/services/pkce_state_store.py",
          "line_number": 152,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "pipe.get(redis_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pkce_state_store.py",
          "line_number": 154,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = pipe.execute()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pkce_state_store.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Consumed PKCE state for org {state_data.get('organization_id')}, platform {state_data.get('platform')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pkce_state_store.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_json = self.redis.get(cache_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/pkce_state_store.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"memory_used\": self.redis.info().get(\"used_memory_human\", \"unknown\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/cache_warmup_service.py": {
      "file_path": "backend/services/cache_warmup_service.py",
      "total_queries": 17,
      "secure_queries": 4,
      "risky_queries": 13,
      "issues_found": [
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 56,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(ContentItem)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 57,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".filter(ContentItem.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 58,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ".filter(ContentItem.created_at >= datetime.now(timezone.utc) - timedelta(days=days_back))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 64,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for content in content_query.all():",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 88,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "operations = essential_ops.get(platform, [\"profile\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "last_warmup = await self.cache.get(\"system\", \"warmup\", user_id=user_id, resource_id=\"last_warmup\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 224,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(ContentItem)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 225,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(ContentItem.published_at >= datetime.now(timezone.utc) - timedelta(days=7))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 226,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(ContentItem.engagement_count > 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 229,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 275,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User.id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 276,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".join(ContentItem)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 277,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(ContentItem.created_at >= datetime.now(timezone.utc) - timedelta(days=30))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 280,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 295,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "successful = sum(1 for r in results if isinstance(r, dict) and r.get(\"status\") == \"completed\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 331,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return base_ttls.get(operation, 3600)  # Default 1 hour",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cache_warmup_service.py",
          "line_number": 337,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "warmup_stats = await self.cache.get(\"system\", \"warmup_stats\")",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        }
      ]
    },
    "backend/services/key_rotation_service.py": {
      "file_path": "backend/services/key_rotation_service.py",
      "total_queries": 28,
      "secure_queries": 0,
      "risky_queries": 28,
      "issues_found": [
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 205,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "rotation_interval = self.rotation_schedules.get(key_type, 90)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"rotation_due_in_days\": self.rotation_schedules.get(key_type, 90) - (oldest_key_age or 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"duration_seconds\": migration_results.get(\"duration_seconds\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 310,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"duration_seconds\": migration_results.get(\"duration_seconds\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"errors\": migration_results.get(\"errors\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 352,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_key = self.key_store.get(old_key_id, {}).get(\"key\") if old_key_id else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 353,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "new_key = self.key_store.get(new_key_id, {}).get(\"key\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 364,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "credentials = db.query(UserCredentials).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 396,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(RefreshTokenBlacklist).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 415,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if (key_data.get(\"key_type\") == key_type and",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 416,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "key_data.get(\"status\") == \"active\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 421,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"usage_count\": key_data.get(\"usage_count\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 438,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "rotation_interval = self.rotation_schedules.get(key_type, 90)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 476,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if key_data.get(\"status\") == \"deprecated\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 477,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "key_type = key_data.get(\"key_type\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 478,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = key_data.get(\"created_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 481,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "grace_period = self.grace_periods.get(key_type, 30)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 484,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if age_days > (self.rotation_schedules.get(key_type, 90) + grace_period):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 513,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return getattr(self, 'rotation_events', {}).get(event_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 543,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"rotation_schedule_days\": self.rotation_schedules.get(key_type, 90),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 544,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"grace_period_days\": self.grace_periods.get(key_type, 30),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 567,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if details.get(\"is_overdue\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 595,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"rotation_interval_days\": self.rotation_schedules.get(key_type, 90),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 596,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"grace_period_days\": self.grace_periods.get(key_type, 30),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 606,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"status\": current_config[\"key_types\"].get(key_type.value, {}).get(\"status\", \"unknown\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 607,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"oldest_key_age_days\": current_config[\"key_types\"].get(key_type.value, {}).get(\"oldest_key_age_days\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 608,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"is_overdue\": current_config[\"key_types\"].get(key_type.value, {}).get(\"is_overdue\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/key_rotation_service.py",
          "line_number": 659,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if details.get(\"is_overdue\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/social_webhook_service.py": {
      "file_path": "backend/services/social_webhook_service.py",
      "total_queries": 69,
      "secure_queries": 3,
      "risky_queries": 66,
      "issues_found": [
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "entry_list = webhook_data.get('entry', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 118,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_id = entry.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 119,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "changes = entry.get('changes', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 122,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "field = change.get('field')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 123,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "value = change.get('value', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "entry_list = webhook_data.get('entry', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "instagram_id = entry.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 166,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "changes = entry.get('changes', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "field = change.get('field')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "value = change.get('value', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 232,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comment_id = comment_data.get('comment_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "post_id = comment_data.get('post_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 234,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message = comment_data.get('message', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 235,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_time = comment_data.get('created_time')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 236,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender = comment_data.get('from', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_platform_id=sender.get('id', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 250,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_username=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mention_id = mention_data.get('mention_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message = mention_data.get('message', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 277,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_time = mention_data.get('created_time')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender = mention_data.get('from', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 289,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "author_platform_id=sender.get('id', ''),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 290,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_username=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 291,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 315,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_id = message_data.get('message_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 316,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = message_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 317,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_time = message_data.get('created_time')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 318,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender = message_data.get('from', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 329,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "author_platform_id=sender.get('id', ''),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 330,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_username=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 331,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_display_name=sender.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 356,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comment_id = comment_data.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 357,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = comment_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 358,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "timestamp = comment_data.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_id = comment_data.get('media', {}).get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 362,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "from_user = comment_data.get('from', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 374,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_platform_id=from_user.get('id', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 375,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_username=from_user.get('username', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_display_name=from_user.get('username', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 400,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comment_id = mention_data.get('comment_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 401,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_id = mention_data.get('media_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = mention_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 403,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "timestamp = mention_data.get('timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 437,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tweet_id = tweet_data.get('id_str')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 438,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = tweet_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 439,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = tweet_data.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = tweet_data.get('user', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 441,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "in_reply_to = tweet_data.get('in_reply_to_status_id_str')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 444,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "entities = tweet_data.get('entities', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 445,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mentions = entities.get('user_mentions', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 450,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = self._find_connection_by_username('twitter', mention.get('screen_name', ''))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 465,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_platform_id=user.get('id_str', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 466,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_username=user.get('screen_name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 467,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_display_name=user.get('name', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 468,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_profile_url=f\"https://twitter.com/{user.get('screen_name', '')}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_profile_image=user.get('profile_image_url_https', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 470,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_verified=user.get('verified', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 490,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_create = dm_data.get('message_create', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 491,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_data = message_create.get('message_data', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 492,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_id = message_create.get('sender_id', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 493,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recipient_id = message_create.get('target', {}).get('recipient_id', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 495,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_id = dm_data.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 496,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = message_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 497,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_timestamp = dm_data.get('created_timestamp')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 530,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 534,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 538,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.db.query(SocialPlatformConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/social_webhook_service.py",
          "line_number": 542,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/research_monitoring.py": {
      "file_path": "backend/services/research_monitoring.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/services/research_monitoring.py",
          "line_number": 488,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "state_value = {'closed': 0, 'open': 1, 'half-open': 2}.get(state, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/quota_management.py": {
      "file_path": "backend/services/quota_management.py",
      "total_queries": 15,
      "secure_queries": 0,
      "risky_queries": 15,
      "issues_found": [
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 243,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_usage = limit_info.get(\"quota_usage\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 244,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quota_limit = limit_info.get(\"quota_total\", 25)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 245,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "time_window = limit_info.get(\"quota_duration\", 3600)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_stats = stats.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 281,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 283,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_usage = platform_stats.get(\"current_requests\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quota_limit = config.get(\"base_quota\", 100)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 285,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "time_window = config.get(\"window_seconds\", 3600)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "burst_available = platform_stats.get(\"burst_tokens_remaining\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 294,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "utilization_percent=platform_stats.get(\"utilization\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.platform_configs.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 306,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quota_limit=config.get(\"base_quota\", 100),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 307,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "time_window=config.get(\"window_seconds\", 3600),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 308,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reset_time=get_utc_now() + timedelta(seconds=config.get(\"window_seconds\", 3600)),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/quota_management.py",
          "line_number": 355,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = request.get(\"platform\", \"unknown\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/real_social_research_service.py": {
      "file_path": "backend/services/real_social_research_service.py",
      "total_queries": 48,
      "secure_queries": 0,
      "risky_queries": 48,
      "issues_found": [
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_sources': len(data.get('organic', [])) + len(data.get('news', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 89,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for news_item in data.get('news', [])[:limit]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 90,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = news_item.get('title', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 91,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = news_item.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': news_item.get('source', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 100,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'date': news_item.get('date', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 101,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': news_item.get('link', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in general_data.get('organic', [])[:5]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 107,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = result.get('title', '') + ' ' + result.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 112,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 113,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'context': result.get('snippet', '')[:200],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': result.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_sources': len(data.get('organic', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 201,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in data.get('organic', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 202,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = result.get('title', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 203,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = result.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': result.get('link', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for insight in insights_data.get('organic', [])[:5]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 223,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = insight.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 231,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': insight.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 234,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': insight.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 245,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_sources': len(data.get('organic', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in data.get('organic', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 328,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = result.get('title', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 329,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = result.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 344,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': result.get('link', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 355,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'leadership_approach': ', '.join(tl_indicators),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 356,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source_authority': result.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 361,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for practice in bp_data.get('organic', [])[:5]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 362,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = practice.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 370,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': practice.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': practice.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 450,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_videos_analyzed': len(data.get('organic', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 456,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for result in data.get('organic', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 457,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = result.get('title', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 458,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet = result.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 459,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url = result.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 495,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for strategy in trends_data.get('organic', [])[:5]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 496,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = strategy.get('snippet', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 505,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': strategy.get('displayLink', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 508,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': strategy.get('link', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 573,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "all_hashtags.extend(hashtag_data.get('hashtags', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 580,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title = item.get('title', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 587,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/real_social_research_service.py",
          "line_number": 595,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keyword_counts[keyword] = keyword_counts.get(keyword, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/plan_service.py": {
      "file_path": "backend/services/plan_service.py",
      "total_queries": 10,
      "secure_queries": 1,
      "risky_queries": 9,
      "issues_found": [
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 32,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 38,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "plan_result = self.db.execute(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 213,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(query)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 214,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return result.scalars().all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 218,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 225,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 234,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_level = plan_hierarchy.get(current_plan, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "new_level = plan_hierarchy.get(new_plan_name, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_service.py",
          "line_number": 340,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_result = self.db.execute(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/apm_service.py": {
      "file_path": "backend/services/apm_service.py",
      "total_queries": 8,
      "secure_queries": 2,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cache_hit_ratio = cache_stats.get('hit_ratio', 0.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if db_stats.get('peak_connections', 0) > 0:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db_pool_usage = (db_stats.get('active_connections', 0) / db_stats.get('peak_connections', 1)) * 100",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 363,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "thresholds = self.thresholds.get(metric_name, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 393,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "thresholds = self.thresholds.get(metric_name, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 767,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"apm_network_bytes_sent_total {latest_system.network_io.get('bytes_sent', 0)} {timestamp}\",",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 768,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"apm_network_bytes_recv_total {latest_system.network_io.get('bytes_recv', 0)} {timestamp}\",",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/services/apm_service.py",
          "line_number": 779,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return \"\\n\".join(lines)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/x_mentions_service.py": {
      "file_path": "backend/services/x_mentions_service.py",
      "total_queries": 8,
      "secure_queries": 1,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 58,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "encrypted_token = connection.access_tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 66,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "since_id = connection.platform_metadata.get(\"mentions_since_id\") if connection.platform_metadata else None",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tweets = mentions_data.get(\"data\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, headers=headers, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 196,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_id = tweet.get(\"author_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = tweet.get(\"text\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = tweet.get(\"created_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/x_mentions_service.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reset_time = response.headers.get(\"x-rate-limit-reset\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/content_generation_automation.py": {
      "file_path": "backend/services/content_generation_automation.py",
      "total_queries": 22,
      "secure_queries": 0,
      "risky_queries": 22,
      "issues_found": [
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 511,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=parsed_content.get(\"title\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 513,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtags=parsed_content.get(\"hashtags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 514,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "mentions=parsed_content.get(\"mentions\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 515,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_suggestions=parsed_content.get(\"media_suggestions\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 540,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "template = self.content_templates.get(prompt.content_type.value, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 551,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Keywords to include: {', '.join(prompt.keywords)}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 552,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Goals: {', '.join(prompt.goals)}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 555,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "- Character limit: {constraints.get('character_limit', 'No limit')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 556,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "- Hashtag limit: {constraints.get('hashtag_limit', 'No limit')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 557,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "- Best practices: {constraints.get('best_practices', [])}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 561,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Content Structure: {template.get('structure', 'Standard format')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 597,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 602,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 607,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 623,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parsed[current_section.lower()] = '\\n'.join(current_content).strip()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 653,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "char_limit = constraints.get(\"character_limit\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 689,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return constraints.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 708,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return \" \".join(context_parts) if context_parts else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 740,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "avg_similarity = sum(result.metadata.get(\"similarity_score\", 0.5) for result in similar_content) / len(similar_content)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 764,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tone_words = tone_keywords.get(tone, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 804,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtag_count = len(content.get(\"hashtags\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_generation_automation.py",
          "line_number": 868,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "client = self.platform_clients.get(content.platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/cicd_maturity_assessment.py": {
      "file_path": "backend/services/cicd_maturity_assessment.py",
      "total_queries": 53,
      "secure_queries": 0,
      "risky_queries": 53,
      "issues_found": [
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 110,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflow_count=len(workflow_analysis.get(\"workflows\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"triggers\"].update(workflow_analysis.get(\"triggers\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"jobs\"].extend(workflow_analysis.get(\"jobs\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"actions_used\"].update(workflow_analysis.get(\"actions_used\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"security_features\"].extend(workflow_analysis.get(\"security_features\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"deployment_strategies\"].extend(workflow_analysis.get(\"deployment_strategies\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "analysis[\"environment_usage\"].update(workflow_analysis.get(\"environments\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 242,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "assessor = assessors.get(dimension)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 266,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "triggers = analysis.get(\"triggers\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 287,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 319,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 323,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "build_workflows = [w for w in workflows if \"build\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 383,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 387,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if any(keyword in w.get(\"filename\", \"\").lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 409,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "evidence.append(f\"Multiple test types: {', '.join(set(test_types))}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 415,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 455,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "security_features = analysis.get(\"security_features\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 484,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 486,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"security\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 521,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "deployment_strategies = analysis.get(\"deployment_strategies\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 522,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "environments = analysis.get(\"environment_usage\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 525,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 527,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"deploy\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 548,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "evidence.append(f\"Multi-environment support: {', '.join(environments)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 551,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "evidence.append(f\"Basic environment support: {', '.join(environments)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 587,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 591,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"monitoring\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 615,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 662,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "environments = analysis.get(\"environment_usage\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 663,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 680,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "iac_actions = [action for action in analysis.get(\"actions_used\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 718,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 722,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"rollback\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 731,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"backup\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 740,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"recovery\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 787,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 788,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "actions_used = analysis.get(\"actions_used\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 791,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parallel_jobs = sum(len(w.get(\"jobs\", [])) for w in workflows if len(w.get(\"jobs\", [])) > 1)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 825,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_complexity = sum(w.get(\"complexity_score\", 0) for w in workflows)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 858,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = analysis.get(\"workflows\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 859,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "triggers = analysis.get(\"triggers\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 875,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"compliance\" in w.get(\"filename\", \"\").lower()]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 884,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if any(doc in w.get(\"filename\", \"\").lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 967,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "weight = weights.get(dimension, 0.05)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1032,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "base_impact = impact_map.get(dimension, \"General process improvement\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1077,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_workflows\": len(workflow_analysis.get(\"workflows\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1078,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_jobs\": len(workflow_analysis.get(\"jobs\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1079,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"unique_actions\": len(workflow_analysis.get(\"actions_used\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1080,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"security_features_count\": len(workflow_analysis.get(\"security_features\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1081,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"environments_count\": len(workflow_analysis.get(\"environment_usage\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1082,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"deployment_strategies_count\": len(workflow_analysis.get(\"deployment_strategies\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/cicd_maturity_assessment.py",
          "line_number": 1089,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"workflow_complexity\": sum(w.get(\"complexity_score\", 0) for w in workflow_analysis.get(\"workflows\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/content_automation.py": {
      "file_path": "backend/services/content_automation.py",
      "total_queries": 21,
      "secure_queries": 0,
      "risky_queries": 21,
      "issues_found": [
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 97,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content += f\"\\n\\n{' '.join(self.hashtags)}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 187,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "target_audience=context.get(\"target_audience\", \"general audience\") if context else \"general audience\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keywords=context.get(\"keywords\", []) if context else [],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goals=context.get(\"goals\", []) if context else [],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 190,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_hashtags=context.get(\"include_hashtags\", True) if context else True,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 191,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_call_to_action=context.get(\"include_call_to_action\", True) if context else True,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 192,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_length=context.get(\"max_length\") if context else None,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 193,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_media=context.get(\"include_media\", False) if context else False",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 364,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "limits = self.platform_limits.get(platform, {\"text\": 1000, \"hashtags\": 5})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 422,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if research_summary and research_summary.get(\"trending_topics\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 424,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "research_context = f\"Based on current trends: {trending.get('topic', '')} is trending with {trending.get('sentiment', 'neutral')} sentiment.\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 427,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_chars = min(limits.get(\"text\", 1000), request.max_length or 1000)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 476,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "- Keywords to include: {', '.join(request.keywords)}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 532,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "template = self.content_templates.get(request.content_type, {}).get(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 570,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_hashtags = limits.get(\"hashtags\", 5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 599,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "base_tags = platform_hashtags.get(platform, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 631,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_ctas = cta_templates.get(platform, [\"Let us know what you think!\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 691,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_base = base_engagement.get(platform, {\"likes\": 10, \"comments\": 1, \"shares\": 1})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 734,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_length = limits.get(\"text\", 1000) * 0.7  # 70% of max is often optimal",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 738,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif content_length <= limits.get(\"text\", 1000):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_automation.py",
          "line_number": 744,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_hashtags = min(limits.get(\"hashtags\", 5), 5)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/email_service.py": {
      "file_path": "backend/services/email_service.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/email_service.py",
          "line_number": 201,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message_id\": response.headers.get('X-Message-Id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/email_service.py",
          "line_number": 281,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message_id\": result.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/usage_tracking_service.py": {
      "file_path": "backend/services/usage_tracking_service.py",
      "total_queries": 8,
      "secure_queries": 3,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 117,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_usage = await redis_cache.get(\"usage_tracking\", \"monthly_usage\", resource_id=cache_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 125,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.query(func.sum(UsageRecord.quantity)).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 131,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").scalar()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 168,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = self.db.query(func.sum(UsageRecord.quantity)).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 174,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 231,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = self.db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 236,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/usage_tracking_service.py",
          "line_number": 241,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").group_by(UsageRecord.usage_type).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/services/oauth_token_service.py": {
      "file_path": "backend/services/oauth_token_service.py",
      "total_queries": 15,
      "secure_queries": 1,
      "risky_queries": 14,
      "issues_found": [
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 167,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 180,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 187,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 274,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 276,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 327,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 329,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 370,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 375,
          "query_type": "\\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(OAuthToken.platform == platform)",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 378,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(OAuthToken.is_valid == True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 382,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 389,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.order_by(OAuthToken.created_at.desc()).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 409,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tokens_to_delete = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 442,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token_record = self.db.query(OAuthToken).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/oauth_token_service.py",
          "line_number": 444,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/plan_aware_stripe_service.py": {
      "file_path": "backend/services/plan_aware_stripe_service.py",
      "total_queries": 14,
      "secure_queries": 0,
      "risky_queries": 14,
      "issues_found": [
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 215,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 221,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = subscription_data.get(\"metadata\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan_id = metadata.get(\"plan_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 223,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan_name = metadata.get(\"plan_name\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 227,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan = self.db.query(Plan).filter(Plan.id == int(plan_id)).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 232,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan = self.db.query(Plan).filter(Plan.name == plan_name).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 242,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_period_end = subscription_data.get(\"current_period_end\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 259,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_period_end = subscription_data.get(\"current_period_end\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 287,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 308,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "subscription_id = invoice_data.get(\"subscription\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 313,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 322,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if invoice_data.get(\"period_end\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/plan_aware_stripe_service.py",
          "line_number": 337,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = self.db.query(User).filter(User.stripe_customer_id == customer_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/distributed_session_manager.py": {
      "file_path": "backend/services/distributed_session_manager.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "client_info.get('user_agent', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "client_info.get('ip_address', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 277,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_string = '|'.join(components)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 368,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_data = await self.redis_client.get(session_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 377,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'revocation_reason': RevocationReason(data['revocation_reason']) if data.get('revocation_reason') else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 531,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expires_at = payload.get('exp', time.time() + 3600)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 791,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_data = await self.redis_client.get(key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 794,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if data.get('state') == 'active':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 796,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif data.get('state') == 'revoked':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_session_manager.py",
          "line_number": 843,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await self.redis_client.get(test_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/alt_text_service.py": {
      "file_path": "backend/services/alt_text_service.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/alt_text_service.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return platform_fallbacks.get(platform, \"Social media image\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/alt_text_service.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_length = length_limits.get(platform, 125)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/performance_tracking.py": {
      "file_path": "backend/services/performance_tracking.py",
      "total_queries": 15,
      "secure_queries": 2,
      "risky_queries": 13,
      "issues_found": [
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_thresholds = self.tier_thresholds.get(platform, self.tier_thresholds[\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 176,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_thresholds = self.tier_thresholds.get(platform, self.tier_thresholds[\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 229,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(ContentItem.id == content_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 247,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "likes_count=new_metrics.get(\"likes_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "shares_count=new_metrics.get(\"shares_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comments_count=new_metrics.get(\"comments_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 250,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reach_count=new_metrics.get(\"reach_count\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "click_count=new_metrics.get(\"click_count\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 368,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_content = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 375,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(desc(ContentItem.published_at)).limit(50).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 483,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = db.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 488,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentPerformanceSnapshot.snapshot_time).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 564,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 570,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/performance_tracking.py",
          "line_number": 589,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tier_distribution[tier] = tier_distribution.get(tier, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/instagram_service.py": {
      "file_path": "backend/services/instagram_service.py",
      "total_queries": 15,
      "secure_queries": 5,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 396,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_settings = db.query(UserSetting).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 398,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first() if db else None",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ig_data = user_settings.connected_accounts.get(\"instagram\", {})",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 403,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "account_type = ig_data.get(\"account_type\", \"BUSINESS\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 425,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "caption += ' '.join(new_hashtags)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 458,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "structured_caption = '\\n'.join(content_lines)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 460,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "structured_caption += '\\n\\n' + '\\n'.join(hashtag_lines)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 678,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "potential += media_bonus.get(media_type, 0.1)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 734,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_item = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 737,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 817,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_settings = db.query(UserSetting).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 819,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first() if db else None",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 823,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ig_data = user_settings.connected_accounts.get(\"instagram\", {})",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 824,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "account_type = ig_data.get(\"account_type\", \"BUSINESS\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/instagram_service.py",
          "line_number": 957,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "type_counts[media_type] = type_counts.get(media_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/workflow_orchestration.py": {
      "file_path": "backend/services/workflow_orchestration.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/services/workflow_orchestration.py",
          "line_number": 426,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"research_topics_found\": research_step.result.get(\"trending_topics\", 0) if research_step.result else 0,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/workflow_orchestration.py",
          "line_number": 584,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "active_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/workflow_orchestration.py",
          "line_number": 587,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/workflow_orchestration.py",
          "line_number": 746,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.active_workflows.get(execution_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/content_safety_service.py": {
      "file_path": "backend/services/content_safety_service.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 242,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "len([v for v in result.violations if v.get(\"severity\") == \"high\"]) == 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "violation_type=violation.get(\"type\", \"unknown\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "severity=violation.get(\"severity\", \"low\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 418,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message\": f\"Content mentions prohibited topics: {', '.join(topic_violations)}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 439,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"message\": f\"Missing required brand elements: {', '.join(missing_elements)}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 613,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_guidelines = brand_guidelines.platform_specific.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 626,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "high_violations = len([v for v in result.violations if v.get(\"severity\") == \"high\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 627,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "medium_violations = len([v for v in result.violations if v.get(\"severity\") == \"medium\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 628,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "low_violations = len([v for v in result.violations if v.get(\"severity\") == \"low\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_safety_service.py",
          "line_number": 631,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "openai_flagged = result.moderation_flags.get(\"flagged\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/image_processing_service.py": {
      "file_path": "backend/services/image_processing_service.py",
      "total_queries": 9,
      "secure_queries": 0,
      "risky_queries": 9,
      "issues_found": [
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_spec = self.PLATFORM_SPECS.get(platform, self.PLATFORM_SPECS[\"instagram\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 142,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "target_size = platform_spec.get(format_type, platform_spec[\"default\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 217,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "settings = self.QUALITY_SETTINGS.get(quality_preset, self.QUALITY_SETTINGS[\"standard\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if settings.get(\"sharpen\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 223,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "enhanced_image = enhanced_image.filter(ImageFilter.UnsharpMask(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 228,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if settings.get(\"enhance_color\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if settings.get(\"enhance_contrast\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 294,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text_position = positions.get(position, positions[\"bottom_right\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/image_processing_service.py",
          "line_number": 437,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return practices.get(platform, [",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/template_validation_service.py": {
      "file_path": "backend/services/template_validation_service.py",
      "total_queries": 16,
      "secure_queries": 1,
      "risky_queries": 15,
      "issues_found": [
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 209,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "requirements = self.model_requirements.get(model_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 433,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "requirements = self.model_requirements.get(template_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 584,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recommendations.append(f\"\u2795 Create missing critical templates: {', '.join(missing_templates)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 700,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"capabilities\": model_info.get(\"capabilities\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 747,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"content_policy_compliance\" not in template_info.get(\"capabilities\", {}):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 757,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"safety_filter\" not in template_info.get(\"capabilities\", {}):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 791,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if method not in template_info.get(\"methods\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 801,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = template_info.get(\"configuration\", {})",
          "risk_level": "LOW",
          "recommendation": "Query appears to access safe/public data"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 802,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not config.get(\"max_prompt_length\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 834,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not template_info.get(\"api_key_configured\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 844,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not template_info.get(\"service_available\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 867,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "model_name = issue.details.get(\"model\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 868,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "missing_config = issue.details.get(\"missing_config\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 882,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"description\": f\"Would set max_prompt_length to {default_lengths.get(model_name, default_lengths['default'])} for {model_name}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 894,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "model_name = issue.details.get(\"model\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/template_validation_service.py",
          "line_number": 895,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "issue_type = issue.details.get(\"issue\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/content_scheduler_service.py": {
      "file_path": "backend/services/content_scheduler_service.py",
      "total_queries": 6,
      "secure_queries": 2,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 53,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 60,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 143,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 150,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 180,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_scheduler_service.py",
          "line_number": 182,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/token_refresh_service.py": {
      "file_path": "backend/services/token_refresh_service.py",
      "total_queries": 11,
      "secure_queries": 0,
      "risky_queries": 11,
      "issues_found": [
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "encrypted_user_token = connection.access_tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 157,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "encrypted_refresh_token = connection.access_tokens.get(\"refresh_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 171,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expires_in = new_tokens.get(\"expires_in\", 7200)  # Default 2 hours",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 229,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 234,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "long_lived_token = data.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expires_in = data.get(\"expires_in\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 260,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token_data = data.get(\"data\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 262,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return token_data.get(\"is_valid\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response = await client.get(url, params=params)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/token_refresh_service.py",
          "line_number": 282,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_token = data.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/distributed_rate_limiter.py": {
      "file_path": "backend/services/distributed_rate_limiter.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/distributed_rate_limiter.py",
          "line_number": 376,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = await pipe.execute()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/distributed_rate_limiter.py",
          "line_number": 451,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "identifier = \":\".join(key_parts[2:-1])  # Remove prefix and suffix",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/connection_publisher_service.py": {
      "file_path": "backend/services/connection_publisher_service.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/services/connection_publisher_service.py",
          "line_number": 84,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_token = connection.access_tokens.get(\"page_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_publisher_service.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_publisher_service.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/connection_publisher_service.py",
          "line_number": 222,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data = content + \"\".join(sorted(media_urls or []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/research_automation_production.py": {
      "file_path": "backend/services/research_automation_production.py",
      "total_queries": 41,
      "secure_queries": 0,
      "risky_queries": 41,
      "issues_found": [
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 259,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for content in twitter_data.get('trending_content', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 266,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author=content.get('source', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 267,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "published_at=datetime.fromisoformat(content.get('date', datetime.utcnow().isoformat())),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 273,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtags=content.get('hashtags_mentioned', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 281,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'insights': twitter_data.get('hashtag_insights', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 282,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'engagement_patterns': twitter_data.get('engagement_patterns', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 283,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': twitter_data.get('research_summary', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for idea in instagram_data.get('content_ideas', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 304,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author=idea.get('source', 'Unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 307,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_metrics={'visual_elements': len(idea.get('visual_elements', []))},",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtags=idea.get('hashtags', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 319,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'hashtag_strategies': instagram_data.get('hashtag_strategies', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'marketing_insights': instagram_data.get('marketing_insights', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 321,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': instagram_data.get('research_summary', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 335,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for content in linkedin_data.get('professional_content', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 342,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author=content.get('source', 'Professional'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 346,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'professional_signals': len(content.get('professional_signals', [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 347,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'thought_leadership': len(content.get('thought_leadership_signals', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 359,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'thought_leadership_trends': linkedin_data.get('thought_leadership_trends', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 360,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'engagement_strategies': linkedin_data.get('engagement_strategies', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 361,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'industry_insights': linkedin_data.get('industry_insights', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 362,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': linkedin_data.get('research_summary', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for video in youtube_data.get('video_content', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 387,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'estimated_popularity': video.get('estimated_popularity', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 388,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'engagement_signals': len(video.get('engagement_signals', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 391,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "trending_score=min(video.get('estimated_popularity', 0) / 100, 1.0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 401,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'trending_formats': youtube_data.get('trending_formats', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_strategies': youtube_data.get('content_strategies', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 403,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': youtube_data.get('research_summary', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 468,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for insight in insights.get('insights', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if topic.lower() in insight.get('content', '').lower() or topic.lower() in insight.get('title', '').lower():",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 519,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'execution_summary': research_results.get('summary', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 527,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "social_media_results = research_results.get('results', {}).get('social_media', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 534,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "key=lambda x: x.get('trending_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 541,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'insight': f\"High-trending content: {content.get('title', '')[:100]}\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 542,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'trending_score': content.get('trending_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 543,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'url': content.get('url', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 547,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platforms_analyzed = research_results.get('summary', {}).get('platforms_analyzed', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 548,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_results = research_results.get('summary', {}).get('total_results', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 569,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'api_success_rate': (platforms_analyzed / len(research_results.get('platforms_researched', []))) * 100 if research_results.get('platforms_researched') else 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_production.py",
          "line_number": 578,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if 'trends' not in research_results.get('results', {}):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/memory_service.py": {
      "file_path": "backend/services/memory_service.py",
      "total_queries": 17,
      "secure_queries": 0,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 128,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if r.get('metadata', {}).get('type') == memory_type",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "vector_id = result.get('content_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 137,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db_memory = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 139,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 235,
          "query_type": "\\.query\\(, db\\.query\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_memories = db.query(func.count(Memory.id)).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 238,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "type_stats = db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 241,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").group_by(Memory.memory_type).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 244,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_high_performing = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 246,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(desc(Memory.relevance_score)).limit(10).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 266,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'total_indexed': patterns.get('total_content', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 267,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'avg_engagement': patterns.get('avg_engagement', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'top_topics': patterns.get('top_topics', [])[:5]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 287,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "unindexed_memories = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 289,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(100).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 330,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'remaining': db.query(func.count(Memory.id)).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 332,
          "query_type": "\\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/memory_service.py",
          "line_number": 359,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db_cleaned = db.query(Memory).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/web_research_service.py": {
      "file_path": "backend/services/web_research_service.py",
      "total_queries": 19,
      "secure_queries": 0,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 196,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_summary = \"; \".join(search_errors)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 253,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for item in data.get('organic', [])[:max_results]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 255,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=item.get('title', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url=item.get('link', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet=item.get('snippet', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "date=item.get('date'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 278,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "async with self.session.get(url, params=params) as response:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "abstract = data.get('Abstract', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 287,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=data.get('Heading', query),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url=data.get('AbstractURL', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 294,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for topic in data.get('RelatedTopics', [])[:max_results-1]:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "title=topic.get('Text', '').split(' - ')[0],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "url=topic.get('FirstURL', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 299,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snippet=topic.get('Text', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 341,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "founded=company_details.get('founded'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 342,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "headquarters=company_details.get('headquarters'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "size=company_details.get('size'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 367,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "combined_text = ' '.join([r.snippet.lower() for r in results])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/web_research_service.py",
          "line_number": 436,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "combined_text = ' '.join([r.snippet for r in results])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/redis_cache.py": {
      "file_path": "backend/services/redis_cache.py",
      "total_queries": 8,
      "secure_queries": 1,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 80,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return \":\".join(components)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 184,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_config = self.platform_ttls.get(platform, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 185,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return platform_config.get(operation, self.default_ttl)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 268,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_data = await self.redis_client.get(key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 281,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "result = self.fallback_cache.get(platform, operation, user_id=user_id, resource_id=resource_id, **kwargs)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 481,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await self.get(platform, operation, **kwargs)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 496,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"redis_memory_used\": redis_info.get('used_memory', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/redis_cache.py",
          "line_number": 497,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"redis_memory_peak\": redis_info.get('used_memory_peak', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/facebook_webhook_handler.py": {
      "file_path": "backend/services/facebook_webhook_handler.py",
      "total_queries": 31,
      "secure_queries": 0,
      "risky_queries": 31,
      "issues_found": [
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 65,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for entry in data.get('entry', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 74,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_id = entry.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender = message_event.get('sender', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 95,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recipient = message_event.get('recipient', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 96,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message = message_event.get('message', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 99,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if message.get('is_echo'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = message.get('text')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 111,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'platform_id': message.get('mid'),  # Message ID",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 113,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_event.get('timestamp', 0) / 1000,",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 117,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_id': sender.get('id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 118,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_username': sender.get('id'),  # FB doesn't provide username in messages",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 124,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'sender_id': sender.get('id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 125,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'recipient_id': recipient.get('id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 126,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'message_id': message.get('mid'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'timestamp': message_event.get('timestamp'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'interaction_id': message.get('mid')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "field = change.get('field')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "value = change.get('value', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 150,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if value.get('verb') == 'add' and value.get('item') == 'comment':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 154,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif value.get('verb') == 'add' and value.get('item') == 'post':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comment_id = value.get('comment_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 166,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "post_id = value.get('post_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 167,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_id = value.get('sender_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_name = value.get('sender_name')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message = value.get('message', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_time = value.get('created_time')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 207,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "post_id = value.get('post_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 208,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_id = value.get('sender_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 209,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_name = value.get('sender_name')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 210,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message = value.get('message', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/facebook_webhook_handler.py",
          "line_number": 211,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_time = value.get('created_time')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/twitter_webhook_handler.py": {
      "file_path": "backend/services/twitter_webhook_handler.py",
      "total_queries": 51,
      "secure_queries": 0,
      "risky_queries": 51,
      "issues_found": [
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 88,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await self._process_dm_event(dm, data.get('users', {}), user_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 100,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tweet_id = tweet.get('id_str')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 101,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = tweet.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = tweet.get('user', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 103,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = tweet.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 112,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if tweet.get('in_reply_to_status_id_str'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 114,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parent_id = tweet.get('in_reply_to_status_id_str')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 117,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif tweet.get('is_quote_status'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 119,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parent_id = tweet.get('quoted_status_id_str')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 134,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_id': user.get('id_str'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_username': user.get('screen_name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 136,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_display_name': user.get('name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 137,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_profile_image': user.get('profile_image_url_https'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 138,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_verified': user.get('verified', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'user_id': user.get('id_str'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'screen_name': user.get('screen_name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'retweet_count': tweet.get('retweet_count', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'favorite_count': tweet.get('favorite_count', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'in_reply_to_user_id': tweet.get('in_reply_to_user_id_str'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'in_reply_to_screen_name': tweet.get('in_reply_to_screen_name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 149,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'is_quote_status': tweet.get('is_quote_status', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 150,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'lang': tweet.get('lang'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 151,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'source': tweet.get('source'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 169,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "dm_id = dm.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_create = dm.get('message_create', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 173,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_id = message_create.get('sender_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 176,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_data = message_create.get('message_data', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = message_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender = users.get(sender_id, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_timestamp = int(dm.get('created_timestamp', 0))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_username': sender.get('screen_name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 196,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_display_name': sender.get('name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_profile_image': sender.get('profile_image_url_https'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_verified': sender.get('verified', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'recipient_id': message_create.get('target', {}).get('recipient_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = await self._process_v2_tweet(tweet_data, data.get('includes', {}), user_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 273,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tweet_id = tweet_data.get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "text = tweet_data.get('text', '')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author_id = tweet_data.get('author_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = tweet_data.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users = {user['id']: user for user in includes.get('users', [])}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "author = users.get(author_id, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if tweet_data.get('in_reply_to_user_id'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 288,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "parent_id = tweet_data.get('referenced_tweets', [{}])[0].get('id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 296,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_username': author.get('username'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_display_name': author.get('name'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_profile_image': author.get('profile_image_url'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 299,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'author_verified': author.get('verified', False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 305,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'public_metrics': tweet_data.get('public_metrics', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 306,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'context_annotations': tweet_data.get('context_annotations', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/twitter_webhook_handler.py",
          "line_number": 307,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'lang': tweet_data.get('lang'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/personality_response_engine.py": {
      "file_path": "backend/services/personality_response_engine.py",
      "total_queries": 23,
      "secure_queries": 3,
      "risky_queries": 20,
      "issues_found": [
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 178,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "entries = self.db.query(CompanyKnowledge).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 187,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").limit(3).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 222,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "templates = self.db.query(ResponseTemplate).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 227,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").order_by(ResponseTemplate.priority.desc()).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 265,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "personality = self.personality_styles.get(personality_style, self.personality_styles[\"professional\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Intent: {analysis.get('intent', 'general')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 285,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Sentiment: {analysis.get('sentiment', 'neutral')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Priority: {analysis.get('priority_score', 50)}/100",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 302,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "2. Address the customer's {analysis.get('intent', 'concern')} appropriately",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"response_reasoning\": f\"Generated {personality_style} response for {analysis.get('intent', 'general')} intent\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 346,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "knowledge_context = \"\\n\".join([",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 358,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Variables: {', '.join(template.variables or [])}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 407,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "intent = analysis.get('intent', 'general')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 421,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "intent = analysis.get('intent', 'general')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 431,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response_text = fallback_responses.get(intent, fallback_responses[\"general\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 461,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction = self.db.query(SocialInteraction).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 464,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 472,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_settings = self.db.query(UserSetting).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 474,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 485,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction.sentiment = analysis.get('sentiment', 'neutral')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 486,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction.intent = analysis.get('intent', 'general')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 487,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "interaction.priority_score = analysis.get('priority_score', 50)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/personality_response_engine.py",
          "line_number": 490,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "keywords = analysis.get('keywords', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/content_persistence_service.py": {
      "file_path": "backend/services/content_persistence_service.py",
      "total_queries": 17,
      "secure_queries": 6,
      "risky_queries": 11,
      "issues_found": [
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 78,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = self.db.query(ContentLog).filter(ContentLog.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 82,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 84,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(ContentLog.status == status)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 94,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": engagement_data.get(\"title\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 109,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"tags\": engagement_data.get(\"tags\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"likes\": engagement_data.get(\"likes\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 116,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"shares\": engagement_data.get(\"shares\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 117,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"comments\": engagement_data.get(\"comments\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 118,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"views\": engagement_data.get(\"views\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 138,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content = self.db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 141,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 268,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.db.query(ContentLog).filter(ContentLog.status == \"scheduled\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 271,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 273,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.platform == platform)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 275,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(ContentLog.scheduled_for <= before)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/content_persistence_service.py",
          "line_number": 277,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.order_by(ContentLog.scheduled_for).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/automated_key_rotation_scheduler.py": {
      "file_path": "backend/services/automated_key_rotation_scheduler.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/services/automated_key_rotation_scheduler.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if key_info.get(\"status\") == \"no_keys\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/automated_key_rotation_scheduler.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif key_info.get(\"is_overdue\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/automated_key_rotation_scheduler.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "age_days = key_info.get(\"oldest_key_age_days\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/automated_key_rotation_scheduler.py",
          "line_number": 184,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "rotation_interval = key_info.get(\"rotation_interval_days\", 90)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/automated_key_rotation_scheduler.py",
          "line_number": 323,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"records_migrated\": execute_result.get(\"records_migrated\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/metrics_collection.py": {
      "file_path": "backend/services/metrics_collection.py",
      "total_queries": 27,
      "secure_queries": 0,
      "risky_queries": 27,
      "issues_found": [
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 199,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "twitter_accounts = db.query(SocialMediaAccount).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 202,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 219,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 223,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.TWITTER]).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 285,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "instagram_accounts = db.query(SocialMediaAccount).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 288,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 305,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 309,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.INSTAGRAM]).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 371,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "facebook_accounts = db.query(SocialMediaAccount).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 374,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 391,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 395,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.FACEBOOK]).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 457,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "linkedin_accounts = db.query(SocialMediaAccount).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 460,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 477,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_items = db.query(ContentItem).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 481,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").order_by(ContentItem.published_at.desc()).limit(self.batch_sizes[Platform.LINKEDIN]).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 641,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "impressions=analytics.get(\"impressions\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 642,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reach=analytics.get(\"reach\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 643,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement=analytics.get(\"engagement\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 644,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "likes=analytics.get(\"likes\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 645,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "comments=analytics.get(\"comments\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 646,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "shares=analytics.get(\"shares\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 647,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "clicks=analytics.get(\"clicks\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 648,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "video_views=analytics.get(\"video_views\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 715,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(ContentPerformanceSnapshot).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 721,
          "query_type": "\\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.join(ContentItem).filter(ContentItem.platform == platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/metrics_collection.py",
          "line_number": 723,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "snapshots = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/websocket_manager.py": {
      "file_path": "backend/services/websocket_manager.py",
      "total_queries": 3,
      "secure_queries": 1,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/services/websocket_manager.py",
          "line_number": 97,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = self.websocket_users.get(websocket)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/websocket_manager.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return len(self.user_connections.get(user_id, []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/websocket_manager.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_type = message_data.get(\"type\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/autonomous_posting.py": {
      "file_path": "backend/services/autonomous_posting.py",
      "total_queries": 36,
      "secure_queries": 8,
      "risky_queries": 28,
      "issues_found": [
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 66,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_obj = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 84,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if research_results.get(\"status\") != \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"research_insights\": len(research_results.get(\"insights\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "insights = research_results.get(\"insights\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 182,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "trending_topics = insights.get(\"trending_topics\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "market_insights = insights.get(\"market_insights\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 184,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_opportunities = insights.get(\"content_opportunities\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 187,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "trending_topics = research_results.get(\"trends\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "market_insights = research_results.get(\"insights\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_opportunities = research_results.get(\"content_opportunities\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 198,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "{chr(10).join(trending_topics[:5]) if trending_topics else \"AI automation and productivity tools are highly relevant\"}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 201,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "{chr(10).join(market_insights[:3]) if market_insights else \"Businesses are seeking automation solutions to improve efficiency\"}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 204,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "{chr(10).join(content_opportunities[:3]) if content_opportunities else \"Showcase AI automation benefits and case studies\"}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 270,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"hook\": idea.get(\"hook\", \"AI-Generated Content\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 271,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"content\": idea.get(\"content\", \"\")[:800],  # Limit length",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 272,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"hashtags\": idea.get(\"hashtags\", [\"#AIAutomation\"])[:5],  # Limit hashtags",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 273,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform\": idea.get(\"platform\", \"linkedin\").lower(),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"content_type\": idea.get(\"content_type\", \"text\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"value_proposition\": idea.get(\"value_proposition\", \"AI-generated content\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 311,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_obj = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 317,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 321,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 351,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_type=content_idea.get(\"content_type\", \"text\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 353,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "engagement_data={\"hashtags\": content_idea.get(\"hashtags\", [])},",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 362,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if content_idea.get(\"content_type\") == \"image+text\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 366,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if image_result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 367,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "image_url = image_result.get(\"image_url\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 379,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_type=content_idea.get(\"content_type\", \"text\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 383,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if post_result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 387,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_record.engagement_data[\"platform_post_id\"] = post_result.get(\"post_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 398,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"post_id\": post_result.get(\"post_id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 411,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": post_result.get(\"error\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 427,
          "query_type": "\\.get\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtags = \" \".join(content_idea.get(\"hashtags\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 464,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform=idea.get(\"platform\", \"twitter\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 466,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_type=idea.get(\"content_type\", \"text\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/services/autonomous_posting.py",
          "line_number": 469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement_data={\"hashtags\": idea.get(\"hashtags\", [])},",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/research_automation_service.py": {
      "file_path": "backend/services/research_automation_service.py",
      "total_queries": 24,
      "secure_queries": 0,
      "risky_queries": 24,
      "issues_found": [
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "topics = parameters.get(\"topics\", [\"social media trends\", \"AI\", \"marketing\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 407,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "competitors = parameters.get(\"competitors\", [\"@buffer\", \"@hootsuite\", \"@hubspot\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 420,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if celery_result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 421,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for competitor_data in celery_result.get(\"results\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 423,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"competitor\": competitor_data.get(\"competitor\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 424,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"analysis\": competitor_data.get(\"analysis\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 425,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"posts_analyzed\": competitor_data.get(\"posts_analyzed\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 426,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"sample_content\": competitor_data.get(\"sample_content\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 439,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry = parameters.get(\"industry\", \"social media marketing\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sources = parameters.get(\"sources\", [",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 457,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if celery_result.get(\"status\") == \"success\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 458,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for web_data in celery_result.get(\"results\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 461,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"source_url\": web_data.get(\"url\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 462,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": web_data.get(\"title\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 463,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"analysis\": web_data.get(\"analysis\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 464,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"content_length\": web_data.get(\"content_length\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 481,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "audience_segments = parameters.get(\"segments\", [\"professionals\", \"entrepreneurs\", \"marketers\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 506,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "topic_areas = parameters.get(\"topic_areas\", [\"AI\", \"social media\", \"marketing\", \"productivity\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 534,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "categories = parameters.get(\"categories\", [\"marketing\", \"AI\", \"business\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 555,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "industry = parameters.get(\"industry\", \"social media marketing\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 574,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "market = parameters.get(\"market\", \"social media tools\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 600,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return content_suggestions.get(topic.lower(), [\"articles\", \"guides\", \"tips\", \"insights\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 729,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_text += \" \".join(research_result.insights)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/research_automation_service.py",
          "line_number": 730,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_text += \" Opportunities: \" + \" \".join(research_result.content_opportunities)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/publisher_adapters/x_adapter.py": {
      "file_path": "backend/services/publisher_adapters/x_adapter.py",
      "total_queries": 16,
      "secure_queries": 0,
      "risky_queries": 16,
      "issues_found": [
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 53,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 81,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_response = await media_client.get(media_url)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 84,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_type = media_response.headers.get(\"content-type\", \"image/jpeg\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 131,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tweet_id = result.get(\"data\", {}).get(\"id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reset_time = response.headers.get(\"x-rate-limit-reset\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_detail = error_data.get(\"detail\", \"Permission denied\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 184,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "errors = error_data.get(\"errors\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_type = error.get(\"type\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 192,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_msg = f\"Temporary X API error: {error.get('message', 'Unknown')}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_msg = f\"X API error: {error.get('message', 'Bad request')}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_msg = error_data.get(\"detail\", \"Content validation failed\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 270,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not connection.access_tokens.get(\"access_token\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 321,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "access_token = connection.access_tokens.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 367,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_id = str(result.get(\"media_id\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 397,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_detail = error_data.get(\"errors\", [{}])[0].get(\"message\", \"Permission denied\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/x_adapter.py",
          "line_number": 409,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_detail = error_data.get(\"errors\", [{}])[0].get(\"message\", \"Bad request\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/services/publisher_adapters/meta_adapter.py": {
      "file_path": "backend/services/publisher_adapters/meta_adapter.py",
      "total_queries": 7,
      "secure_queries": 0,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 53,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_token = connection.access_tokens.get(\"page_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 64,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "page_id = connection.platform_metadata.get(\"page_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 101,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "post_id = result.get(\"id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 137,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_code = error_data.get(\"error\", {}).get(\"code\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 138,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_message = error_data.get(\"error\", {}).get(\"message\", \"Bad request\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not connection.access_tokens.get(\"page_token\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/services/publisher_adapters/meta_adapter.py",
          "line_number": 207,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not connection.platform_metadata.get(\"page_id\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/key_rotation_tasks.py": {
      "file_path": "backend/tasks/key_rotation_tasks.py",
      "total_queries": 9,
      "secure_queries": 1,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 72,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if details.get(\"status\") == \"no_keys\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 75,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif details.get(\"is_overdue\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 156,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.debug(f\"Rotation not due for {key_type.value}: {result.get('rotation_due_in_days')} days remaining\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if details.get(\"pending_rotation_events\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 353,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"overdue_keys\": len([k for k, v in report[\"key_details\"].items() if v.get(\"is_overdue\")]),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 363,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "overdue_keys = [k for k, v in report[\"key_details\"].items() if v.get(\"is_overdue\")]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 499,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if key.get(\"usage_count\", 0) > 1000000:  # Very high usage",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 503,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if key.get(\"usage_count\", 0) == 0 and key.get(\"age_days\", 0) > 7:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/key_rotation_tasks.py",
          "line_number": 519,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"usage_summary\": {k: {\"total_keys\": v.get(\"total_keys\", 0)} for k, v in usage_stats.items()},",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/subscription_cleanup_tasks.py": {
      "file_path": "backend/tasks/subscription_cleanup_tasks.py",
      "total_queries": 28,
      "secure_queries": 0,
      "risky_queries": 28,
      "issues_found": [
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 48,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 49,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 56,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 128,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 129,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 136,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 202,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 203,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 213,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 273,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 274,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 282,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 306,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not subscription_info or not subscription_info.get(\"subscription\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 315,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "stripe_status = stripe_subscription.get(\"status\", \"cancelled\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 316,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "stripe_end_timestamp = stripe_subscription.get(\"current_period_end\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 344,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "new_status = status_mapping.get(stripe_status, \"cancelled\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 386,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 387,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 394,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 415,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "plan = db.query(Plan).filter(Plan.id == user.plan_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 471,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 472,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 479,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 501,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 502,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 509,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 571,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"success\": task_result.get(\"success\", True),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/subscription_cleanup_tasks.py",
          "line_number": 575,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not task_result.get(\"success\", True):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/webhook_watchdog.py": {
      "file_path": "backend/tasks/webhook_watchdog.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/tasks/webhook_watchdog.py",
          "line_number": 108,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scan_results[\"entries_by_status\"][status] = scan_results[\"entries_by_status\"].get(status, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "action = action_result.get(\"action\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog.py",
          "line_number": 120,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if action_result.get(\"alert\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog.py",
          "line_number": 347,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform\": entry.event_info.get(\"object\", \"unknown\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/publish_tasks.py": {
      "file_path": "backend/tasks/publish_tasks.py",
      "total_queries": 18,
      "secure_queries": 0,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 75,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 77,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 87,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_success = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 91,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "media_urls=payload_dict.get('media_urls', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 109,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "idempotency_key=payload_dict.get('idempotency_key')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 131,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedule = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 133,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 156,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedule = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 158,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 179,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedule = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 181,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 204,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if payload_dict.get('idempotency_key'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 206,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedule = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 208,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if payload_dict.get('idempotency_key'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 235,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "schedule = db.query(ContentSchedule).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/publish_tasks.py",
          "line_number": 237,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/lightweight_research_tasks.py": {
      "file_path": "backend/tasks/lightweight_research_tasks.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/tasks/lightweight_research_tasks.py",
          "line_number": 56,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'insights': research_result.get('insights', []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/lightweight_research_tasks.py",
          "line_number": 162,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "insights_text = \"\\n\".join(insights[:3])  # Use only first 3 insights",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/goals_tasks.py": {
      "file_path": "backend/tasks/goals_tasks.py",
      "total_queries": 9,
      "secure_queries": 1,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 40,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users_with_goals = db.query(User).join(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 42,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").distinct().all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 130,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "goals_near_deadline = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 134,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 188,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_goals = db.query(Goal).filter(Goal.user_id == user_id).all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 276,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "active_goals = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 278,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 285,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_progress = db.query(Goal).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/goals_tasks.py",
          "line_number": 288,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/automation_tasks.py": {
      "file_path": "backend/tasks/automation_tasks.py",
      "total_queries": 51,
      "secure_queries": 3,
      "risky_queries": 48,
      "issues_found": [
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 59,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_types=research_config.get(\"content_types\", [\"text\", \"image\", \"video\"]),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "time_range=research_config.get(\"time_range\", \"24h\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "location=research_config.get(\"location\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 62,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "max_results=research_config.get(\"max_results\", 100),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 63,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_sentiment=research_config.get(\"include_sentiment\", True),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 64,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_engagement=research_config.get(\"include_engagement\", True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 137,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"top_hashtags\": trends.get(\"top_hashtags\", [])[:10],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 138,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"emerging_topics\": trends.get(\"emerging_topics\", [])[:5],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"engagement_leaders\": trends.get(\"engagement_leaders\", [])[:5],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"sentiment_analysis\": trends.get(\"sentiment_analysis\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform_breakdown\": trends.get(\"platform_breakdown\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 190,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platforms = content_config.get(\"platforms\", [\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 202,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platforms = content_config.get(\"platforms\", [\"twitter\"])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 209,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type=content_config.get(\"content_type\", \"post\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 210,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "tone=content_config.get(\"tone\", \"professional\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 211,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "target_audience=content_config.get(\"target_audience\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_hashtags=content_config.get(\"include_hashtags\", True),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "include_cta=content_config.get(\"include_cta\", True),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 246,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "content_type=content_config.get(\"content_type\", \"post\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 247,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "status=\"scheduled\" if content_config.get(\"auto_schedule\") else \"draft\",",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "ai_model=content_result.get(\"model\", \"openai-gpt\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "prompt_used=content_result.get(\"prompt\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scheduled_for=content_config.get(\"schedule_time\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if content_config.get(\"auto_schedule\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 263,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"scheduled_for\": content_config.get(\"schedule_time\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 264,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"status\": schedule_result.get(\"status\", \"scheduled\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 294,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not config.get(\"media_urls\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hashtags=content_result.get(\"hashtags\", [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return {\"status\": \"scheduled\", \"platform_id\": result.get(\"id\")}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 309,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scheduled_publish_time=config.get(\"schedule_time\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 311,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return {\"status\": \"scheduled\", \"platform_id\": result.get(\"id\")}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 318,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return {\"status\": \"published\", \"platform_id\": result.get(\"id\")}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 379,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"workflow_id\": workflow_results.get(\"id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 380,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"stages_completed\": workflow_results.get(\"stages_completed\", []),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 381,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"content_generated\": workflow_results.get(\"content_generated\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 382,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"posts_scheduled\": workflow_results.get(\"posts_scheduled\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 439,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"metrics_analyzed\": len(metrics_result.get(\"content_items\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 440,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"optimizations_identified\": len(optimization_result.get(\"recommendations\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 441,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"top_performing_content\": optimization_result.get(\"top_performers\", [])[:3],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 473,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_posts_analyzed\": metrics_result.get(\"total_posts\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 474,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platforms_collected\": list(metrics_result.get(\"platforms\", {}).keys()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 475,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"avg_engagement_rate\": metrics_result.get(\"avg_engagement_rate\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 476,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_impressions\": metrics_result.get(\"total_impressions\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 477,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_engagement\": metrics_result.get(\"total_engagement\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 478,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"top_performing_posts\": metrics_result.get(\"top_performers\", [])[:5]",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 521,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 522,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(User.is_active == True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 526,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 580,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.query(User)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 581,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/automation_tasks.py",
          "line_number": 588,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ".all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/token_health_tasks.py": {
      "file_path": "backend/tasks/token_health_tasks.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 169,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 172,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 241,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 249,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 300,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "old_audits_count = db.query(SocialAudit).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/token_health_tasks.py",
          "line_number": 314,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "deleted_count = db.query(SocialAudit).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/webhook_tasks.py": {
      "file_path": "backend/tasks/webhook_tasks.py",
      "total_queries": 64,
      "secure_queries": 16,
      "risky_queries": 48,
      "issues_found": [
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Processing Meta webhook entry: task_id={task_id}, entry_id={event_info.get('entry_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature=event_info.get('signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 100,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 101,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 115,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 122,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "webhook_id = f\"meta_{entry.get('id', task_id)}_{int(start_time.timestamp())}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 128,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 131,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get('error'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 156,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 160,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'entry_id': event_info.get('entry_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'events_processed': result.get('events_processed', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'entry_type': result.get('entry_type', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 175,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 180,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 181,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"entry_id={event_info.get('entry_id')}, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 190,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"events_processed={result.get('events_processed', 0)}, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"events_processed\": result.get('events_processed', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 209,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "webhook_id = f\"meta_{entry.get('id', task_id)}_{int(start_time.timestamp())}\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 221,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id')",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 229,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "signature=event_info.get('signature')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_type=event_info.get('event_type', 'unknown'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 252,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'entry_id': event_info.get('entry_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 256,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id'),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 285,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'webhook_processing'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 289,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "organization_id=entry.get('organization_id'),  # Extract from entry if available",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 290,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "user_id=entry.get('user_id'),  # Extract from entry if available",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 303,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_id\": event_info.get('entry_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 327,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for change in entry.get(\"changes\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 330,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"processed\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 334,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for message in entry.get(\"messaging\", []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 337,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"processed\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 343,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"entry_type\": entry.get(\"object_type\", \"unknown\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 368,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "field = change.get(\"field\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 369,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "value = change.get(\"value\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 371,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Processing Page change: field={field}, entry_id={entry.get('entry_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sender_id = message.get(\"sender\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 403,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recipient_id = message.get(\"recipient\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 404,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "message_text = message.get(\"message\", {}).get(\"text\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 437,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "verb = value.get(\"verb\")  # add, edit, remove",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 438,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "item = value.get(\"item\")  # post, comment, etc.",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 450,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"post_id\": value.get(\"post_id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 451,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"comment_id\": value.get(\"comment_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 472,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Processing mention event: entry_id={entry.get('entry_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 501,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Processing messaging change: entry_id={entry.get('entry_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 614,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "\"event_type\": event_info.get(\"event_type\"),",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 615,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"entry_id\": event_info.get(\"entry_id\"),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 689,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_webhook_failures\": health_stats.get(\"failures_by_queue\", {}).get(\"webhook_processing\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 744,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"reliability_stats\": reliability_stats.get('delivery_statistics', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 751,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"Webhook recovery scan completed: {recovery_results.get('recovery_attempts', 0)} attempts, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 752,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"{recovery_results.get('successful_recoveries', 0)} successes, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 803,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"status\": \"completed\" if not cleanup_results.get('error') else \"failed\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 808,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"{cleanup_results.get('expired_idempotency_records_deleted', 0)} idempotency records, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 809,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"{cleanup_results.get('old_delivered_records_deleted', 0)} delivered records, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_tasks.py",
          "line_number": 810,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "f\"{cleanup_results.get('old_abandoned_records_deleted', 0)} abandoned records deleted, \"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/autonomous_scheduler.py": {
      "file_path": "backend/tasks/autonomous_scheduler.py",
      "total_queries": 21,
      "secure_queries": 6,
      "risky_queries": 15,
      "issues_found": [
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 65,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user = db.query(User).filter(User.id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 74,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 252,
          "query_type": "\\.query\\(, db\\.query\\(, \\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = db.query(User, UserSetting).join(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 254,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 261,
          "query_type": "\\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(User.default_organization_id == organization_id)",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 263,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "users_with_settings = query.all()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 348,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'upgrade_suggestion': quota_check.get('upgrade_suggestion', 'Contact support for plan details')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 393,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'upgrade_suggestion': research_capability_check.get('upgrade_suggestion'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 410,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_settings = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 439,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "posting_time = user_config['posting_times'].get(platform, '09:00')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 442,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_timezone = user_config.get('timezone', 'UTC')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 474,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'research_data': research_results.get('summary', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 475,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'inspiration_sources': len(inspiration.get('similar_content', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 485,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'research_quality_score': research_results.get('summary', {}).get('research_quality_score', 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 562,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "workflows = db.query(WorkflowExecution).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 566,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 577,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_content = len(week_content.get('content', []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 641,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "active_users = db.query(User).filter(User.is_active == True).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 659,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for content_item in recent_content.get('content', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 660,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if content_item.get('published_at'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/autonomous_scheduler.py",
          "line_number": 666,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = content_item.get('platform', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/data_retention_tasks.py": {
      "file_path": "backend/tasks/data_retention_tasks.py",
      "total_queries": 15,
      "secure_queries": 7,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 82,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 85,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 93,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 171,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 172,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 236,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_cleaned += result.get(\"total_deleted\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"total_deleted\", 0) > 0:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 246,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 247,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 391,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "\"records_deleted\": result.get(\"total_deleted\", 0),",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 392,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"deleted_counts\": result.get(\"deleted_counts\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/data_retention_tasks.py",
          "line_number": 399,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"Emergency cleanup completed for {category}. Records deleted: {result.get('total_deleted', 0)}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/ftc_compliance_tasks.py": {
      "file_path": "backend/tasks/ftc_compliance_tasks.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/tasks/ftc_compliance_tasks.py",
          "line_number": 199,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results[\"subtasks\"][\"trial_reminders\"] = trial_results.get(timeout=300)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/ftc_compliance_tasks.py",
          "line_number": 210,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results[\"subtasks\"][\"renewal_notices\"] = renewal_results.get(timeout=300)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/ftc_compliance_tasks.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_reminders = results[\"subtasks\"][\"trial_reminders\"].get(\"reminders_sent\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/ftc_compliance_tasks.py",
          "line_number": 220,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_notices = results[\"subtasks\"][\"renewal_notices\"].get(\"notices_sent\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/posting_tasks.py": {
      "file_path": "backend/tasks/posting_tasks.py",
      "total_queries": 12,
      "secure_queries": 2,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 50,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 53,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 60,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 63,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 113,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'posting'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 155,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = db.query(ContentLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 158,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "raise Exception(f\"Twitter API error: {result.get('error', 'Unknown error')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 203,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_log = db.query(ContentLog).filter(ContentLog.id == int(post_id)).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 241,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "queue_name=getattr(self.request, 'delivery_info', {}).get('routing_key', 'posting'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 267,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "kwargs={'post_id': post.get('id')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/posting_tasks.py",
          "line_number": 361,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform_times = optimal_times.get(platform.lower(), optimal_times['twitter'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/db_session_manager.py": {
      "file_path": "backend/tasks/db_session_manager.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/tasks/db_session_manager.py",
          "line_number": 28,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users = db.query(User).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/db_session_manager.py",
          "line_number": 141,
          "query_type": "\\.query\\(, db\\.query\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "users = db.query(User).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/x_polling_tasks.py": {
      "file_path": "backend/tasks/x_polling_tasks.py",
      "total_queries": 18,
      "secure_queries": 0,
      "risky_queries": 18,
      "issues_found": [
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 93,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "x_connections = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 97,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "poll_results[\"total_new_mentions\"] += result.get(\"new_mentions\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"new_mentions\": result.get(\"new_mentions\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"since_id\": result.get(\"since_id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 149,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_fetched\": result.get(\"total_fetched\", 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 153,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif result.get(\"error\") == \"rate_limited\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 162,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"backoff_seconds\": result.get(\"backoff_seconds\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 163,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"retry_after\": result.get(\"retry_after\", {}).isoformat() if result.get(\"retry_after\") else None",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 170,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_msg = result.get(\"error\", \"unknown error\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 262,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connection = db.query(SocialConnection).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 266,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if result.get(\"success\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 284,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"new_mentions\": result.get(\"new_mentions\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 285,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"since_id\": result.get(\"since_id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 286,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"total_fetched\": result.get(\"total_fetched\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/x_polling_tasks.py",
          "line_number": 294,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"error\": result.get(\"error\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/tasks/webhook_watchdog_tasks.py": {
      "file_path": "backend/tasks/webhook_watchdog_tasks.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/tasks/webhook_watchdog_tasks.py",
          "line_number": 41,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"DLQ watchdog scan completed: {scan_results.get('actions_taken', {})}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog_tasks.py",
          "line_number": 44,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "alerts = scan_results.get('alerts', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog_tasks.py",
          "line_number": 46,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if alert.get('severity') == 'error':",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog_tasks.py",
          "line_number": 47,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.error(f\"DLQ Alert: {alert.get('message')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/tasks/webhook_watchdog_tasks.py",
          "line_number": 49,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.warning(f\"DLQ Alert: {alert.get('message')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/plan_decorators.py": {
      "file_path": "backend/core/plan_decorators.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/core/plan_decorators.py",
          "line_number": 25,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = kwargs.get('user')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_decorators.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = kwargs.get('user')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_decorators.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = kwargs.get('user')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_decorators.py",
          "line_number": 160,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user = kwargs.get('user')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/app_factory.py": {
      "file_path": "backend/core/app_factory.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/core/app_factory.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@app.get(\"/\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/app_factory.py",
          "line_number": 269,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@app.get(\"/health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/app_factory.py",
          "line_number": 301,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@app.get(\"/render-health\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/logging.py": {
      "file_path": "backend/core/logging.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/core/logging.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "name = frame.f_globals.get('__name__', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/logging.py",
          "line_number": 136,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not hasattr(kwargs.get('extra', {}), key):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/secrets_validator.py": {
      "file_path": "backend/core/secrets_validator.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/core/secrets_validator.py",
          "line_number": 191,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "rules = self.environment_rules.get(self.environment, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/secrets_validator.py",
          "line_number": 193,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if not rules.get(\"allow_placeholders\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/secrets_validator.py",
          "line_number": 233,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "rules = self.environment_rules.get(self.environment, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/secrets_validator.py",
          "line_number": 235,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "min_length = rules.get(\"minimum_key_length\", 16)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/secrets_validator.py",
          "line_number": 248,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if rules.get(\"require_complex_secrets\", False):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/distributed_security_config.py": {
      "file_path": "backend/core/distributed_security_config.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/core/distributed_security_config.py",
          "line_number": 94,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self._feature_flags.get(feature, False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_config.py",
          "line_number": 98,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self._config.get(key, default)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_config.py",
          "line_number": 136,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self._feature_flags.get(\"fail_open_on_redis_error\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_config.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self._feature_flags.get(\"fail_open_on_redis_error\", True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/database_optimizer.py": {
      "file_path": "backend/core/database_optimizer.py",
      "total_queries": 19,
      "secure_queries": 0,
      "risky_queries": 19,
      "issues_found": [
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 115,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = db.execute(query, {\"table_name\": table_name})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 125,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "indexdef = index.get(\"indexdef\", \"\").lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 133,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "indexdef = index.get(\"indexdef\", \"\").lower()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 165,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = db.execute(query)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 180,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "size_result = db.execute(size_query)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 208,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "SELECT 1 FROM pg_extension WHERE extname = 'pg_stat_statements'",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 212,
          "query_type": "\\.execute\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = db.execute(check_query).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 236,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = db.execute(slow_query, {\"min_duration\": min_duration_ms})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 336,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sql = rec.get(\"sql\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 345,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "db.execute(text(sql))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 349,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"table\": rec.get(\"table\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 350,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"column\": rec.get(\"column\", rec.get(\"columns\")),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 391,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result = db.execute(tables_query)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 398,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "conn.execute(text(f\"VACUUM ANALYZE {table}\"))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 440,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "size_result = db.execute(size_query).fetchone()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 449,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "(SELECT setting FROM pg_settings WHERE name='max_connections') max_conn",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 453,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "conn_result = db.execute(conn_query).fetchone()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 468,
          "query_type": "\\.execute\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "long_result = db.execute(long_query).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/database_optimizer.py",
          "line_number": 484,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "bloat_result = db.execute(bloat_query)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/encryption.py": {
      "file_path": "backend/core/encryption.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/core/encryption.py",
          "line_number": 209,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"enc_version\": envelope.get(\"enc_version\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/encryption.py",
          "line_number": 210,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"enc_kid\": envelope.get(\"enc_kid\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/uuid_helper.py": {
      "file_path": "backend/core/uuid_helper.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/core/uuid_helper.py",
          "line_number": 53,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return db.query(model_class).filter(model_class.public_id == public_id).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/uuid_helper.py",
          "line_number": 124,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "records_without_uuid = db.query(model_class).filter(model_class.public_id.is_(None)).limit(batch_size).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/uuid_helper.py",
          "line_number": 140,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "remaining = db.query(model_class).filter(model_class.public_id.is_(None)).count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/config.py": {
      "file_path": "backend/core/config.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/config.py",
          "line_number": 141,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "temp_key = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/memory.py": {
      "file_path": "backend/core/memory.py",
      "total_queries": 31,
      "secure_queries": 0,
      "risky_queries": 31,
      "issues_found": [
        {
          "file_path": "backend/core/memory.py",
          "line_number": 37,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.index_file = os.path.join(index_path, \"faiss.index\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 38,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = self.metadata.get(str(idx), {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': metadata.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': metadata.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 150,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': metadata.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 151,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': metadata.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 163,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if meta.get('metadata', {}).get('type') == content_type:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 166,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 167,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 182,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 185,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 186,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 189,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 206,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 207,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 211,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 216,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 242,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = meta.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 245,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type = metadata.get('type', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 246,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 249,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = metadata.get('platform', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 250,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 253,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 258,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "topic = metadata.get('topic', 'general')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/memory.py",
          "line_number": 280,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/http_client.py": {
      "file_path": "backend/core/http_client.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/http_client.py",
          "line_number": 190,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return await client.get(url, **kwargs)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/vector_store.py": {
      "file_path": "backend/core/vector_store.py",
      "total_queries": 7,
      "secure_queries": 0,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 61,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.index_file = os.path.join(index_path, \"faiss.index\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 62,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 63,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.id_mapping_file = os.path.join(index_path, \"id_mapping.json\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 64,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.vectors_file = os.path.join(index_path, \"vectors.npz\")  # Store vectors for rebuild",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 353,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': self._id_mapping.get(internal_id),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 660,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = result.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/vector_store.py",
          "line_number": 663,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if metadata.get(key) != value:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/goals.py": {
      "file_path": "backend/core/goals.py",
      "total_queries": 7,
      "secure_queries": 0,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/core/goals.py",
          "line_number": 102,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for goal_data in data.get('goals', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform=data.get('platform'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "milestones=data.get('milestones', [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.goals.get(goal_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 324,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_followers = current_metrics.get('followers', 1000)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 335,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_engagement = current_metrics.get('engagement_rate', 3.0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/goals.py",
          "line_number": 346,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "current_posts = current_metrics.get('monthly_posts', 20)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/webhook_security.py": {
      "file_path": "backend/core/webhook_security.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/core/webhook_security.py",
          "line_number": 131,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/webhook_security.py",
          "line_number": 174,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/webhook_security.py",
          "line_number": 351,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "webhook_timestamp = sig_parts.get('t')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/webhook_security.py",
          "line_number": 352,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "webhook_signature = sig_parts.get('v1')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/webhook_security.py",
          "line_number": 427,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "config = self.PLATFORM_CONFIG.get(platform)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/security.py": {
      "file_path": "backend/core/security.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/core/security.py",
          "line_number": 61,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.debug(f\"Created access token for user: {data.get('sub', 'unknown')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security.py",
          "line_number": 83,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.debug(f\"Created refresh token for user: {data.get('sub', 'unknown')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/plan_enforcement.py": {
      "file_path": "backend/core/plan_enforcement.py",
      "total_queries": 13,
      "secure_queries": 0,
      "risky_queries": 13,
      "issues_found": [
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 181,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return cls.PLAN_LIMITS.get(plan, {}).get(quota_type, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 186,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return cls.PLAN_FEATURES.get(plan, {}).get(feature, False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 239,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "upgrade_options = cls.PLAN_UPGRADE_PATHS.get(current_plan, [])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 255,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quota_info = cls.QUOTA_UPGRADE_BENEFITS.get(quota_type, {",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 320,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}.get(blocked_feature, {\"title\": blocked_feature.replace('_', ' ').title(), \"icon\": \"\ud83d\udd12\", \"description\": f\"Access to {blocked_feature.replace('_', ' ')}\"})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 379,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"title\": feature_descriptions.get(feature, feature.replace('_', ' ').title()),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 388,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "quota_title = quota_info.get(\"title\", \"Usage\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 400,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "feature_title = feature_info.get(\"title\", \"Feature\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 465,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "usage = self.redis_client.get(key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 500,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "results = pipeline.execute()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 698,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plan\": upgrade_suggestion.get(\"recommended_plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 752,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plan\": upgrade_suggestion.get(\"recommended_plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/plan_enforcement.py",
          "line_number": 896,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"suggested_plan\": suggestion.get(\"recommended_plan\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/csrf_protection.py": {
      "file_path": "backend/core/csrf_protection.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 109,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token_data = ':'.join(parts[:-1])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 251,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token = request.headers.get(self.token_manager.csrf_header_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 257,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token = request.headers.get(header_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 274,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_cookie = request.cookies.get('session_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 372,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@csrf_router.get(\"/csrf-token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 384,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_id = request.cookies.get('session_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 421,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "token = token_data.get('csrf_token')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/csrf_protection.py",
          "line_number": 429,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "session_id = request.cookies.get('session_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/runbooks.py": {
      "file_path": "backend/core/runbooks.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/core/runbooks.py",
          "line_number": 381,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"connection_pool_usage\": db_stats.get(\"connection_pool_usage\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/runbooks.py",
          "line_number": 382,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"active_connections\": db_stats.get(\"active_connections\", 0),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/runbooks.py",
          "line_number": 424,
          "query_type": "SELECT.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"SELECT * FROM large_table WHERE unindexed_column\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/runbooks.py",
          "line_number": 529,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if any(component.get(\"status\") == \"critical\" for component in health_status.values() if isinstance(component, dict)):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/runbooks.py",
          "line_number": 531,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "elif any(component.get(\"status\") == \"degraded\" for component in health_status.values() if isinstance(component, dict)):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/observability.py": {
      "file_path": "backend/core/observability.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/observability.py",
          "line_number": 186,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if event.get('transaction') in ['/health', '/render-health', '/metrics']:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/feature_flags.py": {
      "file_path": "backend/core/feature_flags.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/feature_flags.py",
          "line_number": 58,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return bool(feature_flags().get(name, False))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/token_encryption_validator.py": {
      "file_path": "backend/core/token_encryption_validator.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/token_encryption_validator.py",
          "line_number": 283,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.info(f\"\ud83d\udd11 Encryption key backup info generated: ID={backup_info.get('key_id')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/security_middleware.py": {
      "file_path": "backend/core/security_middleware.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 142,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 179,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "minute_count = await self.redis_client.get(minute_key) or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "hour_count = await self.redis_client.get(hour_key) or 0",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 212,
          "query_type": "\\.execute\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "await pipe.execute()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 361,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "origin = request.headers.get(\"Origin\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 409,
          "query_type": "SELECT.*FROM, DELETE.*FROM, INSERT.*INTO",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"union select\", \"drop table\", \"delete from\", \"insert into\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/security_middleware.py",
          "line_number": 410,
          "query_type": "UPDATE.*SET",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"update set\", \"create table\", \"alter table\", \"exec(\",",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/simple_vector_search.py": {
      "file_path": "backend/core/simple_vector_search.py",
      "total_queries": 30,
      "secure_queries": 0,
      "risky_queries": 30,
      "issues_found": [
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 23,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.vectors_file = os.path.join(index_path, \"vectors.npy\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 24,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "self.metadata_file = os.path.join(index_path, \"metadata.json\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = self.metadata.get(str(idx), {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': metadata.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 133,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': metadata.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': metadata.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 136,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': metadata.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if meta.get('metadata', {}).get('type') == content_type:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 147,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 149,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 150,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 165,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 167,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 168,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 182,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "created_at = datetime.fromisoformat(meta.get('created_at', ''))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 183,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = meta.get('metadata', {}).get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 187,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': meta.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 188,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content': meta.get('content', ''),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 191,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'metadata': meta.get('metadata', {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 192,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'created_at': meta.get('created_at')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = meta.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 218,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type = metadata.get('type', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 222,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = metadata.get('platform', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 223,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_vector_search.py",
          "line_number": 231,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "topic = metadata.get('topic', 'general')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/audit_logger.py": {
      "file_path": "backend/core/audit_logger.py",
      "total_queries": 14,
      "secure_queries": 2,
      "risky_queries": 12,
      "issues_found": [
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 355,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "details = kwargs.get(\"details\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 390,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.audit_logger.db_session.query(AuditLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 397,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "query = query.filter(AuditLog.user_id == user_id)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 399,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "events = query.all()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 412,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if event.compliance_flags.get(\"pii_involved\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 427,
          "query_type": "\\.query\\(, session\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.audit_logger.db_session.query(AuditLog).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 433,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "events = query.all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 457,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "event_counts[event.event_type] = event_counts.get(event.event_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 488,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "method = scope.get(\"method\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 489,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "path = scope.get(\"path\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 490,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "client_ip = scope.get(\"client\", [\"unknown\", None])[0] if scope.get(\"client\") else \"unknown\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 493,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "headers = dict(scope.get(\"headers\", []))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 494,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_agent = headers.get(b\"user-agent\", b\"\").decode(\"utf-8\", errors=\"ignore\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/audit_logger.py",
          "line_number": 501,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response_status = message.get(\"status\", 200)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/simple_memory.py": {
      "file_path": "backend/core/simple_memory.py",
      "total_queries": 8,
      "secure_queries": 0,
      "risky_queries": 8,
      "issues_found": [
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 87,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if item['metadata'].get('type') == content_type:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 104,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = item['metadata'].get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 132,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "metadata = item.get('metadata', {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 135,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_type = metadata.get('type', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 136,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['content_types'][content_type] = patterns['content_types'].get(content_type, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 139,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = metadata.get('platform', 'unknown')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "patterns['platforms'][platform] = patterns['platforms'].get(platform, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_memory.py",
          "line_number": 143,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "engagement = metadata.get('engagement_rate', 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/observability_middleware.py": {
      "file_path": "backend/core/observability_middleware.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 177,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"http.user_agent\": request.headers.get(\"user-agent\", \"\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 297,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if self.business_metrics.get('user_registrations'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 302,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if self.business_metrics.get('oauth_connections'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 308,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if self.business_metrics.get('content_generations'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 314,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if self.business_metrics.get('api_rate_limits'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/observability_middleware.py",
          "line_number": 319,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if self.business_metrics.get('webhook_events'):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/http_migration_helper.py": {
      "file_path": "backend/core/http_migration_helper.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/core/http_migration_helper.py",
          "line_number": 60,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return await client.get(url, **kwargs)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/http_migration_helper.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"\"\"Drop-in replacement for requests.get()\"\"\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/http_migration_helper.py",
          "line_number": 163,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return client.get(url, **kwargs)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/distributed_security_middleware.py": {
      "file_path": "backend/core/distributed_security_middleware.py",
      "total_queries": 10,
      "secure_queries": 0,
      "risky_queries": 10,
      "issues_found": [
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 92,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 97,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 106,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 116,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return \":\".join(identifier_components)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 121,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.headers.get(\"X-Organization-ID\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 211,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-RateLimit-Limit-Minute\"] = str(limits.get(\"minute\", 60))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-RateLimit-Remaining-Minute\"] = str(remaining.get(\"minute\", 0))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 213,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-RateLimit-Limit-Hour\"] = str(limits.get(\"hour\", 1000))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/distributed_security_middleware.py",
          "line_number": 214,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-RateLimit-Remaining-Hour\"] = str(remaining.get(\"hour\", 0))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/error_handler.py": {
      "file_path": "backend/core/error_handler.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/core/error_handler.py",
          "line_number": 279,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if taxonomy_info.get(\"requires_alert\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/error_handler.py",
          "line_number": 285,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"escalation_required\": taxonomy_info.get(\"requires_escalation\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/service_factory.py": {
      "file_path": "backend/core/service_factory.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/core/service_factory.py",
          "line_number": 71,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "scope = self._scopes.get(service_name, 'singleton')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/service_factory.py",
          "line_number": 84,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.get(service_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/service_factory.py",
          "line_number": 89,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "dependencies = self._services.get(service_name, {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/service_factory.py",
          "line_number": 164,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return get_factory().get(service_name, **kwargs)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/workflow.py": {
      "file_path": "backend/core/workflow.py",
      "total_queries": 7,
      "secure_queries": 0,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 307,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "combined_research = \"\\n\\n\".join([item['content'] for item in recent_research])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 463,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "Platform: {content_item['metadata'].get('platform', 'unknown')}",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 482,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'platform': content_item['metadata'].get('platform'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 484,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'original_id': content_item.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 519,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = content_item['metadata'].get('platform', 'twitter')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 520,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "optimal_time = optimal_times.get(platform, '12:00')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/workflow.py",
          "line_number": 523,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'content_id': content_item.get('content_id'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/pagination.py": {
      "file_path": "backend/core/pagination.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 99,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "items = query.offset(offset).limit(params.page_size).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 159,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(cursor_col < params.cursor)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 161,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(cursor_col > params.cursor)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 173,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "items = query.limit(params.limit + 1).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 247,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(or_(*search_conditions))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/pagination.py",
          "line_number": 317,
          "query_type": "\\.execute\\(, \\.scalar\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.session.execute(count_query).scalar()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/performance.py": {
      "file_path": "backend/core/performance.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/core/performance.py",
          "line_number": 50,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "endpoint_metrics[\"status_codes\"][status_str] = endpoint_metrics[\"status_codes\"].get(status_str, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/performance.py",
          "line_number": 225,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if \"postgresql\" in optimized.get(\"url\", \"\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/performance.py",
          "line_number": 226,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "connect_args = optimized.get(\"connect_args\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/performance.py",
          "line_number": 294,
          "query_type": "DELETE.*FROM",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"\"\"Delete value from cache\"\"\"",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/performance.py",
          "line_number": 331,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_result = cache_optimizer.get(cache_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/performance.py",
          "line_number": 350,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "cached_result = cache_optimizer.get(cache_key)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/alerting.py": {
      "file_path": "backend/core/alerting.py",
      "total_queries": 23,
      "secure_queries": 0,
      "risky_queries": 23,
      "issues_found": [
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing_alert = self.active_alerts.get(alert.id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 215,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "alert = self.active_alerts.get(alert_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 240,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "alert = self.active_alerts.get(alert_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 298,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "sources[alert.source] = sources.get(alert.source, 0) + 1",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 356,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "policy = self.escalation_policies.get(policy_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 391,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "channel = self.notification_channels.get(channel_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 420,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "msg['To'] = ', '.join(config['to_emails'])",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 465,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}.get(alert.severity, \"warning\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 468,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"channel\": config.get(\"channel\", \"#alerts\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 469,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": config.get(\"username\", \"AlertBot\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 501,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "headers = config.get(\"headers\", {\"Content-Type\": \"application/json\"})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 545,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "slack_channel = self.notification_channels.get(\"slack_ops\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 549,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"channel\": slack_channel.config.get(\"channel\", \"#alerts\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 550,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": slack_channel.config.get(\"username\", \"AlertBot\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 564,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "slack_channel = self.notification_channels.get(\"slack_ops\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 573,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"channel\": slack_channel.config.get(\"channel\", \"#alerts\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 574,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"username\": slack_channel.config.get(\"username\", \"AlertBot\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 618,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "labels=kwargs.get(\"labels\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 619,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 634,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "labels=kwargs.get(\"labels\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 635,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 650,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "labels=kwargs.get(\"labels\", {}),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/alerting.py",
          "line_number": 651,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "annotations=kwargs.get(\"annotations\", {})",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/env_validator.py": {
      "file_path": "backend/core/env_validator.py",
      "total_queries": 1,
      "secure_queries": 0,
      "risky_queries": 1,
      "issues_found": [
        {
          "file_path": "backend/core/env_validator.py",
          "line_number": 195,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "result[\"errors\"].append(f\"Value must be one of: {', '.join(rule['allowed_values'])}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/simple_goals.py": {
      "file_path": "backend/core/simple_goals.py",
      "total_queries": 2,
      "secure_queries": 0,
      "risky_queries": 2,
      "issues_found": [
        {
          "file_path": "backend/core/simple_goals.py",
          "line_number": 56,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "for goal_data in data.get('goals', []):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/simple_goals.py",
          "line_number": 116,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return self.goals.get(goal_id)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/tiers.py": {
      "file_path": "backend/core/tiers.py",
      "total_queries": 5,
      "secure_queries": 0,
      "risky_queries": 5,
      "issues_found": [
        {
          "file_path": "backend/core/tiers.py",
          "line_number": 212,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "limit = limits.get(usage_type)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/tiers.py",
          "line_number": 221,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if usage_data.get('platforms', 0) >= current_config.max_platforms:",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/tiers.py",
          "line_number": 229,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if usage_data.get('daily_posts', 0) >= current_config.max_posts_per_day * 0.8:  # 80% threshold",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/tiers.py",
          "line_number": 244,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "'benefit': f'Get {\", \".join(missing_features[:3])}'",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/tiers.py",
          "line_number": 354,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_tier = kwargs.get('user_tier', SubscriptionTier.BASE)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/dlq.py": {
      "file_path": "backend/core/dlq.py",
      "total_queries": 18,
      "secure_queries": 2,
      "risky_queries": 16,
      "issues_found": [
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 144,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "existing = self.db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 146,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 238,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = self.db.query(DeadLetterTask)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 241,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(DeadLetterTask.queue_name == queue_name)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 244,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(DeadLetterTask.failure_reason == failure_reason.value)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 247,
          "query_type": "\\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(DeadLetterTask.organization_id == organization_id)",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 250,
          "query_type": "\\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "query = query.filter(DeadLetterTask.requires_manual_review == requires_manual_review)",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 255,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return query.limit(limit).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 272,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "dlq_task = self.db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 274,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 307,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "deleted_count = self.db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 330,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "total_failed = self.db.query(DeadLetterTask).count()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 333,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "queue_stats = self.db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 336,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").group_by(DeadLetterTask.queue_name).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 339,
          "query_type": "\\.query\\(, db\\.query\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reason_stats = self.db.query(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 342,
          "query_type": "\\.all\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").group_by(DeadLetterTask.failure_reason).all()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 345,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "manual_review_count = self.db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/dlq.py",
          "line_number": 352,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "recent_failures = self.db.query(DeadLetterTask).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/core/token_encryption.py": {
      "file_path": "backend/core/token_encryption.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/core/token_encryption.py",
          "line_number": 330,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform = token_data.get(\"platform\", \"unknown\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/token_encryption.py",
          "line_number": 347,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "expires_at = token_data.get(\"expires_at\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/token_encryption.py",
          "line_number": 373,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "logger.warning(f\"Access token expired for platform {token_data.get('platform')}\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/core/token_encryption.py",
          "line_number": 376,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "return token_data.get(\"access_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/tenant_context.py": {
      "file_path": "backend/middleware/tenant_context.py",
      "total_queries": 8,
      "secure_queries": 2,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 45,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id_header = request.headers.get(\"X-Organization-ID\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 64,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 67,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 100,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id_header = request.headers.get(\"X-Organization-ID\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 112,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "membership = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 115,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 144,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_level = role_hierarchy.get(tenant_context.role, 0)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_context.py",
          "line_number": 145,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "required_level = role_hierarchy.get(required_role, 999)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/distributed_auth_middleware.py": {
      "file_path": "backend/middleware/distributed_auth_middleware.py",
      "total_queries": 22,
      "secure_queries": 7,
      "risky_queries": 15,
      "issues_found": [
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 66,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "request.state.session_id = auth_result.get(\"session_id\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 67,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "request.state.organization_id = auth_result.get(\"organization_id\")",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 70,
          "query_type": "\\.get\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "if auth_result.get(\"session_id\"):",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "refresh_token = request.cookies.get(\"refresh_token\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 157,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 158,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "session_id = payload.get(\"session_id\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 224,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "auth_header = request.headers.get(\"Authorization\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 270,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if payload.get(\"type\") != \"refresh\":",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 275,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = int(payload.get(\"sub\"))",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 276,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "session_id = payload.get(\"session_id\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 329,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 332,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "original_ip = session_info.client_info.get(\"ip_address\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 341,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "original_ua = session_info.client_info.get(\"user_agent\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 365,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "forwarded_for = request.headers.get(\"X-Forwarded-For\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 369,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "real_ip = request.headers.get(\"X-Real-IP\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 401,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "error_message = auth_result.get(\"error\", \"Authentication required\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 402,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "reason = auth_result.get(\"reason\", \"authentication_failed\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 431,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if auth_result.get(\"session_id\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 434,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if auth_result.get(\"refreshed\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 438,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if auth_result.get(\"new_refresh_token\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 448,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if auth_result.get(\"new_access_token\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/distributed_auth_middleware.py",
          "line_number": 472,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_agent = request.headers.get(\"User-Agent\", \"\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/feature_flag_enforcement.py": {
      "file_path": "backend/middleware/feature_flag_enforcement.py",
      "total_queries": 6,
      "secure_queries": 0,
      "risky_queries": 6,
      "issues_found": [
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 72,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "flags_str = \"', '\".join(flag_names)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 104,
          "query_type": "\\.join\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "disabled_str = \"', '\".join(disabled_flags)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 192,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"auth0_disabled\": not flags.get(\"AUTH0_ENABLED\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 193,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"workflow_v2_enabled\": flags.get(\"WORKFLOW_V2\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 194,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"deep_research_available\": flags.get(\"ENABLE_DEEP_RESEARCH\", False),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/feature_flag_enforcement.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"using_stub_integrations\": flags.get(\"USE_STUB_INTEGRATIONS\", False)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/content_safety_middleware.py": {
      "file_path": "backend/middleware/content_safety_middleware.py",
      "total_queries": 21,
      "secure_queries": 4,
      "risky_queries": 17,
      "issues_found": [
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 126,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data.get('content') or",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 127,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data.get('text') or",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 128,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data.get('caption') or",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 129,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data.get('description') or",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "content_data.get('message') or",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 140,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "platform=content_data.get('platform', 'general'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 141,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id=content_data.get('user_id')",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 153,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"platform\": content_data.get('platform', 'general'),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 178,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "safety_level = safety_result.get(\"safety_level\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 194,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"safety_level\": safety_result.get(\"safety_level\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 195,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"brand_alignment_score\": safety_result.get(\"brand_alignment_score\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 196,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"violations\": safety_result.get(\"violations\", [])[:3],  # Limit for response size",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 197,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"recommendations\": safety_result.get(\"recommendations\", [])[:3],",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 198,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"review_required\": safety_result.get(\"review_required\", True)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 217,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = content_data.get('user_id', 'unknown')",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 218,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "platform = content_data.get('platform', 'general')",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 219,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "safety_level = safety_result.get('safety_level')",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 228,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"brand_alignment_score\": safety_result.get(\"brand_alignment_score\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 229,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"publish_approved\": safety_result.get(\"publish_approved\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 230,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"violations_count\": len(safety_result.get(\"violations\", [])),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/content_safety_middleware.py",
          "line_number": 231,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"confidence_score\": safety_result.get(\"confidence_score\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/global_feature_flag_middleware.py": {
      "file_path": "backend/middleware/global_feature_flag_middleware.py",
      "total_queries": 3,
      "secure_queries": 0,
      "risky_queries": 3,
      "issues_found": [
        {
          "file_path": "backend/middleware/global_feature_flag_middleware.py",
          "line_number": 146,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-AI-Features-Enabled\"] = str(flags.get(\"AI_CONTENT_GENERATION\", False))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/global_feature_flag_middleware.py",
          "line_number": 148,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "response.headers[\"X-Admin-Access-Enabled\"] = str(flags.get(\"ADMIN_ACCESS\", False))",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/global_feature_flag_middleware.py",
          "line_number": 235,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "@router.get(\"/feature-requirements\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/error_tracking.py": {
      "file_path": "backend/middleware/error_tracking.py",
      "total_queries": 4,
      "secure_queries": 0,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/middleware/error_tracking.py",
          "line_number": 29,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "if request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/error_tracking.py",
          "line_number": 107,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"request_id\": request_info.get(\"headers\", {}).get(\"x-request-id\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/error_tracking.py",
          "line_number": 150,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"user_agent\": request.headers.get(\"user-agent\"),",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/error_tracking.py",
          "line_number": 151,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "\"referer\": request.headers.get(\"referer\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    },
    "backend/middleware/tenant_isolation.py": {
      "file_path": "backend/middleware/tenant_isolation.py",
      "total_queries": 13,
      "secure_queries": 6,
      "risky_queries": 7,
      "issues_found": [
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 117,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.headers.get(self.tenant_header)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 123,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.query_params.get(self.tenant_query_param)",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.path_params.get('organization_id') or request.path_params.get('org_id')",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 190,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "organization = db.query(Organization).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 192,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": ").first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 212,
          "query_type": "\\.filter\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "return query.filter(model_class.organization_id == organization_id)",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 216,
          "query_type": "\\.join\\(",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "return query.join(",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 219,
          "query_type": "\\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").filter(",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 241,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_org_role = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 245,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 260,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "user_org_role = db.query(UserOrganizationRole).filter(",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 263,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": ").first()",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/tenant_isolation.py",
          "line_number": 295,
          "query_type": "\\.query\\(, db\\.query\\(, \\.filter\\(, \\.first\\(\\)",
          "has_org_filter": true,
          "has_user_filter": false,
          "query_snippet": "org_owner_role = db.query(Role).filter(Role.name == 'org_owner').first()",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        }
      ]
    },
    "backend/middleware/subscription_enforcement.py": {
      "file_path": "backend/middleware/subscription_enforcement.py",
      "total_queries": 1,
      "secure_queries": 1,
      "risky_queries": 0,
      "issues_found": [
        {
          "file_path": "backend/middleware/subscription_enforcement.py",
          "line_number": 134,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "limit_value = limits.get(limit_key, 0)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        }
      ]
    },
    "backend/middleware/multi_tenant.py": {
      "file_path": "backend/middleware/multi_tenant.py",
      "total_queries": 7,
      "secure_queries": 3,
      "risky_queries": 4,
      "issues_found": [
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 113,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "authorization = request.headers.get(\"Authorization\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 125,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "user_id = payload.get(\"user_id\")",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 130,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": true,
          "query_snippet": "tenant_context.is_superuser = payload.get(\"is_superuser\", False)",
          "risk_level": "MEDIUM",
          "recommendation": "Query filtered by user_id - verify user belongs to organization"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 153,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.query_params.get(\"organization_id\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 161,
          "query_type": "\\.get\\(",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "org_id = request.headers.get(\"X-Organization-ID\")",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 190,
          "query_type": "\\.execute\\(",
          "has_org_filter": true,
          "has_user_filter": true,
          "query_snippet": "result = db.execute(query, {",
          "risk_level": "LOW",
          "recommendation": "Query properly filtered by organization_id"
        },
        {
          "file_path": "backend/middleware/multi_tenant.py",
          "line_number": 193,
          "query_type": "\\.first\\(\\)",
          "has_org_filter": false,
          "has_user_filter": false,
          "query_snippet": "}).first()",
          "risk_level": "HIGH",
          "recommendation": "Query lacks organization filtering - potential data leak"
        }
      ]
    }
  },
  "recommendations": [
    "CRITICAL: 2675 high-risk queries found lacking organization filtering. These queries could lead to cross-tenant data access.",
    "Review backend/api/user_settings.py (lines: 100, 162, 197, 198, 202, 244) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/two_factor.py (lines: 22) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/auth.py (lines: 72, 74, 95, 97, 179, 308, 315, 317, 319, 434, 441, 462) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/social_inbox.py (lines: 88, 101, 109, 112, 121, 124, 158, 199, 232, 328, 334, 377, 384, 394, 398, 404, 467, 501, 526, 591, 593, 606, 608, 636) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/memory_vector.py (lines: 88, 128, 130, 152, 170, 172, 193, 211, 213, 238, 258, 322, 340, 342) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/integration_services.py (lines: 103, 110, 172, 234, 244, 298, 311, 312, 349, 362) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/content_history.py (lines: 99, 132, 136, 140, 144, 147, 150, 153, 156, 160, 187, 236, 246, 264, 265, 269, 271, 311, 326, 334, 364, 368, 372, 376, 492, 494, 532, 559, 561, 676, 687, 714, 729, 735) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/legal_documents.py (lines: 23, 197, 407, 550, 618) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/billing.py (lines: 173, 199, 359, 464, 488, 489, 579, 628) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/data_deletion.py (lines: 55, 58, 94, 99, 148, 253, 292, 350, 418, 426, 443, 468) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/similarity.py (lines: 89, 170, 250, 264, 288, 375, 395, 413, 422, 424, 430, 510, 519, 535, 587, 598) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/memory.py (lines: 17, 87, 106, 125, 147, 177, 187, 188) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/plan_aware_images.py (lines: 129, 158, 204) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/template_validation.py (lines: 44, 135, 197, 260, 276, 277, 279, 286, 355, 358, 364, 367) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/vector_search_production.py (lines: 254) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/content_real.py (lines: 77, 134, 140, 143, 144, 145, 146, 165, 185, 212, 221, 227, 231, 237, 239, 376, 378, 379, 380, 387, 456, 499, 509, 529, 533, 551, 558, 561, 562, 563, 564, 566, 567, 568, 569, 570, 622, 629, 672, 686, 694, 695, 696, 699, 702, 713, 725, 726, 727, 728) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/plan_suggestions.py (lines: 20, 53, 123, 182, 192) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/partner_oauth.py (lines: 178, 220, 241, 242, 243, 263, 308, 392, 522, 523, 560, 561, 562, 563, 597, 608, 665, 708, 768, 769, 832, 847, 1023, 1024, 1061, 1066, 1107, 1185, 1296, 1309) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/error_taxonomy.py (lines: 38, 252, 284, 342, 373, 423) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/goals.py (lines: 42, 61, 159, 199) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/social_auth.py (lines: 78, 102, 103, 104, 168, 169, 198, 199, 200, 201, 202, 213, 261, 270, 280, 288, 289, 290, 291, 292, 293, 303, 313, 323, 330, 337, 338, 339, 340, 343, 428, 459, 460, 461, 472) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/diagnostics.py (lines: 40, 83, 86, 127, 170, 174, 177) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/monitoring.py (lines: 82, 83, 84, 136, 303, 352, 441, 558) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/user_credentials.py (lines: 55, 58, 60, 65, 71, 87, 90, 108, 112, 141, 148, 170, 184, 187, 199, 224, 248, 291, 298) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/plan_management.py (lines: 78, 99, 137, 180, 220, 359) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/websockets.py (lines: 210, 228, 253) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/memory_v2.py (lines: 164, 173, 177, 180, 182, 194, 219, 235, 239, 242, 244, 247, 249, 276, 288, 291, 293, 295, 297, 301, 309, 325, 331, 350, 360, 368, 380, 385, 389, 392, 394, 397, 399, 427, 436, 438, 444, 465, 467, 486, 493, 495, 614, 625) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/database_health.py (lines: 16, 65) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/ai_suggestions.py (lines: 97, 139, 393, 465) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/observability.py (lines: 85, 95, 141, 156, 161, 256, 268, 327, 363, 392, 420) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/feature_flags.py (lines: 6) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/workflow_stub.py (lines: 11, 21) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/key_rotation.py (lines: 119, 162, 174, 202, 272, 303, 332, 351, 353, 385, 500) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/performance_monitoring.py (lines: 82, 93, 263, 268, 318) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/dashboard_metrics.py (lines: 24, 32, 33, 34, 37, 79, 99, 108, 128, 130, 137, 138, 139, 216, 223, 225, 230) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/data_export.py (lines: 127, 146, 222, 224, 310, 516, 648, 673) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/vector_search.py (lines: 89, 105, 106, 107, 135, 168, 200, 239, 251, 265) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/workflow_v2.py (lines: 77, 94, 98, 106, 124, 146, 157, 174, 178, 186, 297, 299, 374) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/linkedin_oauth.py (lines: 52, 127, 203, 204, 212, 213, 214, 215, 218, 219, 239, 260, 261, 262, 263, 325, 335, 336, 341, 342, 359) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/content.py (lines: 219, 336, 359, 361, 373, 392, 394, 417, 425, 444, 456, 482, 521, 548, 564, 581, 608, 624, 648, 652, 661, 662, 663, 679, 680, 681, 723, 724, 738, 739, 766, 843, 900, 952, 955, 1023, 1057, 1064, 1207) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/auth_management.py (lines: 148, 195, 248, 283, 295) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/autonomous_stub.py (lines: 11, 20) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/notifications_stub.py (lines: 11, 20) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/webhook_monitoring.py (lines: 20, 77, 175, 216, 236, 335, 363, 376, 377, 378) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/autonomous.py (lines: 96, 151, 161, 170, 172, 176, 177, 373) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/organizations.py (lines: 73, 151, 165, 167, 213, 215, 237, 298, 364, 428, 444, 451, 496, 563, 565, 580, 595, 605, 665, 681, 689) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/image_streaming.py (lines: 80) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/plans.py (lines: 53, 69, 185, 234) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/goals_v2.py (lines: 135, 153, 155, 163, 171, 193, 205, 231, 314, 340, 366, 375, 383, 393, 401, 403, 407, 494, 514, 528, 535, 593, 681, 712, 721, 729, 731, 747, 756, 759, 794, 803, 806, 872, 881, 884, 897, 910, 918, 925, 955, 968, 975, 1008, 1018, 1025, 1032) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/webhook_reliability.py (lines: 25, 56, 78, 92, 104, 126, 140, 230, 257) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/notifications.py (lines: 89, 94, 96, 128, 216, 236, 239, 245, 254, 263, 276, 285, 309, 343, 377, 405, 442, 481) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/plan_billing.py (lines: 94, 253, 299, 366) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/assistant_chat.py (lines: 52, 129, 134, 157) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/auth_open.py (lines: 124, 126, 152, 157, 159, 161, 273, 275, 312, 359, 404, 406, 441, 531, 535, 598, 654, 663) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/workflow.py (lines: 7, 37, 53, 67) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/webhooks.py (lines: 69, 173, 198, 199, 226, 257, 291, 321, 352, 381, 443, 494, 559, 560, 561, 562, 564) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/simple_workflow.py (lines: 51, 62, 76) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/performance.py (lines: 77, 104, 130, 189, 239, 315) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/multi_tenant.py (lines: 113, 144, 232, 283, 325) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/data_retention.py (lines: 63, 99, 144, 247, 254, 256, 258, 272, 304, 424) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/performance_dashboard.py (lines: 45, 46, 47, 48, 68, 69, 70, 71, 72, 73, 130, 164, 165, 169, 170, 171, 175, 176, 180, 181, 248, 251, 257, 263, 269, 286, 312, 325, 336, 347, 358, 390, 429) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/social_platforms.py (lines: 82, 127, 128, 129, 175, 255, 300, 310, 342, 363, 399, 408, 440, 487, 536, 585, 717, 738, 747, 753, 770, 787, 788, 789, 794, 810, 827) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/diagnostics_simple.py (lines: 8, 41) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/metrics_stub.py (lines: 15, 25, 26) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/monitoring_metrics.py (lines: 38, 60, 153) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/deep_research.py (lines: 148, 162, 179, 219, 220, 265, 332, 382, 431, 460, 473, 474, 475, 489, 504, 513, 514, 515, 533, 555, 578, 590, 649, 662, 678, 679, 680) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/sre_dashboard.py (lines: 52, 97, 111, 132, 236, 316, 354, 369, 388, 424, 425, 477, 480, 482, 483) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/auth_fastapi_users.py (lines: 68, 78) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/api/validation.py (lines: 62, 77, 84, 91, 98, 107, 136, 280, 438, 439, 440, 441, 470) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/stripe_service.py (lines: 167, 255, 261, 262, 271, 305, 314, 341, 363, 368, 377, 392, 575, 581, 632, 638) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/avoid_list_processor.py (lines: 313, 353, 441) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/data_retention_service.py (lines: 203, 281, 285, 340, 366, 372, 378, 389, 401, 407, 415, 429, 435, 452, 458, 466, 482, 495, 508, 522) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/subscription_service.py (lines: 175, 198, 200, 228, 230, 259, 290, 291, 320, 343, 372, 375) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/plan_aware_image_service.py (lines: 157, 181, 183, 184, 202, 240, 241, 260, 268, 269, 288, 370) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/meta_webhook_service.py (lines: 95, 102, 103, 143, 275, 276, 284, 286, 287, 288, 293, 295, 296, 297, 298, 299, 300, 301) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/platform_optimization_service.py (lines: 162, 178, 203, 225, 229, 230, 359, 377, 401, 402, 461, 504, 505, 518, 523, 530, 531, 582, 587) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/deep_company_research_service.py (lines: 390, 391, 392, 393, 394, 395, 396, 578, 624, 625, 626, 627, 628, 629, 630, 716, 728, 755) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/goals_progress_service.py (lines: 45, 165, 176, 192, 199, 224, 225, 232, 233, 238, 268, 269, 271, 279, 281, 283, 311, 315, 325) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/advanced_quality_scorer.py (lines: 156, 440, 499) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/multi_tenant_service.py (lines: 65, 75, 77, 80, 85, 92, 96, 108, 110, 151, 152, 154, 161, 173, 182, 191, 201, 205, 209, 214, 219, 328, 333, 405, 406, 416, 424, 432, 461, 466) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/ai_insights_service.py (lines: 67, 99, 100, 101, 103, 183, 186, 247) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/webhook_reliability_service.py (lines: 242, 244, 341, 343, 467, 471, 558, 563, 569, 616, 619, 622, 626, 635, 637, 643, 645, 648, 653) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/real_trends_service.py (lines: 55, 76, 78, 79, 80, 81, 145, 203, 204, 259, 260, 264, 265, 266, 276, 398, 399, 405, 407) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/plan_aware_social_service.py (lines: 116, 162, 166, 267, 285, 316, 348, 365) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/memory_service_production.py (lines: 146, 148, 275) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/industry_classification_service.py (lines: 189, 195) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/webhook_service.py (lines: 105, 173, 255, 265, 293, 318, 401, 404, 479, 482, 491, 492, 493, 494, 508, 511, 517, 518, 519, 520, 521, 568, 570, 572) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/notification_service.py (lines: 182, 326, 354, 394, 398, 409, 423, 582) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/similarity_service.py (lines: 173, 174, 176, 218, 219, 226, 231, 232, 233, 239, 249, 258, 269, 270, 271, 272, 306, 310, 320, 336, 343, 388, 489, 490, 492, 493, 595, 598, 599, 601, 602, 754, 772, 773, 794) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/publish_runner.py (lines: 88, 311) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/error_recovery_service.py (lines: 213, 265, 407, 437, 470, 569) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/file_upload_service.py (lines: 106, 110, 174, 338) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_categorization.py (lines: 212, 213, 214, 215, 216, 217, 289, 319, 322, 327, 443, 445, 453, 463, 468, 469, 479, 575, 581, 591) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/research_scheduler.py (lines: 133, 153, 154, 155, 183, 189, 190, 321, 394, 400, 452, 453, 454, 455, 456, 458, 491) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/web_search_utils.py (lines: 35, 36, 37, 38, 86, 87, 88, 89) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/metrics_collection_service.py (lines: 301, 445, 499, 505, 507, 561, 567, 569, 573) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/meta_page_token_service.py (lines: 48, 52, 64, 65, 70, 75, 122, 126, 159, 163, 164, 216, 220, 245, 251, 252, 253) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/alerting_service.py (lines: 71, 73, 77, 131, 290) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/error_taxonomy_service.py (lines: 634) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_moderation_service.py (lines: 248, 258, 346, 356, 469, 507) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/cache_decorators.py (lines: 93, 257) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/research_automation.py (lines: 385, 394, 398, 399, 400, 401, 403, 405, 409, 609) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/connection_pool_manager.py (lines: 238, 239, 240, 243, 244, 247, 248, 249, 259, 260, 263, 264, 267, 278, 279, 280, 281, 282, 285, 288, 364, 494, 496) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/x_connection_service.py (lines: 34, 50, 54, 70, 71, 72, 94, 123, 143, 168, 169, 170, 171, 172) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/pgvector_service.py (lines: 41, 81, 90, 126, 135, 181, 243, 268, 294, 320) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/image_generation_service.py (lines: 318, 323, 333, 400, 406, 419, 420, 428, 430, 434, 436, 440, 442, 446, 448, 449, 450, 454, 461, 611, 615, 620, 621, 651, 694, 697, 698, 704, 705, 734, 765, 768, 769, 803, 808, 865, 878, 886, 891, 939, 941, 942, 943, 944, 947, 948, 949, 953, 959, 960, 961, 970, 1041, 1141, 1258, 1277, 1278, 1377, 1413, 1453, 1469, 1505, 1885, 1953, 2068, 2140, 2162, 2205, 2240, 2246) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/embedding_service.py (lines: 122, 130, 146, 576) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/pkce_state_store.py (lines: 152, 154, 169, 222, 278) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/cache_warmup_service.py (lines: 56, 64, 88, 224, 225, 226, 229, 275, 276, 277, 280, 295, 331) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/key_rotation_service.py (lines: 205, 213, 301, 310, 311, 352, 353, 364, 396, 415, 416, 421, 438, 476, 477, 478, 481, 484, 513, 543, 544, 567, 595, 596, 606, 607, 608, 659) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/social_webhook_service.py (lines: 115, 118, 119, 122, 123, 162, 165, 166, 169, 170, 232, 233, 234, 235, 236, 249, 250, 251, 275, 276, 277, 278, 290, 291, 315, 316, 317, 318, 330, 331, 356, 357, 358, 359, 362, 374, 375, 376, 400, 401, 402, 403, 437, 438, 439, 440, 441, 444, 445, 450, 465, 466, 467, 468, 469, 470, 490, 491, 492, 493, 495, 496, 497, 530, 538, 542) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/research_monitoring.py (lines: 488) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/quota_management.py (lines: 243, 244, 245, 279, 281, 283, 284, 285, 286, 294, 301, 306, 307, 308, 355) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/real_social_research_service.py (lines: 82, 89, 90, 91, 99, 100, 101, 106, 107, 112, 113, 115, 195, 201, 202, 203, 215, 216, 222, 223, 231, 234, 245, 320, 327, 328, 329, 343, 344, 355, 356, 361, 362, 370, 373, 450, 456, 457, 458, 459, 495, 496, 505, 508, 573, 580, 587, 595) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/plan_service.py (lines: 32, 213, 214, 218, 225, 234, 268, 269, 340) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/apm_service.py (lines: 269, 274, 275, 363, 393, 779) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/x_mentions_service.py (lines: 58, 92, 178, 196, 197, 198, 233) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_generation_automation.py (lines: 511, 513, 514, 515, 540, 551, 552, 555, 556, 557, 561, 597, 602, 607, 623, 653, 689, 708, 740, 764, 804, 868) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/cicd_maturity_assessment.py (lines: 110, 143, 144, 145, 146, 147, 148, 242, 266, 287, 319, 320, 323, 383, 387, 409, 415, 455, 484, 486, 521, 522, 525, 527, 548, 551, 587, 591, 615, 662, 663, 680, 718, 722, 731, 740, 787, 788, 791, 825, 858, 859, 875, 884, 967, 1032, 1077, 1078, 1079, 1080, 1081, 1082, 1089) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_automation.py (lines: 97, 187, 188, 189, 190, 191, 192, 193, 364, 422, 424, 427, 476, 532, 570, 599, 631, 691, 734, 738, 744) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/email_service.py (lines: 201, 281) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/usage_tracking_service.py (lines: 117, 125, 168, 231, 236) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/oauth_token_service.py (lines: 167, 180, 187, 274, 276, 327, 329, 370, 378, 382, 389, 409, 442, 444) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/plan_aware_stripe_service.py (lines: 215, 221, 222, 223, 227, 232, 242, 259, 268, 287, 308, 313, 322, 337) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/distributed_session_manager.py (lines: 274, 275, 277, 368, 377, 531, 791, 794, 796, 843) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/alt_text_service.py (lines: 204, 226) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/performance_tracking.py (lines: 147, 176, 229, 247, 248, 249, 250, 251, 368, 483, 488, 564, 589) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/instagram_service.py (lines: 396, 403, 425, 458, 460, 678, 734, 817, 824, 957) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/workflow_orchestration.py (lines: 426, 584, 587, 746) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_safety_service.py (lines: 242, 278, 279, 418, 439, 613, 626, 627, 628, 631) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/image_processing_service.py (lines: 141, 142, 217, 222, 223, 228, 233, 294, 437) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/template_validation_service.py (lines: 209, 433, 584, 700, 747, 757, 791, 802, 834, 844, 867, 868, 882, 894, 895) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_scheduler_service.py (lines: 53, 143, 180, 182) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/token_refresh_service.py (lines: 61, 157, 171, 229, 234, 239, 256, 260, 262, 278, 282) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/distributed_rate_limiter.py (lines: 376, 451) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/connection_publisher_service.py (lines: 84, 92, 132, 222) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/research_automation_production.py (lines: 259, 266, 267, 273, 281, 282, 283, 297, 304, 307, 311, 319, 320, 321, 335, 342, 346, 347, 359, 360, 361, 362, 376, 387, 388, 391, 401, 402, 403, 468, 469, 519, 527, 534, 541, 542, 543, 547, 548, 569, 578) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/memory_service.py (lines: 128, 135, 137, 139, 235, 238, 241, 244, 246, 266, 267, 268, 287, 289, 330, 332, 359) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/web_research_service.py (lines: 196, 253, 255, 256, 257, 258, 278, 284, 287, 288, 294, 297, 298, 299, 341, 342, 343, 367, 436) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/redis_cache.py (lines: 80, 184, 185, 268, 481, 496, 497) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/facebook_webhook_handler.py (lines: 65, 74, 94, 95, 96, 99, 103, 111, 113, 117, 118, 124, 125, 126, 127, 140, 145, 146, 150, 154, 165, 166, 167, 168, 169, 170, 207, 208, 209, 210, 211) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/twitter_webhook_handler.py (lines: 88, 100, 101, 102, 103, 112, 114, 117, 119, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 169, 170, 173, 176, 177, 180, 183, 195, 196, 197, 198, 204, 265, 273, 274, 275, 276, 279, 280, 286, 288, 296, 297, 298, 299, 305, 306, 307) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/personality_response_engine.py (lines: 178, 187, 222, 265, 284, 285, 286, 302, 327, 346, 358, 407, 421, 431, 461, 472, 485, 486, 487, 490) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/content_persistence_service.py (lines: 84, 94, 102, 109, 115, 116, 117, 118, 138, 268, 277) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/automated_key_rotation_scheduler.py (lines: 177, 180, 183, 184, 323) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/metrics_collection.py (lines: 199, 202, 219, 223, 285, 288, 305, 309, 371, 374, 391, 395, 457, 460, 477, 481, 641, 642, 643, 644, 645, 646, 647, 648, 715, 721, 723) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/websocket_manager.py (lines: 164, 204) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/autonomous_posting.py (lines: 84, 147, 180, 182, 183, 184, 187, 188, 189, 198, 201, 204, 270, 271, 272, 273, 274, 275, 317, 362, 366, 367, 383, 387, 398, 411, 427, 469) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/research_automation_service.py (lines: 373, 407, 420, 421, 423, 424, 425, 426, 439, 440, 457, 458, 461, 462, 463, 464, 481, 506, 534, 555, 574, 600, 729, 730) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/publisher_adapters/x_adapter.py (lines: 53, 81, 84, 131, 141, 162, 184, 188, 192, 197, 215, 270, 321, 367, 397, 409) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/services/publisher_adapters/meta_adapter.py (lines: 53, 64, 101, 137, 138, 204, 207) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/key_rotation_tasks.py (lines: 72, 75, 156, 226, 363, 499, 503, 519) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/subscription_cleanup_tasks.py (lines: 48, 49, 56, 128, 129, 136, 202, 203, 213, 273, 274, 282, 306, 315, 316, 344, 386, 387, 394, 415, 471, 472, 479, 501, 502, 509, 571, 575) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/webhook_watchdog.py (lines: 108, 115, 120, 347) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/publish_tasks.py (lines: 75, 77, 87, 91, 106, 109, 131, 133, 156, 158, 179, 181, 204, 206, 208, 233, 235, 237) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/lightweight_research_tasks.py (lines: 56, 162) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/goals_tasks.py (lines: 40, 42, 130, 134, 276, 278, 285, 288) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/automation_tasks.py (lines: 59, 60, 61, 62, 63, 64, 137, 138, 139, 140, 141, 190, 202, 209, 210, 211, 212, 213, 249, 251, 256, 263, 264, 294, 301, 303, 309, 311, 318, 379, 380, 381, 382, 439, 440, 441, 473, 474, 475, 476, 477, 478, 521, 522, 526, 580, 581, 588) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/token_health_tasks.py (lines: 169, 172, 241, 249, 300, 314) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/webhook_tasks.py (lines: 82, 92, 100, 115, 122, 128, 148, 156, 160, 161, 162, 175, 188, 190, 197, 199, 209, 216, 229, 248, 252, 285, 303, 327, 330, 334, 337, 343, 368, 369, 371, 402, 403, 404, 437, 438, 450, 451, 472, 501, 689, 744, 751, 752, 803, 808, 809, 810) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/autonomous_scheduler.py (lines: 252, 254, 348, 393, 439, 442, 474, 475, 485, 562, 577, 641, 659, 660, 666) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/data_retention_tasks.py (lines: 82, 85, 161, 164, 236, 239, 392, 399) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/ftc_compliance_tasks.py (lines: 199, 210, 219, 220) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/posting_tasks.py (lines: 50, 60, 113, 155, 158, 188, 203, 241, 267, 361) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/db_session_manager.py (lines: 28, 141) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/x_polling_tasks.py (lines: 93, 97, 139, 141, 147, 148, 149, 153, 162, 163, 170, 262, 266, 280, 284, 285, 286, 294) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/tasks/webhook_watchdog_tasks.py (lines: 41, 44, 46, 47, 49) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/plan_decorators.py (lines: 25, 61, 106, 160) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/app_factory.py (lines: 249, 269, 301) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/logging.py (lines: 127, 136) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/secrets_validator.py (lines: 191, 193, 233, 235, 248) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/distributed_security_config.py (lines: 94, 98, 136, 139) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/database_optimizer.py (lines: 115, 125, 133, 165, 180, 208, 212, 236, 336, 345, 349, 350, 391, 398, 440, 449, 453, 468, 484) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/encryption.py (lines: 209, 210) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/uuid_helper.py (lines: 53, 124, 140) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/config.py (lines: 141) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/memory.py (lines: 37, 38, 144, 147, 148, 150, 151, 163, 165, 166, 167, 168, 182, 185, 186, 188, 189, 206, 207, 211, 212, 215, 216, 242, 245, 246, 249, 250, 253, 258, 280) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/http_client.py (lines: 190) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/vector_store.py (lines: 61, 62, 63, 64, 353, 660, 663) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/goals.py (lines: 102, 139, 143, 222, 324, 335, 346) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/webhook_security.py (lines: 131, 174, 351, 352, 427) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/security.py (lines: 61, 83) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/plan_enforcement.py (lines: 181, 186, 239, 255, 320, 379, 388, 400, 465, 500, 698, 752, 896) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/csrf_protection.py (lines: 109, 251, 257, 274, 372, 384, 421, 429) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/runbooks.py (lines: 381, 382, 424, 529, 531) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/observability.py (lines: 186) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/feature_flags.py (lines: 58) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/token_encryption_validator.py (lines: 283) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/security_middleware.py (lines: 142, 147, 179, 188, 212, 361, 409, 410) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/simple_vector_search.py (lines: 23, 24, 129, 132, 133, 135, 136, 145, 147, 148, 149, 150, 161, 164, 165, 167, 168, 182, 183, 187, 188, 191, 192, 215, 218, 219, 222, 223, 226, 231) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/audit_logger.py (lines: 355, 390, 412, 427, 433, 457, 488, 489, 490, 493, 494, 501) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/simple_memory.py (lines: 87, 104, 132, 135, 136, 139, 140, 143) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/observability_middleware.py (lines: 177, 297, 302, 308, 314, 319) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/http_migration_helper.py (lines: 60, 161, 163) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/distributed_security_middleware.py (lines: 92, 97, 106, 116, 121, 129, 211, 212, 213, 214) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/error_handler.py (lines: 279, 285) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/service_factory.py (lines: 71, 84, 89, 164) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/workflow.py (lines: 307, 463, 482, 484, 519, 520, 523) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/pagination.py (lines: 99, 159, 161, 173, 247, 317) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/performance.py (lines: 50, 225, 226, 294, 331, 350) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/alerting.py (lines: 178, 215, 240, 298, 356, 391, 420, 465, 468, 469, 501, 545, 549, 550, 564, 573, 574, 618, 619, 634, 635, 650, 651) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/env_validator.py (lines: 195) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/simple_goals.py (lines: 56, 116) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/tiers.py (lines: 212, 221, 229, 244, 354) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/dlq.py (lines: 144, 146, 238, 241, 244, 255, 272, 274, 307, 330, 333, 336, 339, 342, 345, 352) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/core/token_encryption.py (lines: 330, 347, 373, 376) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/tenant_context.py (lines: 45, 64, 100, 112, 144, 145) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/distributed_auth_middleware.py (lines: 130, 224, 270, 329, 332, 341, 365, 369, 401, 402, 431, 434, 438, 448, 472) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/feature_flag_enforcement.py (lines: 72, 104, 192, 193, 194, 195) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/content_safety_middleware.py (lines: 126, 127, 128, 129, 130, 140, 153, 178, 194, 195, 196, 197, 198, 228, 229, 230, 231) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/global_feature_flag_middleware.py (lines: 146, 148, 235) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/error_tracking.py (lines: 29, 107, 150, 151) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/tenant_isolation.py (lines: 117, 123, 130, 190, 192, 241, 260) and add organization_id filtering using filter_by_organization() helper",
    "Review backend/middleware/multi_tenant.py (lines: 113, 153, 161, 193) and add organization_id filtering using filter_by_organization() helper",
    "REVIEW: 357 medium-risk queries found. Verify these queries properly enforce multi-tenant isolation.",
    "Use backend.middleware.tenant_isolation.filter_by_organization() helper for consistent filtering",
    "Implement organization_id as NOT NULL column where missing",
    "Add database-level multi-tenant policies for defense in depth",
    "Create automated tests for cross-tenant access prevention"
  ]
}