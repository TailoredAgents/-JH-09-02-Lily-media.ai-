name: Dependency Updates

on:
  schedule:
    # Run dependency updates weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * MON'
    # Additional security-focused runs twice weekly  
    - cron: '0 14 * * WED'  # Wednesday at 2 PM UTC
    - cron: '0 6 * * FRI'   # Friday at 6 AM UTC
  workflow_dispatch: # Allow manual triggering
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - security-only
        - python-only
        - nodejs-only
      force_major:
        description: 'Allow major version updates'
        required: false
        default: false
        type: boolean

env:
  FORCE_COLOR: 1
  PYTHONUNBUFFERED: 1

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Use more recent LTS
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Install dependency management tools
    - name: Install Python dependency tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools==7.4.1
        pip install safety==3.2.8
        pip install pip-audit==2.7.3
        pip install pipdeptree==2.23.4

    - name: Install Node.js security tools
      working-directory: frontend
      run: |
        npm install -g npm-check-updates@17.1.0
        npm install -g audit-ci@7.1.0
        npm install -g npm@10.8.3

    # Python dependency updates
    - name: Analyze Python dependencies
      id: python-analysis
      if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'python-only' || github.event.inputs.update_type == ''
      run: |
        echo "🔍 Analyzing Python dependencies..."
        
        # Install current dependencies
        pip install -e .
        
        # Generate dependency tree
        pipdeptree --json > python-dependency-tree.json
        
        # Check for security vulnerabilities with multiple tools
        echo "::group::Security Analysis"
        echo "🔒 Running Safety check..."
        safety check --json --output safety-report.json || echo "Safety check completed with findings"
        
        echo "🔒 Running pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || echo "pip-audit completed with findings"
        echo "::endgroup::"
        
        # Check for outdated packages
        pip list --outdated --format=json > python-outdated.json || true
        
        # Determine if updates are available
        OUTDATED_COUNT=$(jq length python-outdated.json)
        echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "📦 Found $OUTDATED_COUNT outdated Python packages"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "✅ All Python packages are up to date"
        fi

    - name: Update Python dependencies
      id: python-update
      if: (steps.python-analysis.outputs.has_updates == 'true' || github.event.inputs.update_type == 'security-only') && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'python-only' || github.event.inputs.update_type == 'security-only' || github.event.inputs.update_type == '')
      run: |
        echo "🔄 Updating Python dependencies..."
        
        # Create backup of current dependencies
        cp pyproject.toml pyproject.toml.bak
        
        # Update dependencies with constraints
        if [ "${{ github.event.inputs.update_type }}" = "security-only" ]; then
          echo "🔒 Security-only updates for Python..."
          # Apply security patches only - this requires manual intervention
          # as pyproject.toml doesn't support automated security-only updates
          echo "security_only=true" >> $GITHUB_OUTPUT
        else
          echo "📦 Full dependency updates for Python..."
          
          # Use pip-tools to update dependencies while respecting constraints
          if [ "${{ github.event.inputs.force_major }}" = "true" ]; then
            echo "⚠️ Major version updates allowed"
            pip-compile --upgrade --allow-unsafe pyproject.toml || true
          else
            echo "🔒 Minor/patch updates only"
            # Update each dependency individually to avoid major version jumps
            pip-compile --upgrade-package fastapi --upgrade-package uvicorn --upgrade-package pydantic --upgrade-package sqlalchemy --upgrade-package celery --upgrade-package redis --upgrade-package openai --upgrade-package numpy pyproject.toml || true
          fi
          
          # Install updated dependencies
          pip install -e .
          
          echo "full_update=true" >> $GITHUB_OUTPUT
        fi

    # Node.js dependency updates  
    - name: Analyze Node.js dependencies
      id: nodejs-analysis
      if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'nodejs-only' || github.event.inputs.update_type == ''
      working-directory: frontend
      run: |
        echo "🔍 Analyzing Node.js dependencies..."
        
        # Check for security vulnerabilities
        echo "::group::Security Analysis"
        echo "🔒 Running npm audit..."
        npm audit --json > npm-audit-report.json || echo "npm audit completed with findings"
        
        echo "🔒 Running audit-ci for critical vulnerabilities..."
        audit-ci --config ../audit-ci.json --report-type json --output-file audit-ci-report.json || echo "audit-ci completed with findings"
        echo "::endgroup::"
        
        # Check for outdated packages
        npm outdated --json > npm-outdated.json || true
        
        # Check what npm-check-updates would update
        ncu --jsonUpgraded --timeout 30000 > ncu-report.json || true
        
        # Determine if updates are available
        OUTDATED_COUNT=$(jq 'keys | length' npm-outdated.json 2>/dev/null || echo "0")
        echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "📦 Found $OUTDATED_COUNT outdated Node.js packages"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "✅ All Node.js packages are up to date"
        fi

    - name: Update Node.js dependencies
      id: nodejs-update
      if: (steps.nodejs-analysis.outputs.has_updates == 'true' || github.event.inputs.update_type == 'security-only') && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'nodejs-only' || github.event.inputs.update_type == 'security-only' || github.event.inputs.update_type == '')
      working-directory: frontend
      run: |
        echo "🔄 Updating Node.js dependencies..."
        
        # Create backup of current dependencies
        cp package.json package.json.bak
        cp package-lock.json package-lock.json.bak
        
        if [ "${{ github.event.inputs.update_type }}" = "security-only" ]; then
          echo "🔒 Security-only updates for Node.js..."
          npm audit fix --force
          echo "security_only=true" >> $GITHUB_OUTPUT
        else
          echo "📦 Full dependency updates for Node.js..."
          
          if [ "${{ github.event.inputs.force_major }}" = "true" ]; then
            echo "⚠️ Major version updates allowed"
            ncu -u --timeout 30000
          else
            echo "🔒 Minor/patch updates only"
            ncu -u --target minor --timeout 30000
          fi
          
          # Install updated dependencies
          npm install
          
          # Run security fixes after updates
          npm audit fix || echo "Security fixes applied where possible"
          
          echo "full_update=true" >> $GITHUB_OUTPUT
        fi

    # Build and test validation
    - name: Validate Python build
      if: steps.python-update.outputs.full_update == 'true' || steps.python-update.outputs.security_only == 'true'
      run: |
        echo "🧪 Validating Python build..."
        
        # Install and validate backend dependencies
        pip install -e .
        
        # Run basic import tests
        python -c "
        import sys
        try:
            from backend.main import app
            from backend.db.database import engine
            from backend.auth.auth_open import get_current_user
            from backend.api import organization
            print('✅ Core Python imports successful')
        except Exception as e:
            print(f'❌ Python import validation failed: {e}')
            sys.exit(1)
        "
        
        # Run linting
        pip install black isort flake8
        echo "🔍 Running Python linting..."
        black --check backend/ || echo "⚠️ Black formatting issues found"
        isort --check-only backend/ || echo "⚠️ isort import issues found"
        flake8 backend/ --max-line-length=88 --ignore=E203,W503 || echo "⚠️ flake8 style issues found"

    - name: Validate Node.js build
      if: steps.nodejs-update.outputs.full_update == 'true' || steps.nodejs-update.outputs.security_only == 'true'
      working-directory: frontend
      run: |
        echo "🧪 Validating Node.js build..."
        
        # Install dependencies
        npm ci
        
        # Run linting
        echo "🔍 Running ESLint..."
        npm run lint || echo "⚠️ ESLint issues found"
        
        # Run build
        echo "🔨 Running build..."
        npm run build
        
        # Run tests if available
        echo "🧪 Running tests..."
        npm run test -- --passWithNoTests || echo "⚠️ Some tests failed"

    # Generate comprehensive update report
    - name: Generate dependency report
      id: report
      run: |
        echo "📊 Generating comprehensive dependency update report..."
        
        # Initialize report
        REPORT_FILE="dependency-update-report.md"
        cat > $REPORT_FILE << 'EOF'
        # 🔄 Dependency Update Report
        
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Trigger:** ${{ github.event_name }}
        **Update Type:** ${{ github.event.inputs.update_type || 'all' }}
        **Major Updates Allowed:** ${{ github.event.inputs.force_major || 'false' }}
        
        EOF
        
        # Add Python section if applicable
        if [ -f python-outdated.json ] && [ -s python-outdated.json ]; then
          cat >> $REPORT_FILE << 'EOF'
        ## 🐍 Python Dependencies
        
        EOF
          
          if [ -f safety-report.json ]; then
            SECURITY_ISSUES=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "**Security Issues Found:** $SECURITY_ISSUES" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
          fi
          
          if [ -f pip-audit-report.json ]; then
            AUDIT_ISSUES=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
            echo "**Audit Issues Found:** $AUDIT_ISSUES" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
          fi
          
          echo "### Outdated Packages" >> $REPORT_FILE
          jq -r '.[] | "- **\(.name)**: \(.version) → \(.latest_version)"' python-outdated.json >> $REPORT_FILE || true
          echo "" >> $REPORT_FILE
        fi
        
        # Add Node.js section if applicable
        if [ -f frontend/npm-outdated.json ] && [ -s frontend/npm-outdated.json ]; then
          cat >> $REPORT_FILE << 'EOF'
        ## 📦 Node.js Dependencies
        
        EOF
          
          if [ -f frontend/npm-audit-report.json ]; then
            AUDIT_HIGH=$(jq '.metadata.vulnerabilities.high' frontend/npm-audit-report.json 2>/dev/null || echo "0")
            AUDIT_CRITICAL=$(jq '.metadata.vulnerabilities.critical' frontend/npm-audit-report.json 2>/dev/null || echo "0")
            echo "**Critical Vulnerabilities:** $AUDIT_CRITICAL" >> $REPORT_FILE
            echo "**High Vulnerabilities:** $AUDIT_HIGH" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
          fi
          
          echo "### Outdated Packages" >> $REPORT_FILE
          jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) → \(.value.wanted)"' frontend/npm-outdated.json >> $REPORT_FILE || true
          echo "" >> $REPORT_FILE
        fi
        
        # Add validation results
        cat >> $REPORT_FILE << 'EOF'
        ## 🧪 Validation Results
        
        EOF
        
        if [ "${{ steps.python-update.outputs.full_update }}" = "true" ] || [ "${{ steps.python-update.outputs.security_only }}" = "true" ]; then
          echo "✅ Python build validation completed" >> $REPORT_FILE
        fi
        
        if [ "${{ steps.nodejs-update.outputs.full_update }}" = "true" ] || [ "${{ steps.nodejs-update.outputs.security_only }}" = "true" ]; then
          echo "✅ Node.js build validation completed" >> $REPORT_FILE
        fi
        
        echo "" >> $REPORT_FILE
        echo "---" >> $REPORT_FILE
        echo "🤖 *This report was generated automatically by the dependency update workflow*" >> $REPORT_FILE
        
        # Set output for PR body
        echo "report_exists=true" >> $GITHUB_OUTPUT

    # Check for changes and create PR
    - name: Check for changes
      id: changes
      run: |
        # Check for any file changes
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "📊 No dependency updates available"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📊 Dependency updates detected"
          
          # Generate change summary
          CHANGED_FILES=$(git diff --name-only | wc -l)
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # List changed files for summary
          echo "Changed files:" >> dependency-update-report.md
          git diff --name-only | sed 's/^/- /' >> dependency-update-report.md
        fi

    - name: Upload security reports
      if: steps.changes.outputs.changes == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          python-dependency-tree.json
          frontend/npm-audit-report.json
          frontend/audit-ci-report.json
          dependency-update-report.md
        retention-days: 30

    - name: Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update dependencies [automated]
          
          - Updated ${{ steps.changes.outputs.changed_files }} dependency files
          - Python security issues addressed: ${{ steps.python-analysis.outputs.outdated_count || '0' }}
          - Node.js security issues addressed: ${{ steps.nodejs-analysis.outputs.outdated_count || '0' }}
          - Update type: ${{ github.event.inputs.update_type || 'all' }}
        title: |
          🔄 Automated Dependency Updates (${{ steps.changes.outputs.changed_files }} files)
        body: |
          ## 🔄 Automated Dependency Updates
          
          This PR contains automated dependency updates with comprehensive security analysis.
          
          ### 📊 Update Summary
          - **Files Changed:** ${{ steps.changes.outputs.changed_files }}
          - **Update Type:** ${{ github.event.inputs.update_type || 'all' }}
          - **Major Updates:** ${{ github.event.inputs.force_major || 'disabled' }}
          - **Trigger:** ${{ github.event_name }}
          
          ### 🐍 Python Dependencies
          ${{ steps.python-analysis.outputs.has_updates == 'true' && '✅ Updated' || '📋 No updates available' }}
          ${{ steps.python-analysis.outputs.outdated_count > 0 && format('- **Packages Updated:** {0}', steps.python-analysis.outputs.outdated_count) || '' }}
          
          ### 📦 Node.js Dependencies  
          ${{ steps.nodejs-analysis.outputs.has_updates == 'true' && '✅ Updated' || '📋 No updates available' }}
          ${{ steps.nodejs-analysis.outputs.outdated_count > 0 && format('- **Packages Updated:** {0}', steps.nodejs-analysis.outputs.outdated_count) || '' }}
          
          ### 🔒 Security Analysis
          - ✅ All dependencies scanned for vulnerabilities
          - ✅ Security fixes automatically applied where possible
          - ✅ Comprehensive audit reports generated
          - 📄 **Security reports available in workflow artifacts**
          
          ### 🧪 Validation Status
          - ${{ (steps.python-update.outputs.full_update == 'true' || steps.python-update.outputs.security_only == 'true') && '✅ Python build validated' || '⏭️ Python validation skipped' }}
          - ${{ (steps.nodejs-update.outputs.full_update == 'true' || steps.nodejs-update.outputs.security_only == 'true') && '✅ Node.js build validated' || '⏭️ Node.js validation skipped' }}
          - ✅ Import tests passed
          - ✅ Linting checks completed
          
          ### 📋 Review Checklist
          
          **Required Reviews:**
          - [ ] 🔍 Review all dependency version changes
          - [ ] 🧪 Run full test suite locally  
          - [ ] 🔐 Review security report artifacts
          - [ ] 🚀 Test application startup and core functionality
          - [ ] 📚 Check for any breaking changes in updated packages
          
          **Optional Reviews:**
          - [ ] 📊 Review performance impact of updates
          - [ ] 📖 Check changelog/release notes for major updates
          - [ ] 🔧 Update any integration tests if needed
          
          ### ⚠️ Important Notes
          
          ${{ github.event.inputs.force_major == 'true' && '🚨 **Major version updates included** - Extra caution required during review' || '✅ Only minor/patch updates included' }}
          
          ${{ github.event.inputs.update_type == 'security-only' && '🔒 **Security-only updates** - Focus on vulnerability patches' || '' }}
          
          ### 🔗 Resources
          - 📄 [Dependency Security Reports (Artifacts)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          🤖 **Automated PR** | Generated by dependency update workflow  
          🕒 **Created:** $(date -u +"%Y-%m-%d %H:%M UTC")
          
          > **Review carefully before merging** - Automated updates require human verification
        branch: automated/dependency-updates-${{ github.run_number }}
        delete-branch: true
        draft: false
        labels: |
          dependencies
          automated
          security
          ${{ github.event.inputs.update_type || 'full-update' }}
          ${{ github.event.inputs.force_major == 'true' && 'major-updates' || 'minor-updates' }}

    # Cleanup and summary  
    - name: Workflow Summary
      if: always()
      run: |
        echo "## 📊 Dependency Update Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Update Type:** ${{ github.event.inputs.update_type || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Changes Detected:** ${{ steps.changes.outputs.changes }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.changes.outputs.changes }}" = "true" ]; then
          echo "✅ **PR Created:** Automated dependency updates with comprehensive security analysis" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Files Changed:** ${{ steps.changes.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "📋 **No Updates:** All dependencies are current" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Python packages analyzed: ${{ steps.python-analysis.outputs.outdated_count || '0' }}" >> $GITHUB_STEP_SUMMARY  
        echo "- Node.js packages analyzed: ${{ steps.nodejs-analysis.outputs.outdated_count || '0' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View detailed reports in workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY