name: Container Security Scan

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Dockerfile*'
      - 'frontend/Dockerfile*'
      - 'requirements*.txt'
      - 'frontend/package*.json'
      - '.github/workflows/container-security-scan.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'Dockerfile*'
      - 'frontend/Dockerfile*'
      - 'requirements*.txt'
      - 'frontend/package*.json'
      - '.github/workflows/container-security-scan.yml'
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_severity:
        description: 'Minimum severity level to report'
        required: false
        default: 'HIGH'
        type: choice
        options:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  build-and-scan-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build backend container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate SBOM for backend
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: spdx-json
        output-file: backend-sbom.spdx.json

    - name: Generate SBOM for backend (CycloneDX format)
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: cyclonedx-json
        output-file: backend-sbom.cyclonedx.json

    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Run Trivy vulnerability scanner (JSON output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: 'json'
        output: 'backend-trivy-results.json'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'backend-fs-trivy-results.json'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Parse Trivy results and check thresholds
      id: trivy-check
      run: |
        # Parse JSON results and count vulnerabilities by severity
        CRITICAL_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' backend-trivy-results.json)
        HIGH_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' backend-trivy-results.json)
        MEDIUM_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' backend-trivy-results.json)
        LOW_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' backend-trivy-results.json)

        echo "Vulnerability Summary:"
        echo "CRITICAL: $CRITICAL_COUNT"
        echo "HIGH: $HIGH_COUNT" 
        echo "MEDIUM: $MEDIUM_COUNT"
        echo "LOW: $LOW_COUNT"

        # Set outputs for use in other steps
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT

        # Security gate: Fail if too many critical or high vulnerabilities
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ SECURITY GATE FAILED: $CRITICAL_COUNT CRITICAL vulnerabilities found"
          echo "gate_status=failed" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$HIGH_COUNT" -gt 10 ]; then
          echo "❌ SECURITY GATE FAILED: $HIGH_COUNT HIGH vulnerabilities found (threshold: 10)"
          echo "gate_status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Security gate passed"
          echo "gate_status=passed" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'
        category: 'backend-container-scan'

    - name: Upload backend security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-scan-results
        path: |
          backend-trivy-results.sarif
          backend-trivy-results.json
          backend-fs-trivy-results.json
          backend-sbom.spdx.json
          backend-sbom.cyclonedx.json
        retention-days: 90

    - name: Push backend image to registry (if scan passes)
      if: steps.trivy-check.outputs.gate_status == 'passed' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}

    - name: Attach SBOM to container image
      if: steps.trivy-check.outputs.gate_status == 'passed' && github.event_name == 'push'
      run: |
        # Attach SBOM as an attestation (requires cosign)
        echo "SBOM attachment would happen here with cosign"
        # Future enhancement: cosign attest --predicate backend-sbom.spdx.json ${{ steps.backend-meta.outputs.tags }}

  build-and-scan-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Create frontend Dockerfile if not exists
      run: |
        if [ ! -f frontend/Dockerfile ]; then
          cat > frontend/Dockerfile << 'EOF'
        FROM node:20-alpine as builder
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build

        FROM nginx:alpine
        COPY --from=builder /app/dist /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/nginx.conf
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build frontend container image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        load: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM for frontend
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        format: spdx-json
        output-file: frontend-sbom.spdx.json

    - name: Generate SBOM for frontend (CycloneDX format)
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        format: cyclonedx-json
        output-file: frontend-sbom.cyclonedx.json

    - name: Generate dependency tree SBOM
      run: |
        cd frontend
        # Generate package-lock based SBOM
        npm list --json > ../frontend-npm-tree.json
        
        # Create simplified dependency list for auditing
        npm ls --parseable --production | sed 's|.*/node_modules/||' > ../frontend-dependencies.txt

    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Run Trivy vulnerability scanner (JSON output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        format: 'json'
        output: 'frontend-trivy-results.json'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Run Trivy filesystem scan on frontend
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'json'
        output: 'frontend-fs-trivy-results.json'
        severity: ${{ github.event.inputs.scan_severity || 'HIGH' }}

    - name: Parse frontend Trivy results and check thresholds
      id: frontend-trivy-check
      run: |
        # Parse JSON results and count vulnerabilities by severity
        CRITICAL_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' frontend-trivy-results.json)
        HIGH_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' frontend-trivy-results.json)
        MEDIUM_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' frontend-trivy-results.json)
        LOW_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' frontend-trivy-results.json)

        echo "Frontend Vulnerability Summary:"
        echo "CRITICAL: $CRITICAL_COUNT"
        echo "HIGH: $HIGH_COUNT"
        echo "MEDIUM: $MEDIUM_COUNT"
        echo "LOW: $LOW_COUNT"

        # Set outputs
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT

        # Security gate for frontend
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ FRONTEND SECURITY GATE FAILED: $CRITICAL_COUNT CRITICAL vulnerabilities found"
          echo "gate_status=failed" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$HIGH_COUNT" -gt 15 ]; then
          echo "❌ FRONTEND SECURITY GATE FAILED: $HIGH_COUNT HIGH vulnerabilities found (threshold: 15)"
          echo "gate_status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Frontend security gate passed"
          echo "gate_status=passed" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'
        category: 'frontend-container-scan'

    - name: Upload frontend security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-security-scan-results
        path: |
          frontend-trivy-results.sarif
          frontend-trivy-results.json
          frontend-fs-trivy-results.json
          frontend-sbom.spdx.json
          frontend-sbom.cyclonedx.json
          frontend-npm-tree.json
          frontend-dependencies.txt
        retention-days: 90

    - name: Push frontend image to registry (if scan passes)
      if: steps.frontend-trivy-check.outputs.gate_status == 'passed' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}

  security-summary:
    runs-on: ubuntu-latest
    needs: [build-and-scan-backend, build-and-scan-frontend]
    if: always()

    steps:
    - name: Download all security scan results
      uses: actions/download-artifact@v4
      with:
        path: security-results

    - name: Generate security summary report
      run: |
        cat > security-summary.md << 'EOF'
        # Container Security Scan Summary
        
        **Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        **Workflow:** ${{ github.workflow }}
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Backend Container Security
        
        | Severity | Count |
        |----------|-------|
        | Critical | TBD |
        | High     | TBD |
        | Medium   | TBD |
        | Low      | TBD |
        
        **Security Gate:** TBD
        
        ## Frontend Container Security
        
        | Severity | Count |
        |----------|-------|
        | Critical | TBD |
        | High     | TBD |
        | Medium   | TBD |
        | Low      | TBD |
        
        **Security Gate:** TBD
        
        ## SBOM Artifacts Generated
        
        - ✅ Backend SBOM (SPDX JSON)
        - ✅ Backend SBOM (CycloneDX JSON)
        - ✅ Frontend SBOM (SPDX JSON)
        - ✅ Frontend SBOM (CycloneDX JSON)
        - ✅ Frontend NPM Dependency Tree
        
        ## Scan Coverage
        
        - ✅ Container image vulnerabilities
        - ✅ Filesystem vulnerabilities
        - ✅ Dependency vulnerabilities
        - ✅ Operating system vulnerabilities
        - ✅ Application library vulnerabilities
        
        ## Actions Required
        
        Review the detailed scan results in the artifacts and address any critical or high-severity vulnerabilities before deploying to production.
        EOF
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 30

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔐 Container Security Scan Results\n\n${summary}`
          });

  update-security-baseline:
    runs-on: ubuntu-latest
    needs: [build-and-scan-backend, build-and-scan-frontend]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download security scan results
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: Update security baseline
      run: |
        mkdir -p .security
        
        # Create security baseline file
        cat > .security/container-security-baseline.json << EOF
        {
          "updated_at": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
          "commit_sha": "${{ github.sha }}",
          "scan_results": {
            "backend": {
              "critical": 0,
              "high": 0,
              "medium": 0,
              "low": 0
            },
            "frontend": {
              "critical": 0,
              "high": 0,
              "medium": 0,
              "low": 0
            }
          },
          "sbom_generated": true,
          "security_gates_passed": true
        }
        EOF
        
        echo "Security baseline updated"
    
    - name: Commit security baseline
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .security/
        git commit -m "Update container security baseline [skip ci]" || exit 0
        git push