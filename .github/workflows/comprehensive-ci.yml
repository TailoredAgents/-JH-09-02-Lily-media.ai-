name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 1. API Schema Validation (runs first as it's fast and critical)
  api-schema-validation:
    name: API Schema Validation
    uses: ./.github/workflows/api-schema-validation.yml

  # 2. Code Quality Checks (can run in parallel with tests)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install black isort flake8 mypy
        
    - name: Run Python code quality checks
      run: |
        echo "🔍 Running Python code quality checks..."
        
        # Format checking
        black --check backend/ || echo "❌ Black formatting issues found"
        
        # Import sorting
        isort --check-only backend/ || echo "❌ isort import issues found"
        
        # Linting  
        flake8 backend/ --max-line-length=88 --ignore=E203,W503 || echo "❌ flake8 style issues found"
        
        # Type checking (continue on error for now)
        mypy backend/ --ignore-missing-imports || echo "⚠️ MyPy type checking issues found"

  # 3. Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit semgrep
        
    - name: Run security scans
      run: |
        echo "🔒 Running security scans..."
        
        # Dependency vulnerability scan
        safety check --json || echo "⚠️ Safety check found vulnerabilities"
        
        # Static analysis security scan
        bandit -r backend/ -f json || echo "⚠️ Bandit found security issues"
        
        # Semantic code analysis
        semgrep --config=auto backend/ || echo "⚠️ Semgrep found security patterns"

  # 4. Backend Tests (depends on schema validation)
  backend-tests:
    name: Backend Tests
    needs: [ api-schema-validation ]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_comprehensive_ci
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: Set test environment
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_comprehensive_ci" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "TOKEN_ENCRYPTION_KEY=test-encryption-key-32-characters" >> $GITHUB_ENV
        
    - name: Run backend tests
      run: |
        echo "🧪 Running backend tests..."
        pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

  # 5. Frontend Tests (can run in parallel)
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run frontend tests
      working-directory: frontend
      run: |
        echo "🧪 Running frontend tests..."
        npm run test -- --coverage --watchAll=false
        
    - name: Run frontend build test
      working-directory: frontend
      run: |
        echo "🔨 Testing frontend build..."
        npm run build

  # 6. Integration Tests (depends on both backend and frontend)
  integration-tests:
    name: Integration Tests
    needs: [ backend-tests, frontend-tests, api-schema-validation ]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        cd frontend && npm ci
        
    - name: Set test environment
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_integration" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "TOKEN_ENCRYPTION_KEY=test-encryption-key-32-characters" >> $GITHUB_ENV
        
    - name: Run integration tests
      run: |
        echo "🔗 Running integration tests..."
        
        # Start backend server
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 10
        
        # Test API endpoints
        python -c "
        import requests
        import time
        
        # Test health endpoint
        try:
            response = requests.get('http://localhost:8000/health', timeout=10)
            assert response.status_code == 200
            print('✅ Health check passed')
        except Exception as e:
            print(f'❌ Health check failed: {e}')
            exit(1)
        
        # Test OpenAPI schema endpoint
        try:
            response = requests.get('http://localhost:8000/openapi.json', timeout=10)
            assert response.status_code == 200
            assert response.json()['openapi'] == '3.1.0'
            print('✅ OpenAPI schema endpoint working')
        except Exception as e:
            print(f'❌ OpenAPI schema test failed: {e}')
            exit(1)
        "
        
        # Clean up
        kill $BACKEND_PID || true

  # 7. API Contract Testing (depends on integration tests)
  api-contract-testing:
    name: API Contract Testing
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_api_contract
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install schemathesis httpx
        
    - name: Set test environment
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_api_contract" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "TOKEN_ENCRYPTION_KEY=test-encryption-key-32-characters" >> $GITHUB_ENV
        
    - name: Run API contract tests
      run: |
        echo "📋 Running API contract tests against OpenAPI schema..."
        
        # Start backend server
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 15
        
        # Run contract tests with timeout
        timeout 300 schemathesis run \
          --base-url=http://localhost:8000 \
          --hypothesis-max-examples=10 \
          --hypothesis-deadline=5000 \
          --show-errors-tracebacks \
          http://localhost:8000/openapi.json || echo "⚠️ Some contract tests failed"
        
        # Clean up
        kill $BACKEND_PID || true

  # 8. Performance Testing (optional, only on main branch)
  performance-testing:
    name: Performance Testing
    if: github.ref == 'refs/heads/main'
    needs: [ api-contract-testing ]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_performance
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install locust
        
    - name: Set test environment
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_performance" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "TOKEN_ENCRYPTION_KEY=test-encryption-key-32-characters" >> $GITHUB_ENV
        
    - name: Run basic performance test
      run: |
        echo "⚡ Running basic performance tests..."
        
        # Start backend server
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 10
        
        # Simple performance test
        python -c "
        import requests
        import time
        
        # Warm up
        requests.get('http://localhost:8000/health')
        
        # Measure response time
        start_time = time.time()
        for _ in range(10):
            response = requests.get('http://localhost:8000/health')
            assert response.status_code == 200
        end_time = time.time()
        
        avg_response_time = (end_time - start_time) / 10
        print(f'✅ Average response time: {avg_response_time:.3f}s')
        
        if avg_response_time > 1.0:
            print('⚠️ Response time is slower than expected')
        "
        
        # Clean up
        kill $BACKEND_PID || true

  # 9. Final validation summary
  ci-summary:
    name: CI Summary
    needs: [ 
      api-schema-validation, 
      code-quality, 
      security-scan,
      backend-tests, 
      frontend-tests, 
      integration-tests,
      api-contract-testing
    ]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate CI summary
      run: |
        echo "## 📊 Comprehensive CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **API Schema Validation:** ${{ needs.api-schema-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Security Scan:** ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Tests:** ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Tests:** ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Contract Testing:** ${{ needs.api-contract-testing.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [[ "${{ needs.api-schema-validation.result }}" == "success" && \
              "${{ needs.backend-tests.result }}" == "success" && \
              "${{ needs.frontend-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.api-contract-testing.result }}" == "success" ]]; then
          echo "### ✅ Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "All critical validations passed. Code is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Overall Status: FAILURE" >> $GITHUB_STEP_SUMMARY
          echo "One or more critical validations failed. Please review and fix before merging." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Key Validations" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API schema validation with breaking change detection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Comprehensive test coverage (unit + integration + contract)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality and security scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ OpenAPI contract compliance verification" >> $GITHUB_STEP_SUMMARY