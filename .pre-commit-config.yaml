# Pre-commit hooks configuration for AI Social Media Content Agent
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # Generic pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
        exclude: \.md$
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]
        files: ^backend/.*\.py$

  # Python import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: ^backend/.*\.py$

  # Python linting with flake8
  - repo: https://github.com/PyCQA/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: ^backend/.*\.py$
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  # Python type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.6.1
    hooks:
      - id: mypy
        files: ^backend/.*\.py$
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies:
          - types-requests
          - types-redis
          - types-python-jose

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -ll]
        files: ^backend/.*\.py$
        exclude: ^backend/tests/.*

  # Python dependency security check
  - repo: https://github.com/lucas-c/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # JavaScript/TypeScript formatting with Prettier
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        files: ^frontend/.*\.(js|jsx|ts|tsx|json|css|scss|md)$
        exclude: ^frontend/(node_modules|dist|build)/.*

  # JavaScript/TypeScript linting with ESLint
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.51.0
    hooks:
      - id: eslint
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        exclude: ^frontend/(node_modules|dist|build)/.*
        additional_dependencies:
          - eslint@8.51.0
          - '@typescript-eslint/eslint-plugin@6.7.0'
          - '@typescript-eslint/parser@6.7.0'
          - eslint-plugin-react@7.33.2
          - eslint-plugin-react-hooks@4.6.0

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: \.lock$|package-lock\.json$

  # Docker Compose file validation
  - repo: https://github.com/IamTheFij/docker-pre-commit
    rev: v3.0.1
    hooks:
      - id: docker-compose-check

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: ^(CHANGELOG\.md|frontend/node_modules/.*\.md)$

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.10.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # SQL formatting (for migration files)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.2
    hooks:
      - id: sqlfluff-lint
        files: \.sql$
        args: [--dialect=postgres]
      - id: sqlfluff-fix
        files: \.sql$
        args: [--dialect=postgres]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091]

  # API Schema Validation and Management (custom local hooks)
  - repo: local
    hooks:
      # Validate API schema before commit
      - id: api-schema-validation
        name: Validate OpenAPI Schema
        entry: python scripts/openapi-schema-manager.py --validate --project-root .
        language: system
        files: ^(backend/api/|app\.py|backend/main\.py|backend/docs/|docs/openapi\.json)
        pass_filenames: false
        stages: [commit]
        verbose: true
        description: "Validates OpenAPI schema consistency and completeness"

      # Update API schema (manual trigger)
      - id: api-schema-update
        name: Update OpenAPI Schema
        entry: python scripts/openapi-schema-manager.py --update --project-root .
        language: system
        files: ^(backend/api/|app\.py|backend/main\.py|backend/docs/)
        pass_filenames: false
        stages: [manual]
        verbose: true
        description: "Updates OpenAPI schema from current API implementation"

      # Prevent committing mock/placeholder code
      - id: no-mock-code
        name: Prevent Mock/Placeholder Code
        entry: python -c "
        import sys, re
        mock_patterns = [
            r'mock[_\s]*data',
            r'placeholder[_\s]*\w+',
            r'todo[:\s]*implement',
            r'fixme[:\s]*',
            r'temporary[_\s]*\w+',
            r'fake[_\s]*data'
        ]
        for line_num, line in enumerate(sys.stdin, 1):
            line_lower = line.lower()
            for pattern in mock_patterns:
                if re.search(pattern, line_lower) and 'test' not in line_lower:
                    print(f'Line {line_num}: Mock/placeholder code detected: {line.strip()}')
                    sys.exit(1)
        "
        language: system
        types: [python]
        exclude: ^backend/tests/
        description: "Prevents committing mock or placeholder code in production"

      # Check for API breaking changes
      - id: api-breaking-changes
        name: Check for API Breaking Changes
        entry: python -c "
        import subprocess, sys, json
        try:
            # Run schema comparison if on a branch
            result = subprocess.run([
                'git', 'show', 'main:docs/openapi.json'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                # Main schema exists, compare
                with open('main-schema.json', 'w') as f:
                    f.write(result.stdout)
                
                # Use our schema manager to detect breaking changes
                import sys
                sys.path.append('scripts')
                from openapi_schema_manager import OpenAPISchemaManager
                
                manager = OpenAPISchemaManager()
                with open('main-schema.json', 'r') as f:
                    old_schema = json.load(f)
                with open('docs/openapi.json', 'r') as f:
                    new_schema = json.load(f)
                
                changes = manager.compare_schemas(old_schema, new_schema)
                
                if changes['breaking_changes']:
                    print('⚠️ API Breaking changes detected:')
                    for change in changes['breaking_changes']:
                        print(f'  - {change}')
                    print('Please review these changes carefully.')
                    # Don't fail, just warn
                
        except Exception as e:
            print(f'Note: Could not check for breaking changes: {e}')
        "
        language: system
        files: ^docs/openapi\.json$
        pass_filenames: false
        stages: [commit]
        description: "Warns about potential API breaking changes"

      # Validate database migration files
      - id: migration-validation
        name: Validate Database Migrations
        entry: python -c "
        import sys, re, os
        for filename in sys.argv[1:]:
            if 'alembic/versions' in filename and filename.endswith('.py'):
                with open(filename, 'r') as f:
                    content = f.read()
                
                # Check for required migration elements
                if 'def upgrade():' not in content:
                    print(f'{filename}: Missing upgrade() function')
                    sys.exit(1)
                
                if 'def downgrade():' not in content:
                    print(f'{filename}: Missing downgrade() function')
                    sys.exit(1)
                
                # Check for organization_id in new tables
                if re.search(r'create_table\s*\(', content, re.IGNORECASE):
                    if 'organization_id' not in content:
                        print(f'{filename}: New table should include organization_id for multi-tenancy')
                        # Don't fail, just warn
        "
        language: system
        files: ^alembic/versions/.*\.py$
        description: "Validates database migration files for completeness"

      # Check for proper error handling in API endpoints
      - id: api-error-handling
        name: Check API Error Handling
        entry: python -c "
        import sys, re, ast
        for filename in sys.argv[1:]:
            if filename.startswith('backend/api/') and filename.endswith('.py'):
                try:
                    with open(filename, 'r') as f:
                        content = f.read()
                    
                    # Parse AST to find function definitions with @router decorators
                    tree = ast.parse(content)
                    
                    for node in ast.walk(tree):
                        if isinstance(node, ast.FunctionDef):
                            # Check if function has router decorator
                            has_router = any(
                                isinstance(d, ast.Attribute) and 
                                getattr(d.attr, None) in ['get', 'post', 'put', 'delete', 'patch']
                                for d in node.decorator_list
                            )
                            
                            if has_router:
                                # Check for try/except or HTTPException
                                func_str = ast.get_source_segment(content, node) or ''
                                if 'try:' not in func_str and 'HTTPException' not in func_str:
                                    print(f'{filename}:{node.lineno}: API endpoint {node.name} should have error handling')
                                    # Don't fail, just warn
                                
                except Exception:
                    pass  # Skip files that can't be parsed
        "
        language: system
        files: ^backend/api/.*\.py$
        description: "Checks that API endpoints have proper error handling"

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false